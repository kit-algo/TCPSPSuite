// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include <odb/database.hxx>
#include <odb/schema-catalog-impl.hxx>

#include <odb/details/unused.hxx>

namespace odb
{
  static bool
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          return true;
        }
        case 2:
        {
          db.execute ("DROP TABLE IF EXISTS `DBExtendedMeasure`");
          db.execute ("DROP TABLE IF EXISTS `DBError`");
          db.execute ("DROP TABLE IF EXISTS `DBIntermediate`");
          db.execute ("DROP TABLE IF EXISTS `DBSolutionJob`");
          db.execute ("DROP TABLE IF EXISTS `DBSolution`");
          db.execute ("DROP TABLE IF EXISTS `DBPapiMeasurement`");
          db.execute ("DROP TABLE IF EXISTS `DBResourcesInfo`");
          db.execute ("DROP TABLE IF EXISTS `DBResult`");
          db.execute ("DROP TABLE IF EXISTS `DBInvocation`");
          db.execute ("DROP TABLE IF EXISTS `DBConfig`");
          db.execute ("DROP TABLE IF EXISTS `DBConfigKV`");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE `DBConfigKV` (\n"
                      "  `cfg` BIGINT UNSIGNED NOT NULL,\n"
                      "  `key` TEXT NOT NULL,\n"
                      "  `value` TEXT NOT NULL,\n"
                      "  `id` BIGINT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE INDEX `cfg_i`\n"
                      "  ON `DBConfigKV` (`cfg`)");
          db.execute ("CREATE TABLE `DBConfig` (\n"
                      "  `name` TEXT NOT NULL,\n"
                      "  `time_limit` INT UNSIGNED NULL,\n"
                      "  `id` BIGINT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE INDEX `name_i`\n"
                      "  ON `DBConfig` (`name`)");
          db.execute ("CREATE TABLE `DBInvocation` (\n"
                      "  `cmdline` TEXT NOT NULL,\n"
                      "  `git_revision` TEXT NOT NULL,\n"
                      "  `hostname` TEXT NOT NULL,\n"
                      "  `time` BIGINT UNSIGNED NOT NULL,\n"
                      "  `id` BIGINT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE TABLE `DBResult` (\n"
                      "  `run` TEXT NOT NULL,\n"
                      "  `instance` TEXT NOT NULL,\n"
                      "  `score` DOUBLE NOT NULL,\n"
                      "  `algorithm` TEXT NOT NULL,\n"
                      "  `config` TEXT NOT NULL,\n"
                      "  `seed` INT NOT NULL,\n"
                      "  `optimal` TINYINT(1) NOT NULL,\n"
                      "  `feasible` TINYINT(1) NOT NULL,\n"
                      "  `lower_bound` DOUBLE NULL,\n"
                      "  `elapsed` DOUBLE NOT NULL,\n"
                      "  `time` BIGINT UNSIGNED NOT NULL,\n"
                      "  `invocation` BIGINT UNSIGNED NULL,\n"
                      "  `cfg` BIGINT UNSIGNED NOT NULL,\n"
                      "  `id` BIGINT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE INDEX `instance_i`\n"
                      "  ON `DBResult` (`instance`)");
          db.execute ("CREATE INDEX `algorithm_i`\n"
                      "  ON `DBResult` (`algorithm`)");
          db.execute ("CREATE INDEX `cfg_i`\n"
                      "  ON `DBResult` (`cfg`)");
          db.execute ("CREATE TABLE `DBResourcesInfo` (\n"
                      "  `res` BIGINT UNSIGNED NOT NULL,\n"
                      "  `major_pagefaults` BIGINT UNSIGNED NOT NULL,\n"
                      "  `minor_pagefaults` BIGINT UNSIGNED NOT NULL,\n"
                      "  `user_usecs` BIGINT UNSIGNED NOT NULL,\n"
                      "  `system_usecs` BIGINT UNSIGNED NOT NULL,\n"
                      "  `max_rss_size` BIGINT UNSIGNED NULL,\n"
                      "  `max_data_size` BIGINT UNSIGNED NULL,\n"
                      "  `malloc_max_size` BIGINT UNSIGNED NULL,\n"
                      "  `malloc_count` BIGINT UNSIGNED NULL,\n"
                      "  `id` BIGINT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE INDEX `res_i`\n"
                      "  ON `DBResourcesInfo` (`res`)");
          db.execute ("CREATE TABLE `DBPapiMeasurement` (\n"
                      "  `res` BIGINT UNSIGNED NOT NULL,\n"
                      "  `event_type` TEXT NOT NULL,\n"
                      "  `event_count` BIGINT NOT NULL,\n"
                      "  `id` BIGINT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE INDEX `res_i`\n"
                      "  ON `DBPapiMeasurement` (`res`)");
          db.execute ("CREATE TABLE `DBSolution` (\n"
                      "  `res` BIGINT UNSIGNED NOT NULL,\n"
                      "  `id` BIGINT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE INDEX `res_i`\n"
                      "  ON `DBSolution` (`res`)");
          db.execute ("CREATE TABLE `DBSolutionJob` (\n"
                      "  `sol` BIGINT UNSIGNED NOT NULL,\n"
                      "  `job_id` INT UNSIGNED NOT NULL,\n"
                      "  `start_time` INT UNSIGNED NOT NULL,\n"
                      "  `id` BIGINT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE TABLE `DBIntermediate` (\n"
                      "  `res` BIGINT UNSIGNED NOT NULL,\n"
                      "  `time` DOUBLE NOT NULL,\n"
                      "  `iteration` INT UNSIGNED NOT NULL,\n"
                      "  `costs` DOUBLE NOT NULL,\n"
                      "  `bound` DOUBLE NOT NULL,\n"
                      "  `solution` BIGINT UNSIGNED NULL,\n"
                      "  `id` BIGINT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE INDEX `res_i`\n"
                      "  ON `DBIntermediate` (`res`)");
          db.execute ("CREATE TABLE `DBError` (\n"
                      "  `timestamp` BIGINT UNSIGNED NOT NULL,\n"
                      "  `run` TEXT NOT NULL,\n"
                      "  `instance` TEXT NOT NULL,\n"
                      "  `algorithm` TEXT NOT NULL,\n"
                      "  `config` TEXT NOT NULL,\n"
                      "  `seed` INT NOT NULL,\n"
                      "  `fault_code` INT NOT NULL,\n"
                      "  `error_id` INT NOT NULL,\n"
                      "  `time` BIGINT UNSIGNED NOT NULL,\n"
                      "  `git_revision` TEXT NOT NULL,\n"
                      "  `id` BIGINT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE TABLE `DBExtendedMeasure` (\n"
                      "  `res` BIGINT UNSIGNED NOT NULL,\n"
                      "  `key` TEXT NOT NULL,\n"
                      "  `iteration` INT UNSIGNED NULL,\n"
                      "  `time` DOUBLE NULL,\n"
                      "  `v_int` INT NULL,\n"
                      "  `v_double` DOUBLE NULL,\n"
                      "  `id` BIGINT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE INDEX `res_i`\n"
                      "  ON `DBExtendedMeasure` (`res`)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_create_entry
  create_schema_entry_ (
    id_mysql,
    "",
    &create_schema);
}

#include <odb/post.hxx>
