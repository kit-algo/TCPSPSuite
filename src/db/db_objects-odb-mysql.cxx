// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#define ODB_MYSQL_QUERY_COLUMNS_DEF
#include "db_objects-odb-mysql.hxx"
#undef ODB_MYSQL_QUERY_COLUMNS_DEF

#include <cassert>
#include <cstring>  // std::memcpy

#include <odb/function-table.hxx>

#include <odb/mysql/traits.hxx>
#include <odb/mysql/database.hxx>
#include <odb/mysql/transaction.hxx>
#include <odb/mysql/connection.hxx>
#include <odb/mysql/statement.hxx>
#include <odb/mysql/statement-cache.hxx>
#include <odb/mysql/simple-object-statements.hxx>
#include <odb/mysql/view-statements.hxx>
#include <odb/mysql/container-statements.hxx>
#include <odb/mysql/exceptions.hxx>
#include <odb/mysql/simple-object-result.hxx>
#include <odb/mysql/view-result.hxx>
#include <odb/mysql/enum.hxx>

namespace odb
{
  // DBConfigKV
  //

  const char alias_traits<  ::DBConfig,
    id_mysql,
    access::object_traits_impl< ::DBConfigKV, id_mysql >::cfg_tag>::
  table_name[] = "`cfg`";

  template struct query_columns<
    ::DBConfig,
    id_mysql,
    query_columns_base< ::DBConfigKV, id_mysql >::cfg_alias_ >;

  template struct query_columns<
    ::DBConfigKV,
    id_mysql,
    access::object_traits_impl< ::DBConfigKV, id_mysql > >;

  template struct pointer_query_columns<
    ::DBConfigKV,
    id_mysql,
    access::object_traits_impl< ::DBConfigKV, id_mysql > >;

  struct access::object_traits_impl< ::DBConfigKV, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      id_image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  access::object_traits_impl< ::DBConfigKV, id_mysql >::id_type
  access::object_traits_impl< ::DBConfigKV, id_mysql >::
  id (const id_image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::DBConfigKV, id_mysql >::id_type
  access::object_traits_impl< ::DBConfigKV, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::DBConfigKV, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // cfg
    //
    t[0UL] = 0;

    // key
    //
    if (t[1UL])
    {
      i.key_value.capacity (i.key_size);
      grew = true;
    }

    // value
    //
    if (t[2UL])
    {
      i.value_value.capacity (i.value_size);
      grew = true;
    }

    // id_
    //
    t[3UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::DBConfigKV, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // cfg
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.cfg_value;
    b[n].is_null = &i.cfg_null;
    n++;

    // key
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.key_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.key_value.capacity ());
    b[n].length = &i.key_size;
    b[n].is_null = &i.key_null;
    n++;

    // value
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.value_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.value_value.capacity ());
    b[n].length = &i.value_size;
    b[n].is_null = &i.value_null;
    n++;

    // id_
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_LONGLONG;
      b[n].is_unsigned = 1;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }
  }

  void access::object_traits_impl< ::DBConfigKV, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::DBConfigKV, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // cfg
    //
    {
      ::std::weak_ptr< ::DBConfig > const& v =
        o.cfg;

      typedef object_traits< ::DBConfig > obj_traits;
      typedef odb::pointer_traits< ::std::weak_ptr< ::DBConfig > > wptr_traits;
      typedef odb::pointer_traits< wptr_traits::strong_pointer_type > ptr_traits;

      wptr_traits::strong_pointer_type sp (wptr_traits::lock (v));
      bool is_null (ptr_traits::null_ptr (sp));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (sp)));

        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_image (
          i.cfg_value, is_null, id);
        i.cfg_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // key
    //
    {
      ::std::string const& v =
        o.key;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.key_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.key_value,
        size,
        is_null,
        v);
      i.key_null = is_null;
      i.key_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.key_value.capacity ());
    }

    // value
    //
    {
      ::std::string const& v =
        o.value;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.value_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.value_value,
        size,
        is_null,
        v);
      i.value_null = is_null;
      i.value_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.value_value.capacity ());
    }

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, v);
      i.id_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::DBConfigKV, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // cfg
    //
    {
      ::std::weak_ptr< ::DBConfig >& v =
        o.cfg;

      typedef object_traits< ::DBConfig > obj_traits;
      typedef odb::pointer_traits< ::std::weak_ptr< ::DBConfig > > ptr_traits;

      if (i.cfg_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_value (
          id,
          i.cfg_value,
          i.cfg_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mysql::database*> (db)->load<
            obj_traits::object_type > (id));

        if (odb::pointer_traits<ptr_traits::strong_pointer_type>::null_ptr (
              ptr_traits::lock (v)))
          throw session_required ();
      }
    }

    // key
    //
    {
      ::std::string& v =
        o.key;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.key_value,
        i.key_size,
        i.key_null);
    }

    // value
    //
    {
      ::std::string& v =
        o.value;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.value_value,
        i.value_size,
        i.value_null);
    }

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.id_value,
        i.id_null);
    }
  }

  void access::object_traits_impl< ::DBConfigKV, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::DBConfigKV, id_mysql >::persist_statement[] =
  "INSERT INTO `DBConfigKV` "
  "(`cfg`, "
  "`key`, "
  "`value`, "
  "`id`) "
  "VALUES "
  "(?, ?, ?, ?)";

  const char access::object_traits_impl< ::DBConfigKV, id_mysql >::find_statement[] =
  "SELECT "
  "`DBConfigKV`.`cfg`, "
  "`DBConfigKV`.`key`, "
  "`DBConfigKV`.`value`, "
  "`DBConfigKV`.`id` "
  "FROM `DBConfigKV` "
  "WHERE `DBConfigKV`.`id`=?";

  const char access::object_traits_impl< ::DBConfigKV, id_mysql >::update_statement[] =
  "UPDATE `DBConfigKV` "
  "SET "
  "`cfg`=?, "
  "`key`=?, "
  "`value`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::DBConfigKV, id_mysql >::erase_statement[] =
  "DELETE FROM `DBConfigKV` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::DBConfigKV, id_mysql >::query_statement[] =
  "SELECT\n"
  "`DBConfigKV`.`cfg`,\n"
  "`DBConfigKV`.`key`,\n"
  "`DBConfigKV`.`value`,\n"
  "`DBConfigKV`.`id`\n"
  "FROM `DBConfigKV`\n"
  "LEFT JOIN `DBConfig` AS `cfg` ON `cfg`.`id`=`DBConfigKV`.`cfg`";

  const char access::object_traits_impl< ::DBConfigKV, id_mysql >::erase_query_statement[] =
  "DELETE FROM `DBConfigKV`";

  const char access::object_traits_impl< ::DBConfigKV, id_mysql >::table_name[] =
  "`DBConfigKV`";

  void access::object_traits_impl< ::DBConfigKV, id_mysql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_value = 0;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBConfigKV, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBConfigKV, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBConfigKV, id_mysql >::pointer_type
  access::object_traits_impl< ::DBConfigKV, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBConfigKV, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBConfigKV, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBConfigKV, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::DBConfigKV, id_mysql >::object_type >
  access::object_traits_impl< ::DBConfigKV, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  result< access::object_traits_impl< ::DBConfigKV, id_mysql >::object_type >
  access::object_traits_impl< ::DBConfigKV, id_mysql >::
  query (database& db, const odb::query_base& q)
  {
    return query (db, query_base_type (q));
  }

  unsigned long long access::object_traits_impl< ::DBConfigKV, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  unsigned long long access::object_traits_impl< ::DBConfigKV, id_mysql >::
  erase_query (database& db, const odb::query_base& q)
  {
    return erase_query (db, query_base_type (q));
  }

  static const
  access::object_traits_impl< ::DBConfigKV, id_common >::
  function_table_type function_table_DBConfigKV_ =
  {
    &access::object_traits_impl< ::DBConfigKV, id_mysql >::persist,
    &access::object_traits_impl< ::DBConfigKV, id_mysql >::find,
    &access::object_traits_impl< ::DBConfigKV, id_mysql >::find,
    &access::object_traits_impl< ::DBConfigKV, id_mysql >::reload,
    &access::object_traits_impl< ::DBConfigKV, id_mysql >::update,
    &access::object_traits_impl< ::DBConfigKV, id_mysql >::erase,
    &access::object_traits_impl< ::DBConfigKV, id_mysql >::erase,
    &access::object_traits_impl< ::DBConfigKV, id_mysql >::query,
    &access::object_traits_impl< ::DBConfigKV, id_mysql >::erase_query
  };

  static const object_function_table_entry< ::DBConfigKV, id_mysql >
  function_table_entry_DBConfigKV_ (
    &function_table_DBConfigKV_);

  // DBConfig
  //

  template struct query_columns<
    ::DBConfig,
    id_mysql,
    access::object_traits_impl< ::DBConfig, id_mysql > >;

  struct access::object_traits_impl< ::DBConfig, id_mysql >::extra_statement_cache_type
  {
    mysql::container_statements_impl< entries_traits > entries;

    extra_statement_cache_type (
      mysql::connection& c,
      image_type&,
      id_image_type&,
      mysql::binding& id,
      mysql::binding&)
    : entries (c, id)
    {
    }
  };

  // entries
  //

  const char access::object_traits_impl< ::DBConfig, id_mysql >::entries_traits::
  select_statement[] =
  "SELECT "
  "`DBConfigKV`.`id` "
  "FROM `DBConfigKV` "
  "WHERE `DBConfigKV`.`cfg`=?";

  const char access::object_traits_impl< ::DBConfig, id_mysql >::entries_traits::
  insert_statement[] =
  "";

  const char access::object_traits_impl< ::DBConfig, id_mysql >::entries_traits::
  delete_statement[] =
  "";

  void access::object_traits_impl< ::DBConfig, id_mysql >::entries_traits::
  bind (MYSQL_BIND* b,
        const MYSQL_BIND* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace mysql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // value
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &d.value_value;
    b[n].is_null = &d.value_null;
  }

  void access::object_traits_impl< ::DBConfig, id_mysql >::entries_traits::
  grow (data_image_type& i,
        my_bool* t)
  {
    bool grew (false);

    // value
    //
    t[0UL] = 0;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::DBConfig, id_mysql >::entries_traits::
  init (value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // value
    //
    {
      typedef object_traits< ::DBConfigKV > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      if (i.value_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_value (
          id,
          i.value_value,
          i.value_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mysql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::DBConfig, id_mysql >::entries_traits::
  insert (index_type, const value_type&, void*)
  {
  }

  bool access::object_traits_impl< ::DBConfig, id_mysql >::entries_traits::
  select (index_type&, value_type& v, void* d)
  {
    using namespace mysql;
    using mysql::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (v, di, &sts.connection ().database ());

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());
    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::DBConfig, id_mysql >::entries_traits::
  delete_ (void*)
  {
  }

  void access::object_traits_impl< ::DBConfig, id_mysql >::entries_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace mysql;
    using mysql::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    st.cache ();
    select_statement::result r (st.fetch ());
    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = false;
    container_traits_type::load (c, more, fs);
  }

  access::object_traits_impl< ::DBConfig, id_mysql >::id_type
  access::object_traits_impl< ::DBConfig, id_mysql >::
  id (const id_image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::DBConfig, id_mysql >::id_type
  access::object_traits_impl< ::DBConfig, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::DBConfig, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // name
    //
    if (t[0UL])
    {
      i.name_value.capacity (i.name_size);
      grew = true;
    }

    // time_limit
    //
    t[1UL] = 0;

    // id_
    //
    t[2UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::DBConfig, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // name
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.name_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.name_value.capacity ());
    b[n].length = &i.name_size;
    b[n].is_null = &i.name_null;
    n++;

    // time_limit
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.time_limit_value;
    b[n].is_null = &i.time_limit_null;
    n++;

    // id_
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_LONGLONG;
      b[n].is_unsigned = 1;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }
  }

  void access::object_traits_impl< ::DBConfig, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::DBConfig, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // name
    //
    {
      ::std::string const& v =
        o.name;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.name_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.name_value,
        size,
        is_null,
        v);
      i.name_null = is_null;
      i.name_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.name_value.capacity ());
    }

    // time_limit
    //
    {
      ::std::shared_ptr< unsigned int > const& v =
        o.time_limit;

      bool is_null (true);
      mysql::value_traits<
          ::std::shared_ptr< unsigned int >,
          mysql::id_ulong >::set_image (
        i.time_limit_value, is_null, v);
      i.time_limit_null = is_null;
    }

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, v);
      i.id_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::DBConfig, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // name
    //
    {
      ::std::string& v =
        o.name;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.name_value,
        i.name_size,
        i.name_null);
    }

    // time_limit
    //
    {
      ::std::shared_ptr< unsigned int >& v =
        o.time_limit;

      mysql::value_traits<
          ::std::shared_ptr< unsigned int >,
          mysql::id_ulong >::set_value (
        v,
        i.time_limit_value,
        i.time_limit_null);
    }

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.id_value,
        i.id_null);
    }
  }

  void access::object_traits_impl< ::DBConfig, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::DBConfig, id_mysql >::persist_statement[] =
  "INSERT INTO `DBConfig` "
  "(`name`, "
  "`time_limit`, "
  "`id`) "
  "VALUES "
  "(?, ?, ?)";

  const char access::object_traits_impl< ::DBConfig, id_mysql >::find_statement[] =
  "SELECT "
  "`DBConfig`.`name`, "
  "`DBConfig`.`time_limit`, "
  "`DBConfig`.`id` "
  "FROM `DBConfig` "
  "WHERE `DBConfig`.`id`=?";

  const char access::object_traits_impl< ::DBConfig, id_mysql >::update_statement[] =
  "UPDATE `DBConfig` "
  "SET "
  "`name`=?, "
  "`time_limit`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::DBConfig, id_mysql >::erase_statement[] =
  "DELETE FROM `DBConfig` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::DBConfig, id_mysql >::query_statement[] =
  "SELECT "
  "`DBConfig`.`name`, "
  "`DBConfig`.`time_limit`, "
  "`DBConfig`.`id` "
  "FROM `DBConfig`";

  const char access::object_traits_impl< ::DBConfig, id_mysql >::erase_query_statement[] =
  "DELETE FROM `DBConfig`";

  const char access::object_traits_impl< ::DBConfig, id_mysql >::table_name[] =
  "`DBConfig`";

  void access::object_traits_impl< ::DBConfig, id_mysql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_value = 0;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBConfig, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBConfig, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBConfig, id_mysql >::pointer_type
  access::object_traits_impl< ::DBConfig, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBConfig, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBConfig, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBConfig, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::DBConfig, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // entries
    //
    {
      ::std::vector< ::std::shared_ptr< ::DBConfigKV > >& v =
        obj.entries;

      entries_traits::load (
        v,
        esc.entries);
    }
  }

  result< access::object_traits_impl< ::DBConfig, id_mysql >::object_type >
  access::object_traits_impl< ::DBConfig, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  result< access::object_traits_impl< ::DBConfig, id_mysql >::object_type >
  access::object_traits_impl< ::DBConfig, id_mysql >::
  query (database& db, const odb::query_base& q)
  {
    return query (db, query_base_type (q));
  }

  unsigned long long access::object_traits_impl< ::DBConfig, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  unsigned long long access::object_traits_impl< ::DBConfig, id_mysql >::
  erase_query (database& db, const odb::query_base& q)
  {
    return erase_query (db, query_base_type (q));
  }

  static const
  access::object_traits_impl< ::DBConfig, id_common >::
  function_table_type function_table_DBConfig_ =
  {
    &access::object_traits_impl< ::DBConfig, id_mysql >::persist,
    &access::object_traits_impl< ::DBConfig, id_mysql >::find,
    &access::object_traits_impl< ::DBConfig, id_mysql >::find,
    &access::object_traits_impl< ::DBConfig, id_mysql >::reload,
    &access::object_traits_impl< ::DBConfig, id_mysql >::update,
    &access::object_traits_impl< ::DBConfig, id_mysql >::erase,
    &access::object_traits_impl< ::DBConfig, id_mysql >::erase,
    &access::object_traits_impl< ::DBConfig, id_mysql >::query,
    &access::object_traits_impl< ::DBConfig, id_mysql >::erase_query
  };

  static const object_function_table_entry< ::DBConfig, id_mysql >
  function_table_entry_DBConfig_ (
    &function_table_DBConfig_);

  // DBInvocation
  //

  template struct query_columns<
    ::DBInvocation,
    id_mysql,
    access::object_traits_impl< ::DBInvocation, id_mysql > >;

  struct access::object_traits_impl< ::DBInvocation, id_mysql >::extra_statement_cache_type
  {
    mysql::container_statements_impl< results_traits > results;

    extra_statement_cache_type (
      mysql::connection& c,
      image_type&,
      id_image_type&,
      mysql::binding& id,
      mysql::binding&)
    : results (c, id)
    {
    }
  };

  // results
  //

  const char access::object_traits_impl< ::DBInvocation, id_mysql >::results_traits::
  select_statement[] =
  "SELECT "
  "`DBResult`.`id` "
  "FROM `DBResult` "
  "WHERE `DBResult`.`invocation`=?";

  const char access::object_traits_impl< ::DBInvocation, id_mysql >::results_traits::
  insert_statement[] =
  "";

  const char access::object_traits_impl< ::DBInvocation, id_mysql >::results_traits::
  delete_statement[] =
  "";

  void access::object_traits_impl< ::DBInvocation, id_mysql >::results_traits::
  bind (MYSQL_BIND* b,
        const MYSQL_BIND* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace mysql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // value
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &d.value_value;
    b[n].is_null = &d.value_null;
  }

  void access::object_traits_impl< ::DBInvocation, id_mysql >::results_traits::
  grow (data_image_type& i,
        my_bool* t)
  {
    bool grew (false);

    // value
    //
    t[0UL] = 0;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::DBInvocation, id_mysql >::results_traits::
  init (value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // value
    //
    {
      typedef object_traits< ::DBResult > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      if (i.value_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_value (
          id,
          i.value_value,
          i.value_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mysql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::DBInvocation, id_mysql >::results_traits::
  insert (index_type, const value_type&, void*)
  {
  }

  bool access::object_traits_impl< ::DBInvocation, id_mysql >::results_traits::
  select (index_type&, value_type& v, void* d)
  {
    using namespace mysql;
    using mysql::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (v, di, &sts.connection ().database ());

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());
    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::DBInvocation, id_mysql >::results_traits::
  delete_ (void*)
  {
  }

  void access::object_traits_impl< ::DBInvocation, id_mysql >::results_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace mysql;
    using mysql::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    st.cache ();
    select_statement::result r (st.fetch ());
    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = false;
    container_traits_type::load (c, more, fs);
  }

  access::object_traits_impl< ::DBInvocation, id_mysql >::id_type
  access::object_traits_impl< ::DBInvocation, id_mysql >::
  id (const id_image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::DBInvocation, id_mysql >::id_type
  access::object_traits_impl< ::DBInvocation, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::DBInvocation, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // cmdline
    //
    if (t[0UL])
    {
      i.cmdline_value.capacity (i.cmdline_size);
      grew = true;
    }

    // git_revision
    //
    if (t[1UL])
    {
      i.git_revision_value.capacity (i.git_revision_size);
      grew = true;
    }

    // hostname
    //
    if (t[2UL])
    {
      i.hostname_value.capacity (i.hostname_size);
      grew = true;
    }

    // time
    //
    t[3UL] = 0;

    // id_
    //
    t[4UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::DBInvocation, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // cmdline
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.cmdline_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.cmdline_value.capacity ());
    b[n].length = &i.cmdline_size;
    b[n].is_null = &i.cmdline_null;
    n++;

    // git_revision
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.git_revision_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.git_revision_value.capacity ());
    b[n].length = &i.git_revision_size;
    b[n].is_null = &i.git_revision_null;
    n++;

    // hostname
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.hostname_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.hostname_value.capacity ());
    b[n].length = &i.hostname_size;
    b[n].is_null = &i.hostname_null;
    n++;

    // time
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.time_value;
    b[n].is_null = &i.time_null;
    n++;

    // id_
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_LONGLONG;
      b[n].is_unsigned = 1;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }
  }

  void access::object_traits_impl< ::DBInvocation, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::DBInvocation, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // cmdline
    //
    {
      ::std::string const& v =
        o.cmdline;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.cmdline_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.cmdline_value,
        size,
        is_null,
        v);
      i.cmdline_null = is_null;
      i.cmdline_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.cmdline_value.capacity ());
    }

    // git_revision
    //
    {
      ::std::string const& v =
        o.git_revision;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.git_revision_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.git_revision_value,
        size,
        is_null,
        v);
      i.git_revision_null = is_null;
      i.git_revision_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.git_revision_value.capacity ());
    }

    // hostname
    //
    {
      ::std::string const& v =
        o.hostname;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.hostname_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.hostname_value,
        size,
        is_null,
        v);
      i.hostname_null = is_null;
      i.hostname_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.hostname_value.capacity ());
    }

    // time
    //
    {
      long unsigned int const& v =
        o.time;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.time_value, is_null, v);
      i.time_null = is_null;
    }

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, v);
      i.id_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::DBInvocation, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // cmdline
    //
    {
      ::std::string& v =
        o.cmdline;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.cmdline_value,
        i.cmdline_size,
        i.cmdline_null);
    }

    // git_revision
    //
    {
      ::std::string& v =
        o.git_revision;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.git_revision_value,
        i.git_revision_size,
        i.git_revision_null);
    }

    // hostname
    //
    {
      ::std::string& v =
        o.hostname;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.hostname_value,
        i.hostname_size,
        i.hostname_null);
    }

    // time
    //
    {
      long unsigned int& v =
        o.time;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.time_value,
        i.time_null);
    }

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.id_value,
        i.id_null);
    }
  }

  void access::object_traits_impl< ::DBInvocation, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::DBInvocation, id_mysql >::persist_statement[] =
  "INSERT INTO `DBInvocation` "
  "(`cmdline`, "
  "`git_revision`, "
  "`hostname`, "
  "`time`, "
  "`id`) "
  "VALUES "
  "(?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::DBInvocation, id_mysql >::find_statement[] =
  "SELECT "
  "`DBInvocation`.`cmdline`, "
  "`DBInvocation`.`git_revision`, "
  "`DBInvocation`.`hostname`, "
  "`DBInvocation`.`time`, "
  "`DBInvocation`.`id` "
  "FROM `DBInvocation` "
  "WHERE `DBInvocation`.`id`=?";

  const char access::object_traits_impl< ::DBInvocation, id_mysql >::update_statement[] =
  "UPDATE `DBInvocation` "
  "SET "
  "`cmdline`=?, "
  "`git_revision`=?, "
  "`hostname`=?, "
  "`time`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::DBInvocation, id_mysql >::erase_statement[] =
  "DELETE FROM `DBInvocation` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::DBInvocation, id_mysql >::query_statement[] =
  "SELECT "
  "`DBInvocation`.`cmdline`, "
  "`DBInvocation`.`git_revision`, "
  "`DBInvocation`.`hostname`, "
  "`DBInvocation`.`time`, "
  "`DBInvocation`.`id` "
  "FROM `DBInvocation`";

  const char access::object_traits_impl< ::DBInvocation, id_mysql >::erase_query_statement[] =
  "DELETE FROM `DBInvocation`";

  const char access::object_traits_impl< ::DBInvocation, id_mysql >::table_name[] =
  "`DBInvocation`";

  void access::object_traits_impl< ::DBInvocation, id_mysql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_value = 0;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBInvocation, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBInvocation, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBInvocation, id_mysql >::pointer_type
  access::object_traits_impl< ::DBInvocation, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBInvocation, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBInvocation, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBInvocation, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::DBInvocation, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // results
    //
    {
      ::std::vector< ::std::shared_ptr< ::DBResult > >& v =
        obj.results;

      results_traits::load (
        v,
        esc.results);
    }
  }

  result< access::object_traits_impl< ::DBInvocation, id_mysql >::object_type >
  access::object_traits_impl< ::DBInvocation, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  result< access::object_traits_impl< ::DBInvocation, id_mysql >::object_type >
  access::object_traits_impl< ::DBInvocation, id_mysql >::
  query (database& db, const odb::query_base& q)
  {
    return query (db, query_base_type (q));
  }

  unsigned long long access::object_traits_impl< ::DBInvocation, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  unsigned long long access::object_traits_impl< ::DBInvocation, id_mysql >::
  erase_query (database& db, const odb::query_base& q)
  {
    return erase_query (db, query_base_type (q));
  }

  static const
  access::object_traits_impl< ::DBInvocation, id_common >::
  function_table_type function_table_DBInvocation_ =
  {
    &access::object_traits_impl< ::DBInvocation, id_mysql >::persist,
    &access::object_traits_impl< ::DBInvocation, id_mysql >::find,
    &access::object_traits_impl< ::DBInvocation, id_mysql >::find,
    &access::object_traits_impl< ::DBInvocation, id_mysql >::reload,
    &access::object_traits_impl< ::DBInvocation, id_mysql >::update,
    &access::object_traits_impl< ::DBInvocation, id_mysql >::erase,
    &access::object_traits_impl< ::DBInvocation, id_mysql >::erase,
    &access::object_traits_impl< ::DBInvocation, id_mysql >::query,
    &access::object_traits_impl< ::DBInvocation, id_mysql >::erase_query
  };

  static const object_function_table_entry< ::DBInvocation, id_mysql >
  function_table_entry_DBInvocation_ (
    &function_table_DBInvocation_);

  // DBResult
  //

  const char alias_traits<  ::DBInvocation,
    id_mysql,
    access::object_traits_impl< ::DBResult, id_mysql >::invocation_tag>::
  table_name[] = "`invocation`";

  const char alias_traits<  ::DBConfig,
    id_mysql,
    access::object_traits_impl< ::DBResult, id_mysql >::cfg_tag>::
  table_name[] = "`cfg`";

  template struct query_columns<
    ::DBInvocation,
    id_mysql,
    query_columns_base< ::DBResult, id_mysql >::invocation_alias_ >;

  template struct query_columns<
    ::DBConfig,
    id_mysql,
    query_columns_base< ::DBResult, id_mysql >::cfg_alias_ >;

  template struct query_columns<
    ::DBResult,
    id_mysql,
    access::object_traits_impl< ::DBResult, id_mysql > >;

  template struct pointer_query_columns<
    ::DBResult,
    id_mysql,
    access::object_traits_impl< ::DBResult, id_mysql > >;

  struct access::object_traits_impl< ::DBResult, id_mysql >::extra_statement_cache_type
  {
    mysql::container_statements_impl< resource_infos_traits > resource_infos;
    mysql::container_statements_impl< papi_measurements_traits > papi_measurements;
    mysql::container_statements_impl< solutions_traits > solutions;
    mysql::container_statements_impl< intermediates_traits > intermediates;
    mysql::container_statements_impl< extended_measures_traits > extended_measures;

    extra_statement_cache_type (
      mysql::connection& c,
      image_type&,
      id_image_type&,
      mysql::binding& id,
      mysql::binding&)
    : resource_infos (c, id),
      papi_measurements (c, id),
      solutions (c, id),
      intermediates (c, id),
      extended_measures (c, id)
    {
    }
  };

  // resource_infos
  //

  const char access::object_traits_impl< ::DBResult, id_mysql >::resource_infos_traits::
  select_statement[] =
  "SELECT "
  "`DBResourcesInfo`.`id` "
  "FROM `DBResourcesInfo` "
  "WHERE `DBResourcesInfo`.`res`=?";

  const char access::object_traits_impl< ::DBResult, id_mysql >::resource_infos_traits::
  insert_statement[] =
  "";

  const char access::object_traits_impl< ::DBResult, id_mysql >::resource_infos_traits::
  delete_statement[] =
  "";

  void access::object_traits_impl< ::DBResult, id_mysql >::resource_infos_traits::
  bind (MYSQL_BIND* b,
        const MYSQL_BIND* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace mysql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // value
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &d.value_value;
    b[n].is_null = &d.value_null;
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::resource_infos_traits::
  grow (data_image_type& i,
        my_bool* t)
  {
    bool grew (false);

    // value
    //
    t[0UL] = 0;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::resource_infos_traits::
  init (value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // value
    //
    {
      typedef object_traits< ::DBResourcesInfo > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      if (i.value_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_value (
          id,
          i.value_value,
          i.value_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mysql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::resource_infos_traits::
  insert (index_type, const value_type&, void*)
  {
  }

  bool access::object_traits_impl< ::DBResult, id_mysql >::resource_infos_traits::
  select (index_type&, value_type& v, void* d)
  {
    using namespace mysql;
    using mysql::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (v, di, &sts.connection ().database ());

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());
    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::resource_infos_traits::
  delete_ (void*)
  {
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::resource_infos_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace mysql;
    using mysql::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    st.cache ();
    select_statement::result r (st.fetch ());
    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = false;
    container_traits_type::load (c, more, fs);
  }

  // papi_measurements
  //

  const char access::object_traits_impl< ::DBResult, id_mysql >::papi_measurements_traits::
  select_statement[] =
  "SELECT "
  "`DBPapiMeasurement`.`id` "
  "FROM `DBPapiMeasurement` "
  "WHERE `DBPapiMeasurement`.`res`=?";

  const char access::object_traits_impl< ::DBResult, id_mysql >::papi_measurements_traits::
  insert_statement[] =
  "";

  const char access::object_traits_impl< ::DBResult, id_mysql >::papi_measurements_traits::
  delete_statement[] =
  "";

  void access::object_traits_impl< ::DBResult, id_mysql >::papi_measurements_traits::
  bind (MYSQL_BIND* b,
        const MYSQL_BIND* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace mysql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // value
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &d.value_value;
    b[n].is_null = &d.value_null;
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::papi_measurements_traits::
  grow (data_image_type& i,
        my_bool* t)
  {
    bool grew (false);

    // value
    //
    t[0UL] = 0;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::papi_measurements_traits::
  init (value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // value
    //
    {
      typedef object_traits< ::DBPapiMeasurement > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      if (i.value_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_value (
          id,
          i.value_value,
          i.value_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mysql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::papi_measurements_traits::
  insert (index_type, const value_type&, void*)
  {
  }

  bool access::object_traits_impl< ::DBResult, id_mysql >::papi_measurements_traits::
  select (index_type&, value_type& v, void* d)
  {
    using namespace mysql;
    using mysql::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (v, di, &sts.connection ().database ());

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());
    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::papi_measurements_traits::
  delete_ (void*)
  {
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::papi_measurements_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace mysql;
    using mysql::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    st.cache ();
    select_statement::result r (st.fetch ());
    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = false;
    container_traits_type::load (c, more, fs);
  }

  // solutions
  //

  const char access::object_traits_impl< ::DBResult, id_mysql >::solutions_traits::
  select_statement[] =
  "SELECT "
  "`DBSolution`.`id` "
  "FROM `DBSolution` "
  "WHERE `DBSolution`.`res`=?";

  const char access::object_traits_impl< ::DBResult, id_mysql >::solutions_traits::
  insert_statement[] =
  "";

  const char access::object_traits_impl< ::DBResult, id_mysql >::solutions_traits::
  delete_statement[] =
  "";

  void access::object_traits_impl< ::DBResult, id_mysql >::solutions_traits::
  bind (MYSQL_BIND* b,
        const MYSQL_BIND* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace mysql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // value
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &d.value_value;
    b[n].is_null = &d.value_null;
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::solutions_traits::
  grow (data_image_type& i,
        my_bool* t)
  {
    bool grew (false);

    // value
    //
    t[0UL] = 0;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::solutions_traits::
  init (value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // value
    //
    {
      typedef object_traits< ::DBSolution > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      if (i.value_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_value (
          id,
          i.value_value,
          i.value_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mysql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::solutions_traits::
  insert (index_type, const value_type&, void*)
  {
  }

  bool access::object_traits_impl< ::DBResult, id_mysql >::solutions_traits::
  select (index_type&, value_type& v, void* d)
  {
    using namespace mysql;
    using mysql::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (v, di, &sts.connection ().database ());

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());
    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::solutions_traits::
  delete_ (void*)
  {
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::solutions_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace mysql;
    using mysql::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    st.cache ();
    select_statement::result r (st.fetch ());
    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = false;
    container_traits_type::load (c, more, fs);
  }

  // intermediates
  //

  const char access::object_traits_impl< ::DBResult, id_mysql >::intermediates_traits::
  select_statement[] =
  "SELECT "
  "`DBIntermediate`.`id` "
  "FROM `DBIntermediate` "
  "WHERE `DBIntermediate`.`res`=?";

  const char access::object_traits_impl< ::DBResult, id_mysql >::intermediates_traits::
  insert_statement[] =
  "";

  const char access::object_traits_impl< ::DBResult, id_mysql >::intermediates_traits::
  delete_statement[] =
  "";

  void access::object_traits_impl< ::DBResult, id_mysql >::intermediates_traits::
  bind (MYSQL_BIND* b,
        const MYSQL_BIND* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace mysql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // value
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &d.value_value;
    b[n].is_null = &d.value_null;
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::intermediates_traits::
  grow (data_image_type& i,
        my_bool* t)
  {
    bool grew (false);

    // value
    //
    t[0UL] = 0;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::intermediates_traits::
  init (value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // value
    //
    {
      typedef object_traits< ::DBIntermediate > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      if (i.value_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_value (
          id,
          i.value_value,
          i.value_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mysql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::intermediates_traits::
  insert (index_type, const value_type&, void*)
  {
  }

  bool access::object_traits_impl< ::DBResult, id_mysql >::intermediates_traits::
  select (index_type&, value_type& v, void* d)
  {
    using namespace mysql;
    using mysql::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (v, di, &sts.connection ().database ());

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());
    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::intermediates_traits::
  delete_ (void*)
  {
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::intermediates_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace mysql;
    using mysql::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    st.cache ();
    select_statement::result r (st.fetch ());
    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = false;
    container_traits_type::load (c, more, fs);
  }

  // extended_measures
  //

  const char access::object_traits_impl< ::DBResult, id_mysql >::extended_measures_traits::
  select_statement[] =
  "SELECT "
  "`DBExtendedMeasure`.`id` "
  "FROM `DBExtendedMeasure` "
  "WHERE `DBExtendedMeasure`.`res`=?";

  const char access::object_traits_impl< ::DBResult, id_mysql >::extended_measures_traits::
  insert_statement[] =
  "";

  const char access::object_traits_impl< ::DBResult, id_mysql >::extended_measures_traits::
  delete_statement[] =
  "";

  void access::object_traits_impl< ::DBResult, id_mysql >::extended_measures_traits::
  bind (MYSQL_BIND* b,
        const MYSQL_BIND* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace mysql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // value
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &d.value_value;
    b[n].is_null = &d.value_null;
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::extended_measures_traits::
  grow (data_image_type& i,
        my_bool* t)
  {
    bool grew (false);

    // value
    //
    t[0UL] = 0;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::extended_measures_traits::
  init (value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // value
    //
    {
      typedef object_traits< ::DBExtendedMeasure > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      if (i.value_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_value (
          id,
          i.value_value,
          i.value_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mysql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::extended_measures_traits::
  insert (index_type, const value_type&, void*)
  {
  }

  bool access::object_traits_impl< ::DBResult, id_mysql >::extended_measures_traits::
  select (index_type&, value_type& v, void* d)
  {
    using namespace mysql;
    using mysql::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (v, di, &sts.connection ().database ());

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());
    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::extended_measures_traits::
  delete_ (void*)
  {
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::extended_measures_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace mysql;
    using mysql::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    st.cache ();
    select_statement::result r (st.fetch ());
    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = false;
    container_traits_type::load (c, more, fs);
  }

  access::object_traits_impl< ::DBResult, id_mysql >::id_type
  access::object_traits_impl< ::DBResult, id_mysql >::
  id (const id_image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::DBResult, id_mysql >::id_type
  access::object_traits_impl< ::DBResult, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::DBResult, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // run
    //
    if (t[0UL])
    {
      i.run_value.capacity (i.run_size);
      grew = true;
    }

    // instance
    //
    if (t[1UL])
    {
      i.instance_value.capacity (i.instance_size);
      grew = true;
    }

    // score
    //
    t[2UL] = 0;

    // algorithm
    //
    if (t[3UL])
    {
      i.algorithm_value.capacity (i.algorithm_size);
      grew = true;
    }

    // config
    //
    if (t[4UL])
    {
      i.config_value.capacity (i.config_size);
      grew = true;
    }

    // seed
    //
    t[5UL] = 0;

    // optimal
    //
    t[6UL] = 0;

    // feasible
    //
    t[7UL] = 0;

    // lower_bound
    //
    t[8UL] = 0;

    // elapsed
    //
    t[9UL] = 0;

    // time
    //
    t[10UL] = 0;

    // invocation
    //
    t[11UL] = 0;

    // cfg
    //
    t[12UL] = 0;

    // id_
    //
    t[13UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // run
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.run_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.run_value.capacity ());
    b[n].length = &i.run_size;
    b[n].is_null = &i.run_null;
    n++;

    // instance
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.instance_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.instance_value.capacity ());
    b[n].length = &i.instance_size;
    b[n].is_null = &i.instance_null;
    n++;

    // score
    //
    b[n].buffer_type = MYSQL_TYPE_DOUBLE;
    b[n].buffer = &i.score_value;
    b[n].is_null = &i.score_null;
    n++;

    // algorithm
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.algorithm_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.algorithm_value.capacity ());
    b[n].length = &i.algorithm_size;
    b[n].is_null = &i.algorithm_null;
    n++;

    // config
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.config_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.config_value.capacity ());
    b[n].length = &i.config_size;
    b[n].is_null = &i.config_null;
    n++;

    // seed
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.seed_value;
    b[n].is_null = &i.seed_null;
    n++;

    // optimal
    //
    b[n].buffer_type = MYSQL_TYPE_TINY;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.optimal_value;
    b[n].is_null = &i.optimal_null;
    n++;

    // feasible
    //
    b[n].buffer_type = MYSQL_TYPE_TINY;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.feasible_value;
    b[n].is_null = &i.feasible_null;
    n++;

    // lower_bound
    //
    b[n].buffer_type = MYSQL_TYPE_DOUBLE;
    b[n].buffer = &i.lower_bound_value;
    b[n].is_null = &i.lower_bound_null;
    n++;

    // elapsed
    //
    b[n].buffer_type = MYSQL_TYPE_DOUBLE;
    b[n].buffer = &i.elapsed_value;
    b[n].is_null = &i.elapsed_null;
    n++;

    // time
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.time_value;
    b[n].is_null = &i.time_null;
    n++;

    // invocation
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.invocation_value;
    b[n].is_null = &i.invocation_null;
    n++;

    // cfg
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.cfg_value;
    b[n].is_null = &i.cfg_null;
    n++;

    // id_
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_LONGLONG;
      b[n].is_unsigned = 1;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::DBResult, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // run
    //
    {
      ::std::string const& v =
        o.run;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.run_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.run_value,
        size,
        is_null,
        v);
      i.run_null = is_null;
      i.run_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.run_value.capacity ());
    }

    // instance
    //
    {
      ::std::string const& v =
        o.instance;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.instance_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.instance_value,
        size,
        is_null,
        v);
      i.instance_null = is_null;
      i.instance_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.instance_value.capacity ());
    }

    // score
    //
    {
      double const& v =
        o.score;

      bool is_null (false);
      mysql::value_traits<
          double,
          mysql::id_double >::set_image (
        i.score_value, is_null, v);
      i.score_null = is_null;
    }

    // algorithm
    //
    {
      ::std::string const& v =
        o.algorithm;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.algorithm_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.algorithm_value,
        size,
        is_null,
        v);
      i.algorithm_null = is_null;
      i.algorithm_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.algorithm_value.capacity ());
    }

    // config
    //
    {
      ::std::string const& v =
        o.config;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.config_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.config_value,
        size,
        is_null,
        v);
      i.config_null = is_null;
      i.config_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.config_value.capacity ());
    }

    // seed
    //
    {
      int const& v =
        o.seed;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.seed_value, is_null, v);
      i.seed_null = is_null;
    }

    // optimal
    //
    {
      bool const& v =
        o.optimal;

      bool is_null (false);
      mysql::value_traits<
          bool,
          mysql::id_tiny >::set_image (
        i.optimal_value, is_null, v);
      i.optimal_null = is_null;
    }

    // feasible
    //
    {
      bool const& v =
        o.feasible;

      bool is_null (false);
      mysql::value_traits<
          bool,
          mysql::id_tiny >::set_image (
        i.feasible_value, is_null, v);
      i.feasible_null = is_null;
    }

    // lower_bound
    //
    {
      ::std::shared_ptr< double > const& v =
        o.lower_bound;

      bool is_null (true);
      mysql::value_traits<
          ::std::shared_ptr< double >,
          mysql::id_double >::set_image (
        i.lower_bound_value, is_null, v);
      i.lower_bound_null = is_null;
    }

    // elapsed
    //
    {
      double const& v =
        o.elapsed;

      bool is_null (false);
      mysql::value_traits<
          double,
          mysql::id_double >::set_image (
        i.elapsed_value, is_null, v);
      i.elapsed_null = is_null;
    }

    // time
    //
    {
      long unsigned int const& v =
        o.time;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.time_value, is_null, v);
      i.time_null = is_null;
    }

    // invocation
    //
    {
      ::std::shared_ptr< ::DBInvocation > const& v =
        o.invocation;

      typedef object_traits< ::DBInvocation > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBInvocation > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_image (
          i.invocation_value, is_null, id);
        i.invocation_null = is_null;
      }
      else
        i.invocation_null = 1;
    }

    // cfg
    //
    {
      ::std::shared_ptr< ::DBConfig > const& v =
        o.cfg;

      typedef object_traits< ::DBConfig > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBConfig > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_image (
          i.cfg_value, is_null, id);
        i.cfg_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, v);
      i.id_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // run
    //
    {
      ::std::string& v =
        o.run;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.run_value,
        i.run_size,
        i.run_null);
    }

    // instance
    //
    {
      ::std::string& v =
        o.instance;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.instance_value,
        i.instance_size,
        i.instance_null);
    }

    // score
    //
    {
      double& v =
        o.score;

      mysql::value_traits<
          double,
          mysql::id_double >::set_value (
        v,
        i.score_value,
        i.score_null);
    }

    // algorithm
    //
    {
      ::std::string& v =
        o.algorithm;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.algorithm_value,
        i.algorithm_size,
        i.algorithm_null);
    }

    // config
    //
    {
      ::std::string& v =
        o.config;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.config_value,
        i.config_size,
        i.config_null);
    }

    // seed
    //
    {
      int& v =
        o.seed;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.seed_value,
        i.seed_null);
    }

    // optimal
    //
    {
      bool& v =
        o.optimal;

      mysql::value_traits<
          bool,
          mysql::id_tiny >::set_value (
        v,
        i.optimal_value,
        i.optimal_null);
    }

    // feasible
    //
    {
      bool& v =
        o.feasible;

      mysql::value_traits<
          bool,
          mysql::id_tiny >::set_value (
        v,
        i.feasible_value,
        i.feasible_null);
    }

    // lower_bound
    //
    {
      ::std::shared_ptr< double >& v =
        o.lower_bound;

      mysql::value_traits<
          ::std::shared_ptr< double >,
          mysql::id_double >::set_value (
        v,
        i.lower_bound_value,
        i.lower_bound_null);
    }

    // elapsed
    //
    {
      double& v =
        o.elapsed;

      mysql::value_traits<
          double,
          mysql::id_double >::set_value (
        v,
        i.elapsed_value,
        i.elapsed_null);
    }

    // time
    //
    {
      long unsigned int& v =
        o.time;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.time_value,
        i.time_null);
    }

    // invocation
    //
    {
      ::std::shared_ptr< ::DBInvocation >& v =
        o.invocation;

      typedef object_traits< ::DBInvocation > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBInvocation > > ptr_traits;

      if (i.invocation_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_value (
          id,
          i.invocation_value,
          i.invocation_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mysql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // cfg
    //
    {
      ::std::shared_ptr< ::DBConfig >& v =
        o.cfg;

      typedef object_traits< ::DBConfig > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBConfig > > ptr_traits;

      if (i.cfg_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_value (
          id,
          i.cfg_value,
          i.cfg_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mysql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.id_value,
        i.id_null);
    }
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::DBResult, id_mysql >::persist_statement[] =
  "INSERT INTO `DBResult` "
  "(`run`, "
  "`instance`, "
  "`score`, "
  "`algorithm`, "
  "`config`, "
  "`seed`, "
  "`optimal`, "
  "`feasible`, "
  "`lower_bound`, "
  "`elapsed`, "
  "`time`, "
  "`invocation`, "
  "`cfg`, "
  "`id`) "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::DBResult, id_mysql >::find_statement[] =
  "SELECT "
  "`DBResult`.`run`, "
  "`DBResult`.`instance`, "
  "`DBResult`.`score`, "
  "`DBResult`.`algorithm`, "
  "`DBResult`.`config`, "
  "`DBResult`.`seed`, "
  "`DBResult`.`optimal`, "
  "`DBResult`.`feasible`, "
  "`DBResult`.`lower_bound`, "
  "`DBResult`.`elapsed`, "
  "`DBResult`.`time`, "
  "`DBResult`.`invocation`, "
  "`DBResult`.`cfg`, "
  "`DBResult`.`id` "
  "FROM `DBResult` "
  "WHERE `DBResult`.`id`=?";

  const char access::object_traits_impl< ::DBResult, id_mysql >::update_statement[] =
  "UPDATE `DBResult` "
  "SET "
  "`run`=?, "
  "`instance`=?, "
  "`score`=?, "
  "`algorithm`=?, "
  "`config`=?, "
  "`seed`=?, "
  "`optimal`=?, "
  "`feasible`=?, "
  "`lower_bound`=?, "
  "`elapsed`=?, "
  "`time`=?, "
  "`invocation`=?, "
  "`cfg`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::DBResult, id_mysql >::erase_statement[] =
  "DELETE FROM `DBResult` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::DBResult, id_mysql >::query_statement[] =
  "SELECT\n"
  "`DBResult`.`run`,\n"
  "`DBResult`.`instance`,\n"
  "`DBResult`.`score`,\n"
  "`DBResult`.`algorithm`,\n"
  "`DBResult`.`config`,\n"
  "`DBResult`.`seed`,\n"
  "`DBResult`.`optimal`,\n"
  "`DBResult`.`feasible`,\n"
  "`DBResult`.`lower_bound`,\n"
  "`DBResult`.`elapsed`,\n"
  "`DBResult`.`time`,\n"
  "`DBResult`.`invocation`,\n"
  "`DBResult`.`cfg`,\n"
  "`DBResult`.`id`\n"
  "FROM `DBResult`\n"
  "LEFT JOIN `DBInvocation` AS `invocation` ON `invocation`.`id`=`DBResult`.`invocation`\n"
  "LEFT JOIN `DBConfig` AS `cfg` ON `cfg`.`id`=`DBResult`.`cfg`";

  const char access::object_traits_impl< ::DBResult, id_mysql >::erase_query_statement[] =
  "DELETE FROM `DBResult`";

  const char access::object_traits_impl< ::DBResult, id_mysql >::table_name[] =
  "`DBResult`";

  void access::object_traits_impl< ::DBResult, id_mysql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_value = 0;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBResult, id_mysql >::pointer_type
  access::object_traits_impl< ::DBResult, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBResult, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBResult, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBResult, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::DBResult, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // resource_infos
    //
    {
      ::std::vector< ::std::shared_ptr< ::DBResourcesInfo > >& v =
        obj.resource_infos;

      resource_infos_traits::load (
        v,
        esc.resource_infos);
    }

    // papi_measurements
    //
    {
      ::std::vector< ::std::shared_ptr< ::DBPapiMeasurement > >& v =
        obj.papi_measurements;

      papi_measurements_traits::load (
        v,
        esc.papi_measurements);
    }

    // solutions
    //
    {
      ::std::vector< ::std::shared_ptr< ::DBSolution > >& v =
        obj.solutions;

      solutions_traits::load (
        v,
        esc.solutions);
    }

    // intermediates
    //
    {
      ::std::vector< ::std::shared_ptr< ::DBIntermediate > >& v =
        obj.intermediates;

      intermediates_traits::load (
        v,
        esc.intermediates);
    }

    // extended_measures
    //
    {
      ::std::vector< ::std::shared_ptr< ::DBExtendedMeasure > >& v =
        obj.extended_measures;

      extended_measures_traits::load (
        v,
        esc.extended_measures);
    }
  }

  result< access::object_traits_impl< ::DBResult, id_mysql >::object_type >
  access::object_traits_impl< ::DBResult, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  result< access::object_traits_impl< ::DBResult, id_mysql >::object_type >
  access::object_traits_impl< ::DBResult, id_mysql >::
  query (database& db, const odb::query_base& q)
  {
    return query (db, query_base_type (q));
  }

  unsigned long long access::object_traits_impl< ::DBResult, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  unsigned long long access::object_traits_impl< ::DBResult, id_mysql >::
  erase_query (database& db, const odb::query_base& q)
  {
    return erase_query (db, query_base_type (q));
  }

  static const
  access::object_traits_impl< ::DBResult, id_common >::
  function_table_type function_table_DBResult_ =
  {
    &access::object_traits_impl< ::DBResult, id_mysql >::persist,
    &access::object_traits_impl< ::DBResult, id_mysql >::find,
    &access::object_traits_impl< ::DBResult, id_mysql >::find,
    &access::object_traits_impl< ::DBResult, id_mysql >::reload,
    &access::object_traits_impl< ::DBResult, id_mysql >::update,
    &access::object_traits_impl< ::DBResult, id_mysql >::erase,
    &access::object_traits_impl< ::DBResult, id_mysql >::erase,
    &access::object_traits_impl< ::DBResult, id_mysql >::query,
    &access::object_traits_impl< ::DBResult, id_mysql >::erase_query
  };

  static const object_function_table_entry< ::DBResult, id_mysql >
  function_table_entry_DBResult_ (
    &function_table_DBResult_);

  // DBResourcesInfo
  //

  const char alias_traits<  ::DBResult,
    id_mysql,
    access::object_traits_impl< ::DBResourcesInfo, id_mysql >::res_tag>::
  table_name[] = "`res`";

  template struct pointer_query_columns<
    ::DBResult,
    id_mysql,
    query_columns_base< ::DBResourcesInfo, id_mysql >::res_alias_ >;

  template struct query_columns<
    ::DBResourcesInfo,
    id_mysql,
    access::object_traits_impl< ::DBResourcesInfo, id_mysql > >;

  template struct pointer_query_columns<
    ::DBResourcesInfo,
    id_mysql,
    access::object_traits_impl< ::DBResourcesInfo, id_mysql > >;

  struct access::object_traits_impl< ::DBResourcesInfo, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      id_image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  access::object_traits_impl< ::DBResourcesInfo, id_mysql >::id_type
  access::object_traits_impl< ::DBResourcesInfo, id_mysql >::
  id (const id_image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::DBResourcesInfo, id_mysql >::id_type
  access::object_traits_impl< ::DBResourcesInfo, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::DBResourcesInfo, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // res
    //
    t[0UL] = 0;

    // major_pagefaults
    //
    t[1UL] = 0;

    // minor_pagefaults
    //
    t[2UL] = 0;

    // user_usecs
    //
    t[3UL] = 0;

    // system_usecs
    //
    t[4UL] = 0;

    // max_rss_size
    //
    t[5UL] = 0;

    // max_data_size
    //
    t[6UL] = 0;

    // malloc_max_size
    //
    t[7UL] = 0;

    // malloc_count
    //
    t[8UL] = 0;

    // id_
    //
    t[9UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::DBResourcesInfo, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // res
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.res_value;
    b[n].is_null = &i.res_null;
    n++;

    // major_pagefaults
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.major_pagefaults_value;
    b[n].is_null = &i.major_pagefaults_null;
    n++;

    // minor_pagefaults
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.minor_pagefaults_value;
    b[n].is_null = &i.minor_pagefaults_null;
    n++;

    // user_usecs
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.user_usecs_value;
    b[n].is_null = &i.user_usecs_null;
    n++;

    // system_usecs
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.system_usecs_value;
    b[n].is_null = &i.system_usecs_null;
    n++;

    // max_rss_size
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.max_rss_size_value;
    b[n].is_null = &i.max_rss_size_null;
    n++;

    // max_data_size
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.max_data_size_value;
    b[n].is_null = &i.max_data_size_null;
    n++;

    // malloc_max_size
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.malloc_max_size_value;
    b[n].is_null = &i.malloc_max_size_null;
    n++;

    // malloc_count
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.malloc_count_value;
    b[n].is_null = &i.malloc_count_null;
    n++;

    // id_
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_LONGLONG;
      b[n].is_unsigned = 1;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }
  }

  void access::object_traits_impl< ::DBResourcesInfo, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::DBResourcesInfo, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // res
    //
    {
      ::std::shared_ptr< ::DBResult > const& v =
        o.res;

      typedef object_traits< ::DBResult > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBResult > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_image (
          i.res_value, is_null, id);
        i.res_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // major_pagefaults
    //
    {
      ::size_t const& v =
        o.major_pagefaults;

      bool is_null (false);
      mysql::value_traits<
          ::size_t,
          mysql::id_ulonglong >::set_image (
        i.major_pagefaults_value, is_null, v);
      i.major_pagefaults_null = is_null;
    }

    // minor_pagefaults
    //
    {
      ::size_t const& v =
        o.minor_pagefaults;

      bool is_null (false);
      mysql::value_traits<
          ::size_t,
          mysql::id_ulonglong >::set_image (
        i.minor_pagefaults_value, is_null, v);
      i.minor_pagefaults_null = is_null;
    }

    // user_usecs
    //
    {
      long unsigned int const& v =
        o.user_usecs;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.user_usecs_value, is_null, v);
      i.user_usecs_null = is_null;
    }

    // system_usecs
    //
    {
      long unsigned int const& v =
        o.system_usecs;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.system_usecs_value, is_null, v);
      i.system_usecs_null = is_null;
    }

    // max_rss_size
    //
    {
      ::odb::nullable< long unsigned int > const& v =
        o.max_rss_size;

      bool is_null (true);
      mysql::value_traits<
          ::odb::nullable< long unsigned int >,
          mysql::id_ulonglong >::set_image (
        i.max_rss_size_value, is_null, v);
      i.max_rss_size_null = is_null;
    }

    // max_data_size
    //
    {
      ::odb::nullable< long unsigned int > const& v =
        o.max_data_size;

      bool is_null (true);
      mysql::value_traits<
          ::odb::nullable< long unsigned int >,
          mysql::id_ulonglong >::set_image (
        i.max_data_size_value, is_null, v);
      i.max_data_size_null = is_null;
    }

    // malloc_max_size
    //
    {
      ::odb::nullable< long unsigned int > const& v =
        o.malloc_max_size;

      bool is_null (true);
      mysql::value_traits<
          ::odb::nullable< long unsigned int >,
          mysql::id_ulonglong >::set_image (
        i.malloc_max_size_value, is_null, v);
      i.malloc_max_size_null = is_null;
    }

    // malloc_count
    //
    {
      ::odb::nullable< long unsigned int > const& v =
        o.malloc_count;

      bool is_null (true);
      mysql::value_traits<
          ::odb::nullable< long unsigned int >,
          mysql::id_ulonglong >::set_image (
        i.malloc_count_value, is_null, v);
      i.malloc_count_null = is_null;
    }

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, v);
      i.id_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::DBResourcesInfo, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // res
    //
    {
      ::std::shared_ptr< ::DBResult >& v =
        o.res;

      typedef object_traits< ::DBResult > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBResult > > ptr_traits;

      if (i.res_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_value (
          id,
          i.res_value,
          i.res_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mysql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // major_pagefaults
    //
    {
      ::size_t& v =
        o.major_pagefaults;

      mysql::value_traits<
          ::size_t,
          mysql::id_ulonglong >::set_value (
        v,
        i.major_pagefaults_value,
        i.major_pagefaults_null);
    }

    // minor_pagefaults
    //
    {
      ::size_t& v =
        o.minor_pagefaults;

      mysql::value_traits<
          ::size_t,
          mysql::id_ulonglong >::set_value (
        v,
        i.minor_pagefaults_value,
        i.minor_pagefaults_null);
    }

    // user_usecs
    //
    {
      long unsigned int& v =
        o.user_usecs;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.user_usecs_value,
        i.user_usecs_null);
    }

    // system_usecs
    //
    {
      long unsigned int& v =
        o.system_usecs;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.system_usecs_value,
        i.system_usecs_null);
    }

    // max_rss_size
    //
    {
      ::odb::nullable< long unsigned int >& v =
        o.max_rss_size;

      mysql::value_traits<
          ::odb::nullable< long unsigned int >,
          mysql::id_ulonglong >::set_value (
        v,
        i.max_rss_size_value,
        i.max_rss_size_null);
    }

    // max_data_size
    //
    {
      ::odb::nullable< long unsigned int >& v =
        o.max_data_size;

      mysql::value_traits<
          ::odb::nullable< long unsigned int >,
          mysql::id_ulonglong >::set_value (
        v,
        i.max_data_size_value,
        i.max_data_size_null);
    }

    // malloc_max_size
    //
    {
      ::odb::nullable< long unsigned int >& v =
        o.malloc_max_size;

      mysql::value_traits<
          ::odb::nullable< long unsigned int >,
          mysql::id_ulonglong >::set_value (
        v,
        i.malloc_max_size_value,
        i.malloc_max_size_null);
    }

    // malloc_count
    //
    {
      ::odb::nullable< long unsigned int >& v =
        o.malloc_count;

      mysql::value_traits<
          ::odb::nullable< long unsigned int >,
          mysql::id_ulonglong >::set_value (
        v,
        i.malloc_count_value,
        i.malloc_count_null);
    }

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.id_value,
        i.id_null);
    }
  }

  void access::object_traits_impl< ::DBResourcesInfo, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::DBResourcesInfo, id_mysql >::persist_statement[] =
  "INSERT INTO `DBResourcesInfo` "
  "(`res`, "
  "`major_pagefaults`, "
  "`minor_pagefaults`, "
  "`user_usecs`, "
  "`system_usecs`, "
  "`max_rss_size`, "
  "`max_data_size`, "
  "`malloc_max_size`, "
  "`malloc_count`, "
  "`id`) "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::DBResourcesInfo, id_mysql >::find_statement[] =
  "SELECT "
  "`DBResourcesInfo`.`res`, "
  "`DBResourcesInfo`.`major_pagefaults`, "
  "`DBResourcesInfo`.`minor_pagefaults`, "
  "`DBResourcesInfo`.`user_usecs`, "
  "`DBResourcesInfo`.`system_usecs`, "
  "`DBResourcesInfo`.`max_rss_size`, "
  "`DBResourcesInfo`.`max_data_size`, "
  "`DBResourcesInfo`.`malloc_max_size`, "
  "`DBResourcesInfo`.`malloc_count`, "
  "`DBResourcesInfo`.`id` "
  "FROM `DBResourcesInfo` "
  "WHERE `DBResourcesInfo`.`id`=?";

  const char access::object_traits_impl< ::DBResourcesInfo, id_mysql >::update_statement[] =
  "UPDATE `DBResourcesInfo` "
  "SET "
  "`res`=?, "
  "`major_pagefaults`=?, "
  "`minor_pagefaults`=?, "
  "`user_usecs`=?, "
  "`system_usecs`=?, "
  "`max_rss_size`=?, "
  "`max_data_size`=?, "
  "`malloc_max_size`=?, "
  "`malloc_count`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::DBResourcesInfo, id_mysql >::erase_statement[] =
  "DELETE FROM `DBResourcesInfo` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::DBResourcesInfo, id_mysql >::query_statement[] =
  "SELECT\n"
  "`DBResourcesInfo`.`res`,\n"
  "`DBResourcesInfo`.`major_pagefaults`,\n"
  "`DBResourcesInfo`.`minor_pagefaults`,\n"
  "`DBResourcesInfo`.`user_usecs`,\n"
  "`DBResourcesInfo`.`system_usecs`,\n"
  "`DBResourcesInfo`.`max_rss_size`,\n"
  "`DBResourcesInfo`.`max_data_size`,\n"
  "`DBResourcesInfo`.`malloc_max_size`,\n"
  "`DBResourcesInfo`.`malloc_count`,\n"
  "`DBResourcesInfo`.`id`\n"
  "FROM `DBResourcesInfo`\n"
  "LEFT JOIN `DBResult` AS `res` ON `res`.`id`=`DBResourcesInfo`.`res`";

  const char access::object_traits_impl< ::DBResourcesInfo, id_mysql >::erase_query_statement[] =
  "DELETE FROM `DBResourcesInfo`";

  const char access::object_traits_impl< ::DBResourcesInfo, id_mysql >::table_name[] =
  "`DBResourcesInfo`";

  void access::object_traits_impl< ::DBResourcesInfo, id_mysql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_value = 0;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBResourcesInfo, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBResourcesInfo, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBResourcesInfo, id_mysql >::pointer_type
  access::object_traits_impl< ::DBResourcesInfo, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBResourcesInfo, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBResourcesInfo, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBResourcesInfo, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::DBResourcesInfo, id_mysql >::object_type >
  access::object_traits_impl< ::DBResourcesInfo, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  result< access::object_traits_impl< ::DBResourcesInfo, id_mysql >::object_type >
  access::object_traits_impl< ::DBResourcesInfo, id_mysql >::
  query (database& db, const odb::query_base& q)
  {
    return query (db, query_base_type (q));
  }

  unsigned long long access::object_traits_impl< ::DBResourcesInfo, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  unsigned long long access::object_traits_impl< ::DBResourcesInfo, id_mysql >::
  erase_query (database& db, const odb::query_base& q)
  {
    return erase_query (db, query_base_type (q));
  }

  static const
  access::object_traits_impl< ::DBResourcesInfo, id_common >::
  function_table_type function_table_DBResourcesInfo_ =
  {
    &access::object_traits_impl< ::DBResourcesInfo, id_mysql >::persist,
    &access::object_traits_impl< ::DBResourcesInfo, id_mysql >::find,
    &access::object_traits_impl< ::DBResourcesInfo, id_mysql >::find,
    &access::object_traits_impl< ::DBResourcesInfo, id_mysql >::reload,
    &access::object_traits_impl< ::DBResourcesInfo, id_mysql >::update,
    &access::object_traits_impl< ::DBResourcesInfo, id_mysql >::erase,
    &access::object_traits_impl< ::DBResourcesInfo, id_mysql >::erase,
    &access::object_traits_impl< ::DBResourcesInfo, id_mysql >::query,
    &access::object_traits_impl< ::DBResourcesInfo, id_mysql >::erase_query
  };

  static const object_function_table_entry< ::DBResourcesInfo, id_mysql >
  function_table_entry_DBResourcesInfo_ (
    &function_table_DBResourcesInfo_);

  // DBPapiMeasurement
  //

  const char alias_traits<  ::DBResult,
    id_mysql,
    access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::res_tag>::
  table_name[] = "`res`";

  template struct pointer_query_columns<
    ::DBResult,
    id_mysql,
    query_columns_base< ::DBPapiMeasurement, id_mysql >::res_alias_ >;

  template struct query_columns<
    ::DBPapiMeasurement,
    id_mysql,
    access::object_traits_impl< ::DBPapiMeasurement, id_mysql > >;

  template struct pointer_query_columns<
    ::DBPapiMeasurement,
    id_mysql,
    access::object_traits_impl< ::DBPapiMeasurement, id_mysql > >;

  struct access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      id_image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::id_type
  access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::
  id (const id_image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::id_type
  access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // res
    //
    t[0UL] = 0;

    // event_type
    //
    if (t[1UL])
    {
      i.event_type_value.capacity (i.event_type_size);
      grew = true;
    }

    // event_count
    //
    t[2UL] = 0;

    // id_
    //
    t[3UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // res
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.res_value;
    b[n].is_null = &i.res_null;
    n++;

    // event_type
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.event_type_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.event_type_value.capacity ());
    b[n].length = &i.event_type_size;
    b[n].is_null = &i.event_type_null;
    n++;

    // event_count
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.event_count_value;
    b[n].is_null = &i.event_count_null;
    n++;

    // id_
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_LONGLONG;
      b[n].is_unsigned = 1;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }
  }

  void access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // res
    //
    {
      ::std::shared_ptr< ::DBResult > const& v =
        o.res;

      typedef object_traits< ::DBResult > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBResult > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_image (
          i.res_value, is_null, id);
        i.res_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // event_type
    //
    {
      ::std::string const& v =
        o.event_type;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.event_type_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.event_type_value,
        size,
        is_null,
        v);
      i.event_type_null = is_null;
      i.event_type_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.event_type_value.capacity ());
    }

    // event_count
    //
    {
      long long int const& v =
        o.event_count;

      bool is_null (false);
      mysql::value_traits<
          long long int,
          mysql::id_longlong >::set_image (
        i.event_count_value, is_null, v);
      i.event_count_null = is_null;
    }

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, v);
      i.id_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // res
    //
    {
      ::std::shared_ptr< ::DBResult >& v =
        o.res;

      typedef object_traits< ::DBResult > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBResult > > ptr_traits;

      if (i.res_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_value (
          id,
          i.res_value,
          i.res_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mysql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // event_type
    //
    {
      ::std::string& v =
        o.event_type;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.event_type_value,
        i.event_type_size,
        i.event_type_null);
    }

    // event_count
    //
    {
      long long int& v =
        o.event_count;

      mysql::value_traits<
          long long int,
          mysql::id_longlong >::set_value (
        v,
        i.event_count_value,
        i.event_count_null);
    }

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.id_value,
        i.id_null);
    }
  }

  void access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::persist_statement[] =
  "INSERT INTO `DBPapiMeasurement` "
  "(`res`, "
  "`event_type`, "
  "`event_count`, "
  "`id`) "
  "VALUES "
  "(?, ?, ?, ?)";

  const char access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::find_statement[] =
  "SELECT "
  "`DBPapiMeasurement`.`res`, "
  "`DBPapiMeasurement`.`event_type`, "
  "`DBPapiMeasurement`.`event_count`, "
  "`DBPapiMeasurement`.`id` "
  "FROM `DBPapiMeasurement` "
  "WHERE `DBPapiMeasurement`.`id`=?";

  const char access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::update_statement[] =
  "UPDATE `DBPapiMeasurement` "
  "SET "
  "`res`=?, "
  "`event_type`=?, "
  "`event_count`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::erase_statement[] =
  "DELETE FROM `DBPapiMeasurement` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::query_statement[] =
  "SELECT\n"
  "`DBPapiMeasurement`.`res`,\n"
  "`DBPapiMeasurement`.`event_type`,\n"
  "`DBPapiMeasurement`.`event_count`,\n"
  "`DBPapiMeasurement`.`id`\n"
  "FROM `DBPapiMeasurement`\n"
  "LEFT JOIN `DBResult` AS `res` ON `res`.`id`=`DBPapiMeasurement`.`res`";

  const char access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::erase_query_statement[] =
  "DELETE FROM `DBPapiMeasurement`";

  const char access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::table_name[] =
  "`DBPapiMeasurement`";

  void access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_value = 0;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::pointer_type
  access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::object_type >
  access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  result< access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::object_type >
  access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::
  query (database& db, const odb::query_base& q)
  {
    return query (db, query_base_type (q));
  }

  unsigned long long access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  unsigned long long access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::
  erase_query (database& db, const odb::query_base& q)
  {
    return erase_query (db, query_base_type (q));
  }

  static const
  access::object_traits_impl< ::DBPapiMeasurement, id_common >::
  function_table_type function_table_DBPapiMeasurement_ =
  {
    &access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::persist,
    &access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::find,
    &access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::find,
    &access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::reload,
    &access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::update,
    &access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::erase,
    &access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::erase,
    &access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::query,
    &access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::erase_query
  };

  static const object_function_table_entry< ::DBPapiMeasurement, id_mysql >
  function_table_entry_DBPapiMeasurement_ (
    &function_table_DBPapiMeasurement_);

  // DBSolution
  //

  const char alias_traits<  ::DBResult,
    id_mysql,
    access::object_traits_impl< ::DBSolution, id_mysql >::res_tag>::
  table_name[] = "`res`";

  template struct pointer_query_columns<
    ::DBResult,
    id_mysql,
    query_columns_base< ::DBSolution, id_mysql >::res_alias_ >;

  template struct query_columns<
    ::DBSolution,
    id_mysql,
    access::object_traits_impl< ::DBSolution, id_mysql > >;

  template struct pointer_query_columns<
    ::DBSolution,
    id_mysql,
    access::object_traits_impl< ::DBSolution, id_mysql > >;

  struct access::object_traits_impl< ::DBSolution, id_mysql >::extra_statement_cache_type
  {
    mysql::container_statements_impl< jobs_traits > jobs;
    mysql::container_statements_impl< intermediates_traits > intermediates;

    extra_statement_cache_type (
      mysql::connection& c,
      image_type&,
      id_image_type&,
      mysql::binding& id,
      mysql::binding&)
    : jobs (c, id),
      intermediates (c, id)
    {
    }
  };

  // jobs
  //

  const char access::object_traits_impl< ::DBSolution, id_mysql >::jobs_traits::
  select_statement[] =
  "SELECT "
  "`DBSolutionJob`.`id` "
  "FROM `DBSolutionJob` "
  "WHERE `DBSolutionJob`.`sol`=?";

  const char access::object_traits_impl< ::DBSolution, id_mysql >::jobs_traits::
  insert_statement[] =
  "";

  const char access::object_traits_impl< ::DBSolution, id_mysql >::jobs_traits::
  delete_statement[] =
  "";

  void access::object_traits_impl< ::DBSolution, id_mysql >::jobs_traits::
  bind (MYSQL_BIND* b,
        const MYSQL_BIND* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace mysql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // value
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &d.value_value;
    b[n].is_null = &d.value_null;
  }

  void access::object_traits_impl< ::DBSolution, id_mysql >::jobs_traits::
  grow (data_image_type& i,
        my_bool* t)
  {
    bool grew (false);

    // value
    //
    t[0UL] = 0;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::DBSolution, id_mysql >::jobs_traits::
  init (value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // value
    //
    {
      typedef object_traits< ::DBSolutionJob > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      if (i.value_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_value (
          id,
          i.value_value,
          i.value_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mysql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::DBSolution, id_mysql >::jobs_traits::
  insert (index_type, const value_type&, void*)
  {
  }

  bool access::object_traits_impl< ::DBSolution, id_mysql >::jobs_traits::
  select (index_type&, value_type& v, void* d)
  {
    using namespace mysql;
    using mysql::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (v, di, &sts.connection ().database ());

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());
    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::DBSolution, id_mysql >::jobs_traits::
  delete_ (void*)
  {
  }

  void access::object_traits_impl< ::DBSolution, id_mysql >::jobs_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace mysql;
    using mysql::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    st.cache ();
    select_statement::result r (st.fetch ());
    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = false;
    container_traits_type::load (c, more, fs);
  }

  // intermediates
  //

  const char access::object_traits_impl< ::DBSolution, id_mysql >::intermediates_traits::
  select_statement[] =
  "SELECT "
  "`DBIntermediate`.`id` "
  "FROM `DBIntermediate` "
  "WHERE `DBIntermediate`.`solution`=?";

  const char access::object_traits_impl< ::DBSolution, id_mysql >::intermediates_traits::
  insert_statement[] =
  "";

  const char access::object_traits_impl< ::DBSolution, id_mysql >::intermediates_traits::
  delete_statement[] =
  "";

  void access::object_traits_impl< ::DBSolution, id_mysql >::intermediates_traits::
  bind (MYSQL_BIND* b,
        const MYSQL_BIND* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace mysql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // value
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &d.value_value;
    b[n].is_null = &d.value_null;
  }

  void access::object_traits_impl< ::DBSolution, id_mysql >::intermediates_traits::
  grow (data_image_type& i,
        my_bool* t)
  {
    bool grew (false);

    // value
    //
    t[0UL] = 0;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::DBSolution, id_mysql >::intermediates_traits::
  init (value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // value
    //
    {
      typedef object_traits< ::DBIntermediate > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      if (i.value_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_value (
          id,
          i.value_value,
          i.value_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mysql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::DBSolution, id_mysql >::intermediates_traits::
  insert (index_type, const value_type&, void*)
  {
  }

  bool access::object_traits_impl< ::DBSolution, id_mysql >::intermediates_traits::
  select (index_type&, value_type& v, void* d)
  {
    using namespace mysql;
    using mysql::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (v, di, &sts.connection ().database ());

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());
    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::DBSolution, id_mysql >::intermediates_traits::
  delete_ (void*)
  {
  }

  void access::object_traits_impl< ::DBSolution, id_mysql >::intermediates_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace mysql;
    using mysql::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    st.cache ();
    select_statement::result r (st.fetch ());
    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = false;
    container_traits_type::load (c, more, fs);
  }

  access::object_traits_impl< ::DBSolution, id_mysql >::id_type
  access::object_traits_impl< ::DBSolution, id_mysql >::
  id (const id_image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::DBSolution, id_mysql >::id_type
  access::object_traits_impl< ::DBSolution, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::DBSolution, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // res
    //
    t[0UL] = 0;

    // id_
    //
    t[1UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::DBSolution, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // res
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.res_value;
    b[n].is_null = &i.res_null;
    n++;

    // id_
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_LONGLONG;
      b[n].is_unsigned = 1;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }
  }

  void access::object_traits_impl< ::DBSolution, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::DBSolution, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // res
    //
    {
      ::std::shared_ptr< ::DBResult > const& v =
        o.res;

      typedef object_traits< ::DBResult > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBResult > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_image (
          i.res_value, is_null, id);
        i.res_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, v);
      i.id_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::DBSolution, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // res
    //
    {
      ::std::shared_ptr< ::DBResult >& v =
        o.res;

      typedef object_traits< ::DBResult > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBResult > > ptr_traits;

      if (i.res_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_value (
          id,
          i.res_value,
          i.res_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mysql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.id_value,
        i.id_null);
    }
  }

  void access::object_traits_impl< ::DBSolution, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::DBSolution, id_mysql >::persist_statement[] =
  "INSERT INTO `DBSolution` "
  "(`res`, "
  "`id`) "
  "VALUES "
  "(?, ?)";

  const char access::object_traits_impl< ::DBSolution, id_mysql >::find_statement[] =
  "SELECT "
  "`DBSolution`.`res`, "
  "`DBSolution`.`id` "
  "FROM `DBSolution` "
  "WHERE `DBSolution`.`id`=?";

  const char access::object_traits_impl< ::DBSolution, id_mysql >::update_statement[] =
  "UPDATE `DBSolution` "
  "SET "
  "`res`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::DBSolution, id_mysql >::erase_statement[] =
  "DELETE FROM `DBSolution` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::DBSolution, id_mysql >::query_statement[] =
  "SELECT\n"
  "`DBSolution`.`res`,\n"
  "`DBSolution`.`id`\n"
  "FROM `DBSolution`\n"
  "LEFT JOIN `DBResult` AS `res` ON `res`.`id`=`DBSolution`.`res`";

  const char access::object_traits_impl< ::DBSolution, id_mysql >::erase_query_statement[] =
  "DELETE FROM `DBSolution`";

  const char access::object_traits_impl< ::DBSolution, id_mysql >::table_name[] =
  "`DBSolution`";

  void access::object_traits_impl< ::DBSolution, id_mysql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_value = 0;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBSolution, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBSolution, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBSolution, id_mysql >::pointer_type
  access::object_traits_impl< ::DBSolution, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBSolution, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBSolution, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBSolution, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::DBSolution, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // jobs
    //
    {
      ::std::vector< ::std::shared_ptr< ::DBSolutionJob > >& v =
        obj.jobs;

      jobs_traits::load (
        v,
        esc.jobs);
    }

    // intermediates
    //
    {
      ::std::vector< ::std::shared_ptr< ::DBIntermediate > >& v =
        obj.intermediates;

      intermediates_traits::load (
        v,
        esc.intermediates);
    }
  }

  result< access::object_traits_impl< ::DBSolution, id_mysql >::object_type >
  access::object_traits_impl< ::DBSolution, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  result< access::object_traits_impl< ::DBSolution, id_mysql >::object_type >
  access::object_traits_impl< ::DBSolution, id_mysql >::
  query (database& db, const odb::query_base& q)
  {
    return query (db, query_base_type (q));
  }

  unsigned long long access::object_traits_impl< ::DBSolution, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  unsigned long long access::object_traits_impl< ::DBSolution, id_mysql >::
  erase_query (database& db, const odb::query_base& q)
  {
    return erase_query (db, query_base_type (q));
  }

  static const
  access::object_traits_impl< ::DBSolution, id_common >::
  function_table_type function_table_DBSolution_ =
  {
    &access::object_traits_impl< ::DBSolution, id_mysql >::persist,
    &access::object_traits_impl< ::DBSolution, id_mysql >::find,
    &access::object_traits_impl< ::DBSolution, id_mysql >::find,
    &access::object_traits_impl< ::DBSolution, id_mysql >::reload,
    &access::object_traits_impl< ::DBSolution, id_mysql >::update,
    &access::object_traits_impl< ::DBSolution, id_mysql >::erase,
    &access::object_traits_impl< ::DBSolution, id_mysql >::erase,
    &access::object_traits_impl< ::DBSolution, id_mysql >::query,
    &access::object_traits_impl< ::DBSolution, id_mysql >::erase_query
  };

  static const object_function_table_entry< ::DBSolution, id_mysql >
  function_table_entry_DBSolution_ (
    &function_table_DBSolution_);

  // DBSolutionJob
  //

  const char alias_traits<  ::DBSolution,
    id_mysql,
    access::object_traits_impl< ::DBSolutionJob, id_mysql >::sol_tag>::
  table_name[] = "`sol`";

  template struct pointer_query_columns<
    ::DBSolution,
    id_mysql,
    query_columns_base< ::DBSolutionJob, id_mysql >::sol_alias_ >;

  template struct query_columns<
    ::DBSolutionJob,
    id_mysql,
    access::object_traits_impl< ::DBSolutionJob, id_mysql > >;

  template struct pointer_query_columns<
    ::DBSolutionJob,
    id_mysql,
    access::object_traits_impl< ::DBSolutionJob, id_mysql > >;

  struct access::object_traits_impl< ::DBSolutionJob, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      id_image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  access::object_traits_impl< ::DBSolutionJob, id_mysql >::id_type
  access::object_traits_impl< ::DBSolutionJob, id_mysql >::
  id (const id_image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::DBSolutionJob, id_mysql >::id_type
  access::object_traits_impl< ::DBSolutionJob, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::DBSolutionJob, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // sol
    //
    t[0UL] = 0;

    // job_id
    //
    t[1UL] = 0;

    // start_time
    //
    t[2UL] = 0;

    // id_
    //
    t[3UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::DBSolutionJob, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // sol
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.sol_value;
    b[n].is_null = &i.sol_null;
    n++;

    // job_id
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.job_id_value;
    b[n].is_null = &i.job_id_null;
    n++;

    // start_time
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.start_time_value;
    b[n].is_null = &i.start_time_null;
    n++;

    // id_
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_LONGLONG;
      b[n].is_unsigned = 1;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }
  }

  void access::object_traits_impl< ::DBSolutionJob, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::DBSolutionJob, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // sol
    //
    {
      ::std::shared_ptr< ::DBSolution > const& v =
        o.sol;

      typedef object_traits< ::DBSolution > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBSolution > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_image (
          i.sol_value, is_null, id);
        i.sol_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // job_id
    //
    {
      unsigned int const& v =
        o.job_id;

      bool is_null (false);
      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_image (
        i.job_id_value, is_null, v);
      i.job_id_null = is_null;
    }

    // start_time
    //
    {
      unsigned int const& v =
        o.start_time;

      bool is_null (false);
      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_image (
        i.start_time_value, is_null, v);
      i.start_time_null = is_null;
    }

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, v);
      i.id_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::DBSolutionJob, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // sol
    //
    {
      ::std::shared_ptr< ::DBSolution >& v =
        o.sol;

      typedef object_traits< ::DBSolution > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBSolution > > ptr_traits;

      if (i.sol_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_value (
          id,
          i.sol_value,
          i.sol_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mysql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // job_id
    //
    {
      unsigned int& v =
        o.job_id;

      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_value (
        v,
        i.job_id_value,
        i.job_id_null);
    }

    // start_time
    //
    {
      unsigned int& v =
        o.start_time;

      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_value (
        v,
        i.start_time_value,
        i.start_time_null);
    }

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.id_value,
        i.id_null);
    }
  }

  void access::object_traits_impl< ::DBSolutionJob, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::DBSolutionJob, id_mysql >::persist_statement[] =
  "INSERT INTO `DBSolutionJob` "
  "(`sol`, "
  "`job_id`, "
  "`start_time`, "
  "`id`) "
  "VALUES "
  "(?, ?, ?, ?)";

  const char access::object_traits_impl< ::DBSolutionJob, id_mysql >::find_statement[] =
  "SELECT "
  "`DBSolutionJob`.`sol`, "
  "`DBSolutionJob`.`job_id`, "
  "`DBSolutionJob`.`start_time`, "
  "`DBSolutionJob`.`id` "
  "FROM `DBSolutionJob` "
  "WHERE `DBSolutionJob`.`id`=?";

  const char access::object_traits_impl< ::DBSolutionJob, id_mysql >::update_statement[] =
  "UPDATE `DBSolutionJob` "
  "SET "
  "`sol`=?, "
  "`job_id`=?, "
  "`start_time`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::DBSolutionJob, id_mysql >::erase_statement[] =
  "DELETE FROM `DBSolutionJob` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::DBSolutionJob, id_mysql >::query_statement[] =
  "SELECT\n"
  "`DBSolutionJob`.`sol`,\n"
  "`DBSolutionJob`.`job_id`,\n"
  "`DBSolutionJob`.`start_time`,\n"
  "`DBSolutionJob`.`id`\n"
  "FROM `DBSolutionJob`\n"
  "LEFT JOIN `DBSolution` AS `sol` ON `sol`.`id`=`DBSolutionJob`.`sol`";

  const char access::object_traits_impl< ::DBSolutionJob, id_mysql >::erase_query_statement[] =
  "DELETE FROM `DBSolutionJob`";

  const char access::object_traits_impl< ::DBSolutionJob, id_mysql >::table_name[] =
  "`DBSolutionJob`";

  void access::object_traits_impl< ::DBSolutionJob, id_mysql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_value = 0;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBSolutionJob, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBSolutionJob, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBSolutionJob, id_mysql >::pointer_type
  access::object_traits_impl< ::DBSolutionJob, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBSolutionJob, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBSolutionJob, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBSolutionJob, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::DBSolutionJob, id_mysql >::object_type >
  access::object_traits_impl< ::DBSolutionJob, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  result< access::object_traits_impl< ::DBSolutionJob, id_mysql >::object_type >
  access::object_traits_impl< ::DBSolutionJob, id_mysql >::
  query (database& db, const odb::query_base& q)
  {
    return query (db, query_base_type (q));
  }

  unsigned long long access::object_traits_impl< ::DBSolutionJob, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  unsigned long long access::object_traits_impl< ::DBSolutionJob, id_mysql >::
  erase_query (database& db, const odb::query_base& q)
  {
    return erase_query (db, query_base_type (q));
  }

  static const
  access::object_traits_impl< ::DBSolutionJob, id_common >::
  function_table_type function_table_DBSolutionJob_ =
  {
    &access::object_traits_impl< ::DBSolutionJob, id_mysql >::persist,
    &access::object_traits_impl< ::DBSolutionJob, id_mysql >::find,
    &access::object_traits_impl< ::DBSolutionJob, id_mysql >::find,
    &access::object_traits_impl< ::DBSolutionJob, id_mysql >::reload,
    &access::object_traits_impl< ::DBSolutionJob, id_mysql >::update,
    &access::object_traits_impl< ::DBSolutionJob, id_mysql >::erase,
    &access::object_traits_impl< ::DBSolutionJob, id_mysql >::erase,
    &access::object_traits_impl< ::DBSolutionJob, id_mysql >::query,
    &access::object_traits_impl< ::DBSolutionJob, id_mysql >::erase_query
  };

  static const object_function_table_entry< ::DBSolutionJob, id_mysql >
  function_table_entry_DBSolutionJob_ (
    &function_table_DBSolutionJob_);

  // DBIntermediate
  //

  const char alias_traits<  ::DBResult,
    id_mysql,
    access::object_traits_impl< ::DBIntermediate, id_mysql >::res_tag>::
  table_name[] = "`res`";

  const char alias_traits<  ::DBSolution,
    id_mysql,
    access::object_traits_impl< ::DBIntermediate, id_mysql >::solution_tag>::
  table_name[] = "`solution`";

  template struct pointer_query_columns<
    ::DBResult,
    id_mysql,
    query_columns_base< ::DBIntermediate, id_mysql >::res_alias_ >;

  template struct pointer_query_columns<
    ::DBSolution,
    id_mysql,
    query_columns_base< ::DBIntermediate, id_mysql >::solution_alias_ >;

  template struct query_columns<
    ::DBIntermediate,
    id_mysql,
    access::object_traits_impl< ::DBIntermediate, id_mysql > >;

  template struct pointer_query_columns<
    ::DBIntermediate,
    id_mysql,
    access::object_traits_impl< ::DBIntermediate, id_mysql > >;

  struct access::object_traits_impl< ::DBIntermediate, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      id_image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  access::object_traits_impl< ::DBIntermediate, id_mysql >::id_type
  access::object_traits_impl< ::DBIntermediate, id_mysql >::
  id (const id_image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::DBIntermediate, id_mysql >::id_type
  access::object_traits_impl< ::DBIntermediate, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::DBIntermediate, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // res
    //
    t[0UL] = 0;

    // time
    //
    t[1UL] = 0;

    // iteration
    //
    t[2UL] = 0;

    // costs
    //
    t[3UL] = 0;

    // bound
    //
    t[4UL] = 0;

    // solution
    //
    t[5UL] = 0;

    // id_
    //
    t[6UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::DBIntermediate, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // res
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.res_value;
    b[n].is_null = &i.res_null;
    n++;

    // time
    //
    b[n].buffer_type = MYSQL_TYPE_DOUBLE;
    b[n].buffer = &i.time_value;
    b[n].is_null = &i.time_null;
    n++;

    // iteration
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.iteration_value;
    b[n].is_null = &i.iteration_null;
    n++;

    // costs
    //
    b[n].buffer_type = MYSQL_TYPE_DOUBLE;
    b[n].buffer = &i.costs_value;
    b[n].is_null = &i.costs_null;
    n++;

    // bound
    //
    b[n].buffer_type = MYSQL_TYPE_DOUBLE;
    b[n].buffer = &i.bound_value;
    b[n].is_null = &i.bound_null;
    n++;

    // solution
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.solution_value;
    b[n].is_null = &i.solution_null;
    n++;

    // id_
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_LONGLONG;
      b[n].is_unsigned = 1;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }
  }

  void access::object_traits_impl< ::DBIntermediate, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::DBIntermediate, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // res
    //
    {
      ::std::shared_ptr< ::DBResult > const& v =
        o.res;

      typedef object_traits< ::DBResult > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBResult > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_image (
          i.res_value, is_null, id);
        i.res_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // time
    //
    {
      ::std::shared_ptr< double > const& v =
        o.time;

      bool is_null (false);
      mysql::value_traits<
          ::std::shared_ptr< double >,
          mysql::id_double >::set_image (
        i.time_value, is_null, v);
      i.time_null = is_null;
    }

    // iteration
    //
    {
      ::std::shared_ptr< unsigned int > const& v =
        o.iteration;

      bool is_null (false);
      mysql::value_traits<
          ::std::shared_ptr< unsigned int >,
          mysql::id_ulong >::set_image (
        i.iteration_value, is_null, v);
      i.iteration_null = is_null;
    }

    // costs
    //
    {
      ::std::shared_ptr< double > const& v =
        o.costs;

      bool is_null (false);
      mysql::value_traits<
          ::std::shared_ptr< double >,
          mysql::id_double >::set_image (
        i.costs_value, is_null, v);
      i.costs_null = is_null;
    }

    // bound
    //
    {
      ::std::shared_ptr< double > const& v =
        o.bound;

      bool is_null (false);
      mysql::value_traits<
          ::std::shared_ptr< double >,
          mysql::id_double >::set_image (
        i.bound_value, is_null, v);
      i.bound_null = is_null;
    }

    // solution
    //
    {
      ::std::shared_ptr< ::DBSolution > const& v =
        o.solution;

      typedef object_traits< ::DBSolution > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBSolution > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_image (
          i.solution_value, is_null, id);
        i.solution_null = is_null;
      }
      else
        i.solution_null = 1;
    }

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, v);
      i.id_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::DBIntermediate, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // res
    //
    {
      ::std::shared_ptr< ::DBResult >& v =
        o.res;

      typedef object_traits< ::DBResult > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBResult > > ptr_traits;

      if (i.res_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_value (
          id,
          i.res_value,
          i.res_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mysql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // time
    //
    {
      ::std::shared_ptr< double >& v =
        o.time;

      mysql::value_traits<
          ::std::shared_ptr< double >,
          mysql::id_double >::set_value (
        v,
        i.time_value,
        i.time_null);
    }

    // iteration
    //
    {
      ::std::shared_ptr< unsigned int >& v =
        o.iteration;

      mysql::value_traits<
          ::std::shared_ptr< unsigned int >,
          mysql::id_ulong >::set_value (
        v,
        i.iteration_value,
        i.iteration_null);
    }

    // costs
    //
    {
      ::std::shared_ptr< double >& v =
        o.costs;

      mysql::value_traits<
          ::std::shared_ptr< double >,
          mysql::id_double >::set_value (
        v,
        i.costs_value,
        i.costs_null);
    }

    // bound
    //
    {
      ::std::shared_ptr< double >& v =
        o.bound;

      mysql::value_traits<
          ::std::shared_ptr< double >,
          mysql::id_double >::set_value (
        v,
        i.bound_value,
        i.bound_null);
    }

    // solution
    //
    {
      ::std::shared_ptr< ::DBSolution >& v =
        o.solution;

      typedef object_traits< ::DBSolution > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBSolution > > ptr_traits;

      if (i.solution_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_value (
          id,
          i.solution_value,
          i.solution_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mysql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.id_value,
        i.id_null);
    }
  }

  void access::object_traits_impl< ::DBIntermediate, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::DBIntermediate, id_mysql >::persist_statement[] =
  "INSERT INTO `DBIntermediate` "
  "(`res`, "
  "`time`, "
  "`iteration`, "
  "`costs`, "
  "`bound`, "
  "`solution`, "
  "`id`) "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::DBIntermediate, id_mysql >::find_statement[] =
  "SELECT "
  "`DBIntermediate`.`res`, "
  "`DBIntermediate`.`time`, "
  "`DBIntermediate`.`iteration`, "
  "`DBIntermediate`.`costs`, "
  "`DBIntermediate`.`bound`, "
  "`DBIntermediate`.`solution`, "
  "`DBIntermediate`.`id` "
  "FROM `DBIntermediate` "
  "WHERE `DBIntermediate`.`id`=?";

  const char access::object_traits_impl< ::DBIntermediate, id_mysql >::update_statement[] =
  "UPDATE `DBIntermediate` "
  "SET "
  "`res`=?, "
  "`time`=?, "
  "`iteration`=?, "
  "`costs`=?, "
  "`bound`=?, "
  "`solution`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::DBIntermediate, id_mysql >::erase_statement[] =
  "DELETE FROM `DBIntermediate` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::DBIntermediate, id_mysql >::query_statement[] =
  "SELECT\n"
  "`DBIntermediate`.`res`,\n"
  "`DBIntermediate`.`time`,\n"
  "`DBIntermediate`.`iteration`,\n"
  "`DBIntermediate`.`costs`,\n"
  "`DBIntermediate`.`bound`,\n"
  "`DBIntermediate`.`solution`,\n"
  "`DBIntermediate`.`id`\n"
  "FROM `DBIntermediate`\n"
  "LEFT JOIN `DBResult` AS `res` ON `res`.`id`=`DBIntermediate`.`res`\n"
  "LEFT JOIN `DBSolution` AS `solution` ON `solution`.`id`=`DBIntermediate`.`solution`";

  const char access::object_traits_impl< ::DBIntermediate, id_mysql >::erase_query_statement[] =
  "DELETE FROM `DBIntermediate`";

  const char access::object_traits_impl< ::DBIntermediate, id_mysql >::table_name[] =
  "`DBIntermediate`";

  void access::object_traits_impl< ::DBIntermediate, id_mysql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_value = 0;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBIntermediate, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBIntermediate, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBIntermediate, id_mysql >::pointer_type
  access::object_traits_impl< ::DBIntermediate, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBIntermediate, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBIntermediate, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBIntermediate, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::DBIntermediate, id_mysql >::object_type >
  access::object_traits_impl< ::DBIntermediate, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  result< access::object_traits_impl< ::DBIntermediate, id_mysql >::object_type >
  access::object_traits_impl< ::DBIntermediate, id_mysql >::
  query (database& db, const odb::query_base& q)
  {
    return query (db, query_base_type (q));
  }

  unsigned long long access::object_traits_impl< ::DBIntermediate, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  unsigned long long access::object_traits_impl< ::DBIntermediate, id_mysql >::
  erase_query (database& db, const odb::query_base& q)
  {
    return erase_query (db, query_base_type (q));
  }

  static const
  access::object_traits_impl< ::DBIntermediate, id_common >::
  function_table_type function_table_DBIntermediate_ =
  {
    &access::object_traits_impl< ::DBIntermediate, id_mysql >::persist,
    &access::object_traits_impl< ::DBIntermediate, id_mysql >::find,
    &access::object_traits_impl< ::DBIntermediate, id_mysql >::find,
    &access::object_traits_impl< ::DBIntermediate, id_mysql >::reload,
    &access::object_traits_impl< ::DBIntermediate, id_mysql >::update,
    &access::object_traits_impl< ::DBIntermediate, id_mysql >::erase,
    &access::object_traits_impl< ::DBIntermediate, id_mysql >::erase,
    &access::object_traits_impl< ::DBIntermediate, id_mysql >::query,
    &access::object_traits_impl< ::DBIntermediate, id_mysql >::erase_query
  };

  static const object_function_table_entry< ::DBIntermediate, id_mysql >
  function_table_entry_DBIntermediate_ (
    &function_table_DBIntermediate_);

  // DBError
  //

  template struct query_columns<
    ::DBError,
    id_mysql,
    access::object_traits_impl< ::DBError, id_mysql > >;

  struct access::object_traits_impl< ::DBError, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      id_image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  access::object_traits_impl< ::DBError, id_mysql >::id_type
  access::object_traits_impl< ::DBError, id_mysql >::
  id (const id_image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::DBError, id_mysql >::id_type
  access::object_traits_impl< ::DBError, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::DBError, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // timestamp
    //
    t[0UL] = 0;

    // run
    //
    if (t[1UL])
    {
      i.run_value.capacity (i.run_size);
      grew = true;
    }

    // instance
    //
    if (t[2UL])
    {
      i.instance_value.capacity (i.instance_size);
      grew = true;
    }

    // algorithm
    //
    if (t[3UL])
    {
      i.algorithm_value.capacity (i.algorithm_size);
      grew = true;
    }

    // config
    //
    if (t[4UL])
    {
      i.config_value.capacity (i.config_size);
      grew = true;
    }

    // seed
    //
    t[5UL] = 0;

    // fault_code
    //
    t[6UL] = 0;

    // error_id
    //
    t[7UL] = 0;

    // time
    //
    t[8UL] = 0;

    // git_revision
    //
    if (t[9UL])
    {
      i.git_revision_value.capacity (i.git_revision_size);
      grew = true;
    }

    // id_
    //
    t[10UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::DBError, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // timestamp
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.timestamp_value;
    b[n].is_null = &i.timestamp_null;
    n++;

    // run
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.run_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.run_value.capacity ());
    b[n].length = &i.run_size;
    b[n].is_null = &i.run_null;
    n++;

    // instance
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.instance_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.instance_value.capacity ());
    b[n].length = &i.instance_size;
    b[n].is_null = &i.instance_null;
    n++;

    // algorithm
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.algorithm_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.algorithm_value.capacity ());
    b[n].length = &i.algorithm_size;
    b[n].is_null = &i.algorithm_null;
    n++;

    // config
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.config_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.config_value.capacity ());
    b[n].length = &i.config_size;
    b[n].is_null = &i.config_null;
    n++;

    // seed
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.seed_value;
    b[n].is_null = &i.seed_null;
    n++;

    // fault_code
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.fault_code_value;
    b[n].is_null = &i.fault_code_null;
    n++;

    // error_id
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.error_id_value;
    b[n].is_null = &i.error_id_null;
    n++;

    // time
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.time_value;
    b[n].is_null = &i.time_null;
    n++;

    // git_revision
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.git_revision_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.git_revision_value.capacity ());
    b[n].length = &i.git_revision_size;
    b[n].is_null = &i.git_revision_null;
    n++;

    // id_
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_LONGLONG;
      b[n].is_unsigned = 1;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }
  }

  void access::object_traits_impl< ::DBError, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::DBError, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // timestamp
    //
    {
      long unsigned int const& v =
        o.timestamp;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.timestamp_value, is_null, v);
      i.timestamp_null = is_null;
    }

    // run
    //
    {
      ::std::string const& v =
        o.run;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.run_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.run_value,
        size,
        is_null,
        v);
      i.run_null = is_null;
      i.run_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.run_value.capacity ());
    }

    // instance
    //
    {
      ::std::string const& v =
        o.instance;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.instance_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.instance_value,
        size,
        is_null,
        v);
      i.instance_null = is_null;
      i.instance_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.instance_value.capacity ());
    }

    // algorithm
    //
    {
      ::std::string const& v =
        o.algorithm;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.algorithm_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.algorithm_value,
        size,
        is_null,
        v);
      i.algorithm_null = is_null;
      i.algorithm_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.algorithm_value.capacity ());
    }

    // config
    //
    {
      ::std::string const& v =
        o.config;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.config_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.config_value,
        size,
        is_null,
        v);
      i.config_null = is_null;
      i.config_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.config_value.capacity ());
    }

    // seed
    //
    {
      int const& v =
        o.seed;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.seed_value, is_null, v);
      i.seed_null = is_null;
    }

    // fault_code
    //
    {
      int const& v =
        o.fault_code;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.fault_code_value, is_null, v);
      i.fault_code_null = is_null;
    }

    // error_id
    //
    {
      int const& v =
        o.error_id;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.error_id_value, is_null, v);
      i.error_id_null = is_null;
    }

    // time
    //
    {
      long unsigned int const& v =
        o.time;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.time_value, is_null, v);
      i.time_null = is_null;
    }

    // git_revision
    //
    {
      ::std::string const& v =
        o.git_revision;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.git_revision_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.git_revision_value,
        size,
        is_null,
        v);
      i.git_revision_null = is_null;
      i.git_revision_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.git_revision_value.capacity ());
    }

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, v);
      i.id_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::DBError, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // timestamp
    //
    {
      long unsigned int& v =
        o.timestamp;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.timestamp_value,
        i.timestamp_null);
    }

    // run
    //
    {
      ::std::string& v =
        o.run;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.run_value,
        i.run_size,
        i.run_null);
    }

    // instance
    //
    {
      ::std::string& v =
        o.instance;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.instance_value,
        i.instance_size,
        i.instance_null);
    }

    // algorithm
    //
    {
      ::std::string& v =
        o.algorithm;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.algorithm_value,
        i.algorithm_size,
        i.algorithm_null);
    }

    // config
    //
    {
      ::std::string& v =
        o.config;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.config_value,
        i.config_size,
        i.config_null);
    }

    // seed
    //
    {
      int& v =
        o.seed;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.seed_value,
        i.seed_null);
    }

    // fault_code
    //
    {
      int& v =
        o.fault_code;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.fault_code_value,
        i.fault_code_null);
    }

    // error_id
    //
    {
      int& v =
        o.error_id;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.error_id_value,
        i.error_id_null);
    }

    // time
    //
    {
      long unsigned int& v =
        o.time;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.time_value,
        i.time_null);
    }

    // git_revision
    //
    {
      ::std::string& v =
        o.git_revision;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.git_revision_value,
        i.git_revision_size,
        i.git_revision_null);
    }

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.id_value,
        i.id_null);
    }
  }

  void access::object_traits_impl< ::DBError, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::DBError, id_mysql >::persist_statement[] =
  "INSERT INTO `DBError` "
  "(`timestamp`, "
  "`run`, "
  "`instance`, "
  "`algorithm`, "
  "`config`, "
  "`seed`, "
  "`fault_code`, "
  "`error_id`, "
  "`time`, "
  "`git_revision`, "
  "`id`) "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::DBError, id_mysql >::find_statement[] =
  "SELECT "
  "`DBError`.`timestamp`, "
  "`DBError`.`run`, "
  "`DBError`.`instance`, "
  "`DBError`.`algorithm`, "
  "`DBError`.`config`, "
  "`DBError`.`seed`, "
  "`DBError`.`fault_code`, "
  "`DBError`.`error_id`, "
  "`DBError`.`time`, "
  "`DBError`.`git_revision`, "
  "`DBError`.`id` "
  "FROM `DBError` "
  "WHERE `DBError`.`id`=?";

  const char access::object_traits_impl< ::DBError, id_mysql >::update_statement[] =
  "UPDATE `DBError` "
  "SET "
  "`timestamp`=?, "
  "`run`=?, "
  "`instance`=?, "
  "`algorithm`=?, "
  "`config`=?, "
  "`seed`=?, "
  "`fault_code`=?, "
  "`error_id`=?, "
  "`time`=?, "
  "`git_revision`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::DBError, id_mysql >::erase_statement[] =
  "DELETE FROM `DBError` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::DBError, id_mysql >::query_statement[] =
  "SELECT "
  "`DBError`.`timestamp`, "
  "`DBError`.`run`, "
  "`DBError`.`instance`, "
  "`DBError`.`algorithm`, "
  "`DBError`.`config`, "
  "`DBError`.`seed`, "
  "`DBError`.`fault_code`, "
  "`DBError`.`error_id`, "
  "`DBError`.`time`, "
  "`DBError`.`git_revision`, "
  "`DBError`.`id` "
  "FROM `DBError`";

  const char access::object_traits_impl< ::DBError, id_mysql >::erase_query_statement[] =
  "DELETE FROM `DBError`";

  const char access::object_traits_impl< ::DBError, id_mysql >::table_name[] =
  "`DBError`";

  void access::object_traits_impl< ::DBError, id_mysql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_value = 0;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBError, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBError, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBError, id_mysql >::pointer_type
  access::object_traits_impl< ::DBError, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBError, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBError, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBError, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::DBError, id_mysql >::object_type >
  access::object_traits_impl< ::DBError, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  result< access::object_traits_impl< ::DBError, id_mysql >::object_type >
  access::object_traits_impl< ::DBError, id_mysql >::
  query (database& db, const odb::query_base& q)
  {
    return query (db, query_base_type (q));
  }

  unsigned long long access::object_traits_impl< ::DBError, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  unsigned long long access::object_traits_impl< ::DBError, id_mysql >::
  erase_query (database& db, const odb::query_base& q)
  {
    return erase_query (db, query_base_type (q));
  }

  static const
  access::object_traits_impl< ::DBError, id_common >::
  function_table_type function_table_DBError_ =
  {
    &access::object_traits_impl< ::DBError, id_mysql >::persist,
    &access::object_traits_impl< ::DBError, id_mysql >::find,
    &access::object_traits_impl< ::DBError, id_mysql >::find,
    &access::object_traits_impl< ::DBError, id_mysql >::reload,
    &access::object_traits_impl< ::DBError, id_mysql >::update,
    &access::object_traits_impl< ::DBError, id_mysql >::erase,
    &access::object_traits_impl< ::DBError, id_mysql >::erase,
    &access::object_traits_impl< ::DBError, id_mysql >::query,
    &access::object_traits_impl< ::DBError, id_mysql >::erase_query
  };

  static const object_function_table_entry< ::DBError, id_mysql >
  function_table_entry_DBError_ (
    &function_table_DBError_);

  // DBExtendedMeasure
  //

  const char alias_traits<  ::DBResult,
    id_mysql,
    access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::res_tag>::
  table_name[] = "`res`";

  template struct pointer_query_columns<
    ::DBResult,
    id_mysql,
    query_columns_base< ::DBExtendedMeasure, id_mysql >::res_alias_ >;

  template struct query_columns<
    ::DBExtendedMeasure,
    id_mysql,
    access::object_traits_impl< ::DBExtendedMeasure, id_mysql > >;

  template struct pointer_query_columns<
    ::DBExtendedMeasure,
    id_mysql,
    access::object_traits_impl< ::DBExtendedMeasure, id_mysql > >;

  struct access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      id_image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::id_type
  access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::
  id (const id_image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::id_type
  access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // res
    //
    t[0UL] = 0;

    // key
    //
    if (t[1UL])
    {
      i.key_value.capacity (i.key_size);
      grew = true;
    }

    // iteration
    //
    t[2UL] = 0;

    // time
    //
    t[3UL] = 0;

    // v_int
    //
    t[4UL] = 0;

    // v_double
    //
    t[5UL] = 0;

    // id_
    //
    t[6UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // res
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.res_value;
    b[n].is_null = &i.res_null;
    n++;

    // key
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.key_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.key_value.capacity ());
    b[n].length = &i.key_size;
    b[n].is_null = &i.key_null;
    n++;

    // iteration
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.iteration_value;
    b[n].is_null = &i.iteration_null;
    n++;

    // time
    //
    b[n].buffer_type = MYSQL_TYPE_DOUBLE;
    b[n].buffer = &i.time_value;
    b[n].is_null = &i.time_null;
    n++;

    // v_int
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.v_int_value;
    b[n].is_null = &i.v_int_null;
    n++;

    // v_double
    //
    b[n].buffer_type = MYSQL_TYPE_DOUBLE;
    b[n].buffer = &i.v_double_value;
    b[n].is_null = &i.v_double_null;
    n++;

    // id_
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_LONGLONG;
      b[n].is_unsigned = 1;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }
  }

  void access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // res
    //
    {
      ::std::shared_ptr< ::DBResult > const& v =
        o.res;

      typedef object_traits< ::DBResult > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBResult > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_image (
          i.res_value, is_null, id);
        i.res_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // key
    //
    {
      ::std::string const& v =
        o.key;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.key_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.key_value,
        size,
        is_null,
        v);
      i.key_null = is_null;
      i.key_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.key_value.capacity ());
    }

    // iteration
    //
    {
      ::std::shared_ptr< unsigned int > const& v =
        o.iteration;

      bool is_null (true);
      mysql::value_traits<
          ::std::shared_ptr< unsigned int >,
          mysql::id_ulong >::set_image (
        i.iteration_value, is_null, v);
      i.iteration_null = is_null;
    }

    // time
    //
    {
      ::std::shared_ptr< double > const& v =
        o.time;

      bool is_null (true);
      mysql::value_traits<
          ::std::shared_ptr< double >,
          mysql::id_double >::set_image (
        i.time_value, is_null, v);
      i.time_null = is_null;
    }

    // v_int
    //
    {
      ::std::shared_ptr< int > const& v =
        o.v_int;

      bool is_null (true);
      mysql::value_traits<
          ::std::shared_ptr< int >,
          mysql::id_long >::set_image (
        i.v_int_value, is_null, v);
      i.v_int_null = is_null;
    }

    // v_double
    //
    {
      ::std::shared_ptr< double > const& v =
        o.v_double;

      bool is_null (true);
      mysql::value_traits<
          ::std::shared_ptr< double >,
          mysql::id_double >::set_image (
        i.v_double_value, is_null, v);
      i.v_double_null = is_null;
    }

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, v);
      i.id_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // res
    //
    {
      ::std::shared_ptr< ::DBResult >& v =
        o.res;

      typedef object_traits< ::DBResult > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBResult > > ptr_traits;

      if (i.res_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_value (
          id,
          i.res_value,
          i.res_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mysql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // key
    //
    {
      ::std::string& v =
        o.key;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.key_value,
        i.key_size,
        i.key_null);
    }

    // iteration
    //
    {
      ::std::shared_ptr< unsigned int >& v =
        o.iteration;

      mysql::value_traits<
          ::std::shared_ptr< unsigned int >,
          mysql::id_ulong >::set_value (
        v,
        i.iteration_value,
        i.iteration_null);
    }

    // time
    //
    {
      ::std::shared_ptr< double >& v =
        o.time;

      mysql::value_traits<
          ::std::shared_ptr< double >,
          mysql::id_double >::set_value (
        v,
        i.time_value,
        i.time_null);
    }

    // v_int
    //
    {
      ::std::shared_ptr< int >& v =
        o.v_int;

      mysql::value_traits<
          ::std::shared_ptr< int >,
          mysql::id_long >::set_value (
        v,
        i.v_int_value,
        i.v_int_null);
    }

    // v_double
    //
    {
      ::std::shared_ptr< double >& v =
        o.v_double;

      mysql::value_traits<
          ::std::shared_ptr< double >,
          mysql::id_double >::set_value (
        v,
        i.v_double_value,
        i.v_double_null);
    }

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.id_value,
        i.id_null);
    }
  }

  void access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::persist_statement[] =
  "INSERT INTO `DBExtendedMeasure` "
  "(`res`, "
  "`key`, "
  "`iteration`, "
  "`time`, "
  "`v_int`, "
  "`v_double`, "
  "`id`) "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::find_statement[] =
  "SELECT "
  "`DBExtendedMeasure`.`res`, "
  "`DBExtendedMeasure`.`key`, "
  "`DBExtendedMeasure`.`iteration`, "
  "`DBExtendedMeasure`.`time`, "
  "`DBExtendedMeasure`.`v_int`, "
  "`DBExtendedMeasure`.`v_double`, "
  "`DBExtendedMeasure`.`id` "
  "FROM `DBExtendedMeasure` "
  "WHERE `DBExtendedMeasure`.`id`=?";

  const char access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::update_statement[] =
  "UPDATE `DBExtendedMeasure` "
  "SET "
  "`res`=?, "
  "`key`=?, "
  "`iteration`=?, "
  "`time`=?, "
  "`v_int`=?, "
  "`v_double`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::erase_statement[] =
  "DELETE FROM `DBExtendedMeasure` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::query_statement[] =
  "SELECT\n"
  "`DBExtendedMeasure`.`res`,\n"
  "`DBExtendedMeasure`.`key`,\n"
  "`DBExtendedMeasure`.`iteration`,\n"
  "`DBExtendedMeasure`.`time`,\n"
  "`DBExtendedMeasure`.`v_int`,\n"
  "`DBExtendedMeasure`.`v_double`,\n"
  "`DBExtendedMeasure`.`id`\n"
  "FROM `DBExtendedMeasure`\n"
  "LEFT JOIN `DBResult` AS `res` ON `res`.`id`=`DBExtendedMeasure`.`res`";

  const char access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::erase_query_statement[] =
  "DELETE FROM `DBExtendedMeasure`";

  const char access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::table_name[] =
  "`DBExtendedMeasure`";

  void access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_value = 0;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::pointer_type
  access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::object_type >
  access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  result< access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::object_type >
  access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::
  query (database& db, const odb::query_base& q)
  {
    return query (db, query_base_type (q));
  }

  unsigned long long access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  unsigned long long access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::
  erase_query (database& db, const odb::query_base& q)
  {
    return erase_query (db, query_base_type (q));
  }

  static const
  access::object_traits_impl< ::DBExtendedMeasure, id_common >::
  function_table_type function_table_DBExtendedMeasure_ =
  {
    &access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::persist,
    &access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::find,
    &access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::find,
    &access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::reload,
    &access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::update,
    &access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::erase,
    &access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::erase,
    &access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::query,
    &access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::erase_query
  };

  static const object_function_table_entry< ::DBExtendedMeasure, id_mysql >
  function_table_entry_DBExtendedMeasure_ (
    &function_table_DBExtendedMeasure_);

  // ConfigGetterView
  //

  bool access::view_traits_impl< ::ConfigGetterView, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // config_id
    //
    t[0UL] = 0;

    return grew;
  }

  void access::view_traits_impl< ::ConfigGetterView, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i)
  {
    using namespace mysql;

    mysql::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // config_id
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.config_id_value;
    b[n].is_null = &i.config_id_null;
    n++;
  }

  void access::view_traits_impl< ::ConfigGetterView, id_mysql >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // config_id
    //
    {
      long unsigned int& v =
        o.config_id;

      mysql::value_traits<
          long unsigned int,
          mysql::id_long >::set_value (
        v,
        i.config_id_value,
        i.config_id_null);
    }
  }

  access::view_traits_impl< ::ConfigGetterView, id_mysql >::query_base_type
  access::view_traits_impl< ::ConfigGetterView, id_mysql >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT DBConfig.id from DBConfig INNER JOIN (");

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::ConfigGetterView, id_mysql >::view_type >
  access::view_traits_impl< ::ConfigGetterView, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) mysql::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }

  result< access::view_traits_impl< ::ConfigGetterView, id_mysql >::view_type >
  access::view_traits_impl< ::ConfigGetterView, id_mysql >::
  query (database& db, const odb::query_base& q)
  {
    return query (db, query_base_type (q));
  }

  static const
  access::view_traits_impl< ::ConfigGetterView, id_common >::
  function_table_type function_table_ConfigGetterView_ =
  {
    &access::view_traits_impl< ::ConfigGetterView, id_mysql >::query
  };

  static const view_function_table_entry< ::ConfigGetterView, id_mysql >
  function_table_entry_ConfigGetterView_ (
    &function_table_ConfigGetterView_);
}

#include <odb/post.hxx>
