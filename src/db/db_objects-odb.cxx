// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "db_objects-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/sqlite/traits.hxx>
#include <odb/sqlite/database.hxx>
#include <odb/sqlite/transaction.hxx>
#include <odb/sqlite/connection.hxx>
#include <odb/sqlite/statement.hxx>
#include <odb/sqlite/statement-cache.hxx>
#include <odb/sqlite/simple-object-statements.hxx>
#include <odb/sqlite/container-statements.hxx>
#include <odb/sqlite/exceptions.hxx>
#include <odb/sqlite/simple-object-result.hxx>

namespace odb
{
  // DBConfigKV
  //

  const char alias_traits<  ::DBConfig,
    id_sqlite,
    access::object_traits_impl< ::DBConfigKV, id_sqlite >::cfg_tag>::
  table_name[] = "\"cfg\"";

  struct access::object_traits_impl< ::DBConfigKV, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  access::object_traits_impl< ::DBConfigKV, id_sqlite >::id_type
  access::object_traits_impl< ::DBConfigKV, id_sqlite >::
  id (const id_image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::DBConfigKV, id_sqlite >::id_type
  access::object_traits_impl< ::DBConfigKV, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::DBConfigKV, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // cfg
    //
    t[0UL] = false;

    // key
    //
    if (t[1UL])
    {
      i.key_value.capacity (i.key_size);
      grew = true;
    }

    // value
    //
    if (t[2UL])
    {
      i.value_value.capacity (i.value_size);
      grew = true;
    }

    // id_
    //
    t[3UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::DBConfigKV, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // cfg
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.cfg_value;
    b[n].is_null = &i.cfg_null;
    n++;

    // key
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.key_value.data ();
    b[n].size = &i.key_size;
    b[n].capacity = i.key_value.capacity ();
    b[n].is_null = &i.key_null;
    n++;

    // value
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.value_value.data ();
    b[n].size = &i.value_size;
    b[n].capacity = i.value_value.capacity ();
    b[n].is_null = &i.value_null;
    n++;

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }
  }

  void access::object_traits_impl< ::DBConfigKV, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::DBConfigKV, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // cfg
    //
    {
      ::std::shared_ptr< ::DBConfig > const& v =
        o.cfg;

      typedef object_traits< ::DBConfig > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBConfig > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_image (
          i.cfg_value,
          is_null,
          id);
        i.cfg_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // key
    //
    {
      ::std::string const& v =
        o.key;

      bool is_null (false);
      std::size_t cap (i.key_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.key_value,
        i.key_size,
        is_null,
        v);
      i.key_null = is_null;
      grew = grew || (cap != i.key_value.capacity ());
    }

    // value
    //
    {
      ::std::string const& v =
        o.value;

      bool is_null (false);
      std::size_t cap (i.value_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.value_value,
        i.value_size,
        is_null,
        v);
      i.value_null = is_null;
      grew = grew || (cap != i.value_value.capacity ());
    }

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::DBConfigKV, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // cfg
    //
    {
      ::std::shared_ptr< ::DBConfig >& v =
        o.cfg;

      typedef object_traits< ::DBConfig > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBConfig > > ptr_traits;

      if (i.cfg_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.cfg_value,
          i.cfg_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // key
    //
    {
      ::std::string& v =
        o.key;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.key_value,
        i.key_size,
        i.key_null);
    }

    // value
    //
    {
      ::std::string& v =
        o.value;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.value_value,
        i.value_size,
        i.value_null);
    }

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }
  }

  void access::object_traits_impl< ::DBConfigKV, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::DBConfigKV, id_sqlite >::persist_statement[] =
  "INSERT INTO \"DBConfigKV\" "
  "(\"cfg\", "
  "\"key\", "
  "\"value\", "
  "\"id\") "
  "VALUES "
  "(?, ?, ?, ?)";

  const char access::object_traits_impl< ::DBConfigKV, id_sqlite >::find_statement[] =
  "SELECT "
  "\"DBConfigKV\".\"cfg\", "
  "\"DBConfigKV\".\"key\", "
  "\"DBConfigKV\".\"value\", "
  "\"DBConfigKV\".\"id\" "
  "FROM \"DBConfigKV\" "
  "WHERE \"DBConfigKV\".\"id\"=?";

  const char access::object_traits_impl< ::DBConfigKV, id_sqlite >::update_statement[] =
  "UPDATE \"DBConfigKV\" "
  "SET "
  "\"cfg\"=?, "
  "\"key\"=?, "
  "\"value\"=? "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::DBConfigKV, id_sqlite >::erase_statement[] =
  "DELETE FROM \"DBConfigKV\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::DBConfigKV, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"DBConfigKV\".\"cfg\",\n"
  "\"DBConfigKV\".\"key\",\n"
  "\"DBConfigKV\".\"value\",\n"
  "\"DBConfigKV\".\"id\"\n"
  "FROM \"DBConfigKV\"\n"
  "LEFT JOIN \"DBConfig\" AS \"cfg\" ON \"cfg\".\"id\"=\"DBConfigKV\".\"cfg\"";

  const char access::object_traits_impl< ::DBConfigKV, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"DBConfigKV\"";

  const char access::object_traits_impl< ::DBConfigKV, id_sqlite >::table_name[] =
  "\"DBConfigKV\"";

  void access::object_traits_impl< ::DBConfigKV, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBConfigKV, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;
    using sqlite::update_statement;

    callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBConfigKV, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBConfigKV, id_sqlite >::pointer_type
  access::object_traits_impl< ::DBConfigKV, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBConfigKV, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBConfigKV, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBConfigKV, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::DBConfigKV, id_sqlite >::object_type >
  access::object_traits_impl< ::DBConfigKV, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::DBConfigKV, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // DBConfig
  //

  struct access::object_traits_impl< ::DBConfig, id_sqlite >::extra_statement_cache_type
  {
    sqlite::container_statements_impl< entries_traits > entries;

    extra_statement_cache_type (
      sqlite::connection& c,
      image_type&,
      id_image_type&,
      sqlite::binding& id,
      sqlite::binding&)
    : entries (c, id)
    {
    }
  };

  // entries
  //

  const char access::object_traits_impl< ::DBConfig, id_sqlite >::entries_traits::
  select_statement[] =
  "SELECT "
  "\"DBConfigKV\".\"id\" "
  "FROM \"DBConfigKV\" "
  "WHERE \"DBConfigKV\".\"cfg\"=?";

  const char access::object_traits_impl< ::DBConfig, id_sqlite >::entries_traits::
  insert_statement[] =
  "";

  const char access::object_traits_impl< ::DBConfig, id_sqlite >::entries_traits::
  delete_statement[] =
  "";

  void access::object_traits_impl< ::DBConfig, id_sqlite >::entries_traits::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace sqlite;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // value
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &d.value_value;
    b[n].is_null = &d.value_null;
  }

  void access::object_traits_impl< ::DBConfig, id_sqlite >::entries_traits::
  grow (data_image_type& i,
        bool* t)
  {
    bool grew (false);

    // value
    //
    t[0UL] = false;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::DBConfig, id_sqlite >::entries_traits::
  init (value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // value
    //
    {
      typedef object_traits< ::DBConfigKV > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      if (i.value_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.value_value,
          i.value_null);

        v = ptr_traits::pointer_type (
          *static_cast<sqlite::database*> (db), id);
      }
    }
  }

  void access::object_traits_impl< ::DBConfig, id_sqlite >::entries_traits::
  insert (index_type, const value_type&, void*)
  {
  }

  bool access::object_traits_impl< ::DBConfig, id_sqlite >::entries_traits::
  select (index_type&, value_type& v, void* d)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (v, di, &sts.connection ().database ());

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());
    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::DBConfig, id_sqlite >::entries_traits::
  delete_ (void*)
  {
  }

  void access::object_traits_impl< ::DBConfig, id_sqlite >::entries_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());
    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = false;
    container_traits_type::load (c, more, fs);
  }

  access::object_traits_impl< ::DBConfig, id_sqlite >::id_type
  access::object_traits_impl< ::DBConfig, id_sqlite >::
  id (const id_image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::DBConfig, id_sqlite >::id_type
  access::object_traits_impl< ::DBConfig, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::DBConfig, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // name
    //
    if (t[0UL])
    {
      i.name_value.capacity (i.name_size);
      grew = true;
    }

    // time_limit
    //
    t[1UL] = false;

    // id_
    //
    t[2UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::DBConfig, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // name
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.name_value.data ();
    b[n].size = &i.name_size;
    b[n].capacity = i.name_value.capacity ();
    b[n].is_null = &i.name_null;
    n++;

    // time_limit
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.time_limit_value;
    b[n].is_null = &i.time_limit_null;
    n++;

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }
  }

  void access::object_traits_impl< ::DBConfig, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::DBConfig, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // name
    //
    {
      ::std::string const& v =
        o.name;

      bool is_null (false);
      std::size_t cap (i.name_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.name_value,
        i.name_size,
        is_null,
        v);
      i.name_null = is_null;
      grew = grew || (cap != i.name_value.capacity ());
    }

    // time_limit
    //
    {
      ::std::shared_ptr< unsigned int > const& v =
        o.time_limit;

      bool is_null (true);
      sqlite::value_traits<
          ::std::shared_ptr< unsigned int >,
          sqlite::id_integer >::set_image (
        i.time_limit_value,
        is_null,
        v);
      i.time_limit_null = is_null;
    }

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::DBConfig, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // name
    //
    {
      ::std::string& v =
        o.name;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.name_value,
        i.name_size,
        i.name_null);
    }

    // time_limit
    //
    {
      ::std::shared_ptr< unsigned int >& v =
        o.time_limit;

      sqlite::value_traits<
          ::std::shared_ptr< unsigned int >,
          sqlite::id_integer >::set_value (
        v,
        i.time_limit_value,
        i.time_limit_null);
    }

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }
  }

  void access::object_traits_impl< ::DBConfig, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::DBConfig, id_sqlite >::persist_statement[] =
  "INSERT INTO \"DBConfig\" "
  "(\"name\", "
  "\"time_limit\", "
  "\"id\") "
  "VALUES "
  "(?, ?, ?)";

  const char access::object_traits_impl< ::DBConfig, id_sqlite >::find_statement[] =
  "SELECT "
  "\"DBConfig\".\"name\", "
  "\"DBConfig\".\"time_limit\", "
  "\"DBConfig\".\"id\" "
  "FROM \"DBConfig\" "
  "WHERE \"DBConfig\".\"id\"=?";

  const char access::object_traits_impl< ::DBConfig, id_sqlite >::update_statement[] =
  "UPDATE \"DBConfig\" "
  "SET "
  "\"name\"=?, "
  "\"time_limit\"=? "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::DBConfig, id_sqlite >::erase_statement[] =
  "DELETE FROM \"DBConfig\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::DBConfig, id_sqlite >::query_statement[] =
  "SELECT "
  "\"DBConfig\".\"name\", "
  "\"DBConfig\".\"time_limit\", "
  "\"DBConfig\".\"id\" "
  "FROM \"DBConfig\"";

  const char access::object_traits_impl< ::DBConfig, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"DBConfig\"";

  const char access::object_traits_impl< ::DBConfig, id_sqlite >::table_name[] =
  "\"DBConfig\"";

  void access::object_traits_impl< ::DBConfig, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBConfig, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;
    using sqlite::update_statement;

    callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBConfig, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBConfig, id_sqlite >::pointer_type
  access::object_traits_impl< ::DBConfig, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBConfig, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBConfig, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBConfig, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::DBConfig, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // entries
    //
    {
      ::std::vector< ::odb::lazy_weak_ptr< ::DBConfigKV > >& v =
        obj.entries;

      entries_traits::load (
        v,
        esc.entries);
    }
  }

  result< access::object_traits_impl< ::DBConfig, id_sqlite >::object_type >
  access::object_traits_impl< ::DBConfig, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::DBConfig, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // DBResult
  //

  const char alias_traits<  ::DBConfig,
    id_sqlite,
    access::object_traits_impl< ::DBResult, id_sqlite >::cfg_tag>::
  table_name[] = "\"cfg\"";

  struct access::object_traits_impl< ::DBResult, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  access::object_traits_impl< ::DBResult, id_sqlite >::id_type
  access::object_traits_impl< ::DBResult, id_sqlite >::
  id (const id_image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::DBResult, id_sqlite >::id_type
  access::object_traits_impl< ::DBResult, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::DBResult, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // run
    //
    if (t[0UL])
    {
      i.run_value.capacity (i.run_size);
      grew = true;
    }

    // instance
    //
    if (t[1UL])
    {
      i.instance_value.capacity (i.instance_size);
      grew = true;
    }

    // score
    //
    t[2UL] = false;

    // algorithm
    //
    if (t[3UL])
    {
      i.algorithm_value.capacity (i.algorithm_size);
      grew = true;
    }

    // config
    //
    if (t[4UL])
    {
      i.config_value.capacity (i.config_size);
      grew = true;
    }

    // seed
    //
    t[5UL] = false;

    // optimal
    //
    t[6UL] = false;

    // feasible
    //
    t[7UL] = false;

    // lower_bound
    //
    t[8UL] = false;

    // elapsed
    //
    t[9UL] = false;

    // cfg
    //
    t[10UL] = false;

    // id_
    //
    t[11UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::DBResult, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // run
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.run_value.data ();
    b[n].size = &i.run_size;
    b[n].capacity = i.run_value.capacity ();
    b[n].is_null = &i.run_null;
    n++;

    // instance
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.instance_value.data ();
    b[n].size = &i.instance_size;
    b[n].capacity = i.instance_value.capacity ();
    b[n].is_null = &i.instance_null;
    n++;

    // score
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.score_value;
    b[n].is_null = &i.score_null;
    n++;

    // algorithm
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.algorithm_value.data ();
    b[n].size = &i.algorithm_size;
    b[n].capacity = i.algorithm_value.capacity ();
    b[n].is_null = &i.algorithm_null;
    n++;

    // config
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.config_value.data ();
    b[n].size = &i.config_size;
    b[n].capacity = i.config_value.capacity ();
    b[n].is_null = &i.config_null;
    n++;

    // seed
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.seed_value;
    b[n].is_null = &i.seed_null;
    n++;

    // optimal
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.optimal_value;
    b[n].is_null = &i.optimal_null;
    n++;

    // feasible
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.feasible_value;
    b[n].is_null = &i.feasible_null;
    n++;

    // lower_bound
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.lower_bound_value;
    b[n].is_null = &i.lower_bound_null;
    n++;

    // elapsed
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.elapsed_value;
    b[n].is_null = &i.elapsed_null;
    n++;

    // cfg
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.cfg_value;
    b[n].is_null = &i.cfg_null;
    n++;

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }
  }

  void access::object_traits_impl< ::DBResult, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::DBResult, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // run
    //
    {
      ::std::string const& v =
        o.run;

      bool is_null (false);
      std::size_t cap (i.run_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.run_value,
        i.run_size,
        is_null,
        v);
      i.run_null = is_null;
      grew = grew || (cap != i.run_value.capacity ());
    }

    // instance
    //
    {
      ::std::string const& v =
        o.instance;

      bool is_null (false);
      std::size_t cap (i.instance_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.instance_value,
        i.instance_size,
        is_null,
        v);
      i.instance_null = is_null;
      grew = grew || (cap != i.instance_value.capacity ());
    }

    // score
    //
    {
      double const& v =
        o.score;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.score_value,
        is_null,
        v);
      i.score_null = is_null;
    }

    // algorithm
    //
    {
      ::std::string const& v =
        o.algorithm;

      bool is_null (false);
      std::size_t cap (i.algorithm_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.algorithm_value,
        i.algorithm_size,
        is_null,
        v);
      i.algorithm_null = is_null;
      grew = grew || (cap != i.algorithm_value.capacity ());
    }

    // config
    //
    {
      ::std::string const& v =
        o.config;

      bool is_null (false);
      std::size_t cap (i.config_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.config_value,
        i.config_size,
        is_null,
        v);
      i.config_null = is_null;
      grew = grew || (cap != i.config_value.capacity ());
    }

    // seed
    //
    {
      int const& v =
        o.seed;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.seed_value,
        is_null,
        v);
      i.seed_null = is_null;
    }

    // optimal
    //
    {
      bool const& v =
        o.optimal;

      bool is_null (false);
      sqlite::value_traits<
          bool,
          sqlite::id_integer >::set_image (
        i.optimal_value,
        is_null,
        v);
      i.optimal_null = is_null;
    }

    // feasible
    //
    {
      bool const& v =
        o.feasible;

      bool is_null (false);
      sqlite::value_traits<
          bool,
          sqlite::id_integer >::set_image (
        i.feasible_value,
        is_null,
        v);
      i.feasible_null = is_null;
    }

    // lower_bound
    //
    {
      ::std::shared_ptr< double > const& v =
        o.lower_bound;

      bool is_null (true);
      sqlite::value_traits<
          ::std::shared_ptr< double >,
          sqlite::id_real >::set_image (
        i.lower_bound_value,
        is_null,
        v);
      i.lower_bound_null = is_null;
    }

    // elapsed
    //
    {
      double const& v =
        o.elapsed;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.elapsed_value,
        is_null,
        v);
      i.elapsed_null = is_null;
    }

    // cfg
    //
    {
      ::std::shared_ptr< ::DBConfig > const& v =
        o.cfg;

      typedef object_traits< ::DBConfig > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBConfig > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_image (
          i.cfg_value,
          is_null,
          id);
        i.cfg_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::DBResult, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // run
    //
    {
      ::std::string& v =
        o.run;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.run_value,
        i.run_size,
        i.run_null);
    }

    // instance
    //
    {
      ::std::string& v =
        o.instance;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.instance_value,
        i.instance_size,
        i.instance_null);
    }

    // score
    //
    {
      double& v =
        o.score;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.score_value,
        i.score_null);
    }

    // algorithm
    //
    {
      ::std::string& v =
        o.algorithm;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.algorithm_value,
        i.algorithm_size,
        i.algorithm_null);
    }

    // config
    //
    {
      ::std::string& v =
        o.config;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.config_value,
        i.config_size,
        i.config_null);
    }

    // seed
    //
    {
      int& v =
        o.seed;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.seed_value,
        i.seed_null);
    }

    // optimal
    //
    {
      bool& v =
        o.optimal;

      sqlite::value_traits<
          bool,
          sqlite::id_integer >::set_value (
        v,
        i.optimal_value,
        i.optimal_null);
    }

    // feasible
    //
    {
      bool& v =
        o.feasible;

      sqlite::value_traits<
          bool,
          sqlite::id_integer >::set_value (
        v,
        i.feasible_value,
        i.feasible_null);
    }

    // lower_bound
    //
    {
      ::std::shared_ptr< double >& v =
        o.lower_bound;

      sqlite::value_traits<
          ::std::shared_ptr< double >,
          sqlite::id_real >::set_value (
        v,
        i.lower_bound_value,
        i.lower_bound_null);
    }

    // elapsed
    //
    {
      double& v =
        o.elapsed;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.elapsed_value,
        i.elapsed_null);
    }

    // cfg
    //
    {
      ::std::shared_ptr< ::DBConfig >& v =
        o.cfg;

      typedef object_traits< ::DBConfig > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBConfig > > ptr_traits;

      if (i.cfg_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.cfg_value,
          i.cfg_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }
  }

  void access::object_traits_impl< ::DBResult, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::DBResult, id_sqlite >::persist_statement[] =
  "INSERT INTO \"DBResult\" "
  "(\"run\", "
  "\"instance\", "
  "\"score\", "
  "\"algorithm\", "
  "\"config\", "
  "\"seed\", "
  "\"optimal\", "
  "\"feasible\", "
  "\"lower_bound\", "
  "\"elapsed\", "
  "\"cfg\", "
  "\"id\") "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::DBResult, id_sqlite >::find_statement[] =
  "SELECT "
  "\"DBResult\".\"run\", "
  "\"DBResult\".\"instance\", "
  "\"DBResult\".\"score\", "
  "\"DBResult\".\"algorithm\", "
  "\"DBResult\".\"config\", "
  "\"DBResult\".\"seed\", "
  "\"DBResult\".\"optimal\", "
  "\"DBResult\".\"feasible\", "
  "\"DBResult\".\"lower_bound\", "
  "\"DBResult\".\"elapsed\", "
  "\"DBResult\".\"cfg\", "
  "\"DBResult\".\"id\" "
  "FROM \"DBResult\" "
  "WHERE \"DBResult\".\"id\"=?";

  const char access::object_traits_impl< ::DBResult, id_sqlite >::update_statement[] =
  "UPDATE \"DBResult\" "
  "SET "
  "\"run\"=?, "
  "\"instance\"=?, "
  "\"score\"=?, "
  "\"algorithm\"=?, "
  "\"config\"=?, "
  "\"seed\"=?, "
  "\"optimal\"=?, "
  "\"feasible\"=?, "
  "\"lower_bound\"=?, "
  "\"elapsed\"=?, "
  "\"cfg\"=? "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::DBResult, id_sqlite >::erase_statement[] =
  "DELETE FROM \"DBResult\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::DBResult, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"DBResult\".\"run\",\n"
  "\"DBResult\".\"instance\",\n"
  "\"DBResult\".\"score\",\n"
  "\"DBResult\".\"algorithm\",\n"
  "\"DBResult\".\"config\",\n"
  "\"DBResult\".\"seed\",\n"
  "\"DBResult\".\"optimal\",\n"
  "\"DBResult\".\"feasible\",\n"
  "\"DBResult\".\"lower_bound\",\n"
  "\"DBResult\".\"elapsed\",\n"
  "\"DBResult\".\"cfg\",\n"
  "\"DBResult\".\"id\"\n"
  "FROM \"DBResult\"\n"
  "LEFT JOIN \"DBConfig\" AS \"cfg\" ON \"cfg\".\"id\"=\"DBResult\".\"cfg\"";

  const char access::object_traits_impl< ::DBResult, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"DBResult\"";

  const char access::object_traits_impl< ::DBResult, id_sqlite >::table_name[] =
  "\"DBResult\"";

  void access::object_traits_impl< ::DBResult, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBResult, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;
    using sqlite::update_statement;

    callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBResult, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBResult, id_sqlite >::pointer_type
  access::object_traits_impl< ::DBResult, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBResult, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBResult, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBResult, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::DBResult, id_sqlite >::object_type >
  access::object_traits_impl< ::DBResult, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::DBResult, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // DBSolution
  //

  const char alias_traits<  ::DBResult,
    id_sqlite,
    access::object_traits_impl< ::DBSolution, id_sqlite >::res_tag>::
  table_name[] = "\"res\"";

  struct access::object_traits_impl< ::DBSolution, id_sqlite >::extra_statement_cache_type
  {
    sqlite::container_statements_impl< jobs_traits > jobs;

    extra_statement_cache_type (
      sqlite::connection& c,
      image_type&,
      id_image_type&,
      sqlite::binding& id,
      sqlite::binding&)
    : jobs (c, id)
    {
    }
  };

  // jobs
  //

  const char access::object_traits_impl< ::DBSolution, id_sqlite >::jobs_traits::
  select_statement[] =
  "SELECT "
  "\"DBSolutionJob\".\"id\" "
  "FROM \"DBSolutionJob\" "
  "WHERE \"DBSolutionJob\".\"sol\"=?";

  const char access::object_traits_impl< ::DBSolution, id_sqlite >::jobs_traits::
  insert_statement[] =
  "";

  const char access::object_traits_impl< ::DBSolution, id_sqlite >::jobs_traits::
  delete_statement[] =
  "";

  void access::object_traits_impl< ::DBSolution, id_sqlite >::jobs_traits::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace sqlite;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // value
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &d.value_value;
    b[n].is_null = &d.value_null;
  }

  void access::object_traits_impl< ::DBSolution, id_sqlite >::jobs_traits::
  grow (data_image_type& i,
        bool* t)
  {
    bool grew (false);

    // value
    //
    t[0UL] = false;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::DBSolution, id_sqlite >::jobs_traits::
  init (value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // value
    //
    {
      typedef object_traits< ::DBSolutionJob > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      if (i.value_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.value_value,
          i.value_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::DBSolution, id_sqlite >::jobs_traits::
  insert (index_type, const value_type&, void*)
  {
  }

  bool access::object_traits_impl< ::DBSolution, id_sqlite >::jobs_traits::
  select (index_type&, value_type& v, void* d)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (v, di, &sts.connection ().database ());

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());
    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::DBSolution, id_sqlite >::jobs_traits::
  delete_ (void*)
  {
  }

  void access::object_traits_impl< ::DBSolution, id_sqlite >::jobs_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());
    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = false;
    container_traits_type::load (c, more, fs);
  }

  access::object_traits_impl< ::DBSolution, id_sqlite >::id_type
  access::object_traits_impl< ::DBSolution, id_sqlite >::
  id (const id_image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::DBSolution, id_sqlite >::id_type
  access::object_traits_impl< ::DBSolution, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::DBSolution, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // res
    //
    t[0UL] = false;

    // id_
    //
    t[1UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::DBSolution, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // res
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.res_value;
    b[n].is_null = &i.res_null;
    n++;

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }
  }

  void access::object_traits_impl< ::DBSolution, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::DBSolution, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // res
    //
    {
      ::std::shared_ptr< ::DBResult > const& v =
        o.res;

      typedef object_traits< ::DBResult > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBResult > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_image (
          i.res_value,
          is_null,
          id);
        i.res_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::DBSolution, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // res
    //
    {
      ::std::shared_ptr< ::DBResult >& v =
        o.res;

      typedef object_traits< ::DBResult > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBResult > > ptr_traits;

      if (i.res_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.res_value,
          i.res_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }
  }

  void access::object_traits_impl< ::DBSolution, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::DBSolution, id_sqlite >::persist_statement[] =
  "INSERT INTO \"DBSolution\" "
  "(\"res\", "
  "\"id\") "
  "VALUES "
  "(?, ?)";

  const char access::object_traits_impl< ::DBSolution, id_sqlite >::find_statement[] =
  "SELECT "
  "\"DBSolution\".\"res\", "
  "\"DBSolution\".\"id\" "
  "FROM \"DBSolution\" "
  "WHERE \"DBSolution\".\"id\"=?";

  const char access::object_traits_impl< ::DBSolution, id_sqlite >::update_statement[] =
  "UPDATE \"DBSolution\" "
  "SET "
  "\"res\"=? "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::DBSolution, id_sqlite >::erase_statement[] =
  "DELETE FROM \"DBSolution\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::DBSolution, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"DBSolution\".\"res\",\n"
  "\"DBSolution\".\"id\"\n"
  "FROM \"DBSolution\"\n"
  "LEFT JOIN \"DBResult\" AS \"res\" ON \"res\".\"id\"=\"DBSolution\".\"res\"";

  const char access::object_traits_impl< ::DBSolution, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"DBSolution\"";

  const char access::object_traits_impl< ::DBSolution, id_sqlite >::table_name[] =
  "\"DBSolution\"";

  void access::object_traits_impl< ::DBSolution, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBSolution, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;
    using sqlite::update_statement;

    callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBSolution, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBSolution, id_sqlite >::pointer_type
  access::object_traits_impl< ::DBSolution, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBSolution, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBSolution, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBSolution, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::DBSolution, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // jobs
    //
    {
      ::std::vector< ::std::shared_ptr< ::DBSolutionJob > >& v =
        obj.jobs;

      jobs_traits::load (
        v,
        esc.jobs);
    }
  }

  result< access::object_traits_impl< ::DBSolution, id_sqlite >::object_type >
  access::object_traits_impl< ::DBSolution, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::DBSolution, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // DBSolutionJob
  //

  const char alias_traits<  ::DBSolution,
    id_sqlite,
    access::object_traits_impl< ::DBSolutionJob, id_sqlite >::sol_tag>::
  table_name[] = "\"sol\"";

  struct access::object_traits_impl< ::DBSolutionJob, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  access::object_traits_impl< ::DBSolutionJob, id_sqlite >::id_type
  access::object_traits_impl< ::DBSolutionJob, id_sqlite >::
  id (const id_image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::DBSolutionJob, id_sqlite >::id_type
  access::object_traits_impl< ::DBSolutionJob, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::DBSolutionJob, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // sol
    //
    t[0UL] = false;

    // job_id
    //
    t[1UL] = false;

    // start_time
    //
    t[2UL] = false;

    // id_
    //
    t[3UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::DBSolutionJob, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // sol
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.sol_value;
    b[n].is_null = &i.sol_null;
    n++;

    // job_id
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.job_id_value;
    b[n].is_null = &i.job_id_null;
    n++;

    // start_time
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.start_time_value;
    b[n].is_null = &i.start_time_null;
    n++;

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }
  }

  void access::object_traits_impl< ::DBSolutionJob, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::DBSolutionJob, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // sol
    //
    {
      ::std::shared_ptr< ::DBSolution > const& v =
        o.sol;

      typedef object_traits< ::DBSolution > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBSolution > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_image (
          i.sol_value,
          is_null,
          id);
        i.sol_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // job_id
    //
    {
      unsigned int const& v =
        o.job_id;

      bool is_null (false);
      sqlite::value_traits<
          unsigned int,
          sqlite::id_integer >::set_image (
        i.job_id_value,
        is_null,
        v);
      i.job_id_null = is_null;
    }

    // start_time
    //
    {
      unsigned int const& v =
        o.start_time;

      bool is_null (false);
      sqlite::value_traits<
          unsigned int,
          sqlite::id_integer >::set_image (
        i.start_time_value,
        is_null,
        v);
      i.start_time_null = is_null;
    }

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::DBSolutionJob, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // sol
    //
    {
      ::std::shared_ptr< ::DBSolution >& v =
        o.sol;

      typedef object_traits< ::DBSolution > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBSolution > > ptr_traits;

      if (i.sol_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.sol_value,
          i.sol_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // job_id
    //
    {
      unsigned int& v =
        o.job_id;

      sqlite::value_traits<
          unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.job_id_value,
        i.job_id_null);
    }

    // start_time
    //
    {
      unsigned int& v =
        o.start_time;

      sqlite::value_traits<
          unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.start_time_value,
        i.start_time_null);
    }

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }
  }

  void access::object_traits_impl< ::DBSolutionJob, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::DBSolutionJob, id_sqlite >::persist_statement[] =
  "INSERT INTO \"DBSolutionJob\" "
  "(\"sol\", "
  "\"job_id\", "
  "\"start_time\", "
  "\"id\") "
  "VALUES "
  "(?, ?, ?, ?)";

  const char access::object_traits_impl< ::DBSolutionJob, id_sqlite >::find_statement[] =
  "SELECT "
  "\"DBSolutionJob\".\"sol\", "
  "\"DBSolutionJob\".\"job_id\", "
  "\"DBSolutionJob\".\"start_time\", "
  "\"DBSolutionJob\".\"id\" "
  "FROM \"DBSolutionJob\" "
  "WHERE \"DBSolutionJob\".\"id\"=?";

  const char access::object_traits_impl< ::DBSolutionJob, id_sqlite >::update_statement[] =
  "UPDATE \"DBSolutionJob\" "
  "SET "
  "\"sol\"=?, "
  "\"job_id\"=?, "
  "\"start_time\"=? "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::DBSolutionJob, id_sqlite >::erase_statement[] =
  "DELETE FROM \"DBSolutionJob\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::DBSolutionJob, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"DBSolutionJob\".\"sol\",\n"
  "\"DBSolutionJob\".\"job_id\",\n"
  "\"DBSolutionJob\".\"start_time\",\n"
  "\"DBSolutionJob\".\"id\"\n"
  "FROM \"DBSolutionJob\"\n"
  "LEFT JOIN \"DBSolution\" AS \"sol\" ON \"sol\".\"id\"=\"DBSolutionJob\".\"sol\"";

  const char access::object_traits_impl< ::DBSolutionJob, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"DBSolutionJob\"";

  const char access::object_traits_impl< ::DBSolutionJob, id_sqlite >::table_name[] =
  "\"DBSolutionJob\"";

  void access::object_traits_impl< ::DBSolutionJob, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBSolutionJob, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;
    using sqlite::update_statement;

    callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBSolutionJob, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBSolutionJob, id_sqlite >::pointer_type
  access::object_traits_impl< ::DBSolutionJob, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBSolutionJob, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBSolutionJob, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBSolutionJob, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::DBSolutionJob, id_sqlite >::object_type >
  access::object_traits_impl< ::DBSolutionJob, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::DBSolutionJob, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // DBIntermediate
  //

  const char alias_traits<  ::DBResult,
    id_sqlite,
    access::object_traits_impl< ::DBIntermediate, id_sqlite >::res_tag>::
  table_name[] = "\"res\"";

  const char alias_traits<  ::DBSolution,
    id_sqlite,
    access::object_traits_impl< ::DBIntermediate, id_sqlite >::solution_tag>::
  table_name[] = "\"solution\"";

  struct access::object_traits_impl< ::DBIntermediate, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  access::object_traits_impl< ::DBIntermediate, id_sqlite >::id_type
  access::object_traits_impl< ::DBIntermediate, id_sqlite >::
  id (const id_image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::DBIntermediate, id_sqlite >::id_type
  access::object_traits_impl< ::DBIntermediate, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::DBIntermediate, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // res
    //
    t[0UL] = false;

    // time
    //
    t[1UL] = false;

    // iteration
    //
    t[2UL] = false;

    // costs
    //
    t[3UL] = false;

    // bound
    //
    t[4UL] = false;

    // solution
    //
    t[5UL] = false;

    // id_
    //
    t[6UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::DBIntermediate, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // res
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.res_value;
    b[n].is_null = &i.res_null;
    n++;

    // time
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.time_value;
    b[n].is_null = &i.time_null;
    n++;

    // iteration
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.iteration_value;
    b[n].is_null = &i.iteration_null;
    n++;

    // costs
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.costs_value;
    b[n].is_null = &i.costs_null;
    n++;

    // bound
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.bound_value;
    b[n].is_null = &i.bound_null;
    n++;

    // solution
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.solution_value;
    b[n].is_null = &i.solution_null;
    n++;

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }
  }

  void access::object_traits_impl< ::DBIntermediate, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::DBIntermediate, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // res
    //
    {
      ::std::shared_ptr< ::DBResult > const& v =
        o.res;

      typedef object_traits< ::DBResult > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBResult > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_image (
          i.res_value,
          is_null,
          id);
        i.res_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // time
    //
    {
      ::std::shared_ptr< double > const& v =
        o.time;

      bool is_null (true);
      sqlite::value_traits<
          ::std::shared_ptr< double >,
          sqlite::id_real >::set_image (
        i.time_value,
        is_null,
        v);
      i.time_null = is_null;
    }

    // iteration
    //
    {
      ::std::shared_ptr< unsigned int > const& v =
        o.iteration;

      bool is_null (false);
      sqlite::value_traits<
          ::std::shared_ptr< unsigned int >,
          sqlite::id_integer >::set_image (
        i.iteration_value,
        is_null,
        v);
      i.iteration_null = is_null;
    }

    // costs
    //
    {
      ::std::shared_ptr< double > const& v =
        o.costs;

      bool is_null (true);
      sqlite::value_traits<
          ::std::shared_ptr< double >,
          sqlite::id_real >::set_image (
        i.costs_value,
        is_null,
        v);
      i.costs_null = is_null;
    }

    // bound
    //
    {
      ::std::shared_ptr< double > const& v =
        o.bound;

      bool is_null (true);
      sqlite::value_traits<
          ::std::shared_ptr< double >,
          sqlite::id_real >::set_image (
        i.bound_value,
        is_null,
        v);
      i.bound_null = is_null;
    }

    // solution
    //
    {
      ::std::shared_ptr< ::DBSolution > const& v =
        o.solution;

      typedef object_traits< ::DBSolution > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBSolution > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_image (
          i.solution_value,
          is_null,
          id);
        i.solution_null = is_null;
      }
      else
        i.solution_null = true;
    }

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::DBIntermediate, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // res
    //
    {
      ::std::shared_ptr< ::DBResult >& v =
        o.res;

      typedef object_traits< ::DBResult > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBResult > > ptr_traits;

      if (i.res_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.res_value,
          i.res_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // time
    //
    {
      ::std::shared_ptr< double >& v =
        o.time;

      sqlite::value_traits<
          ::std::shared_ptr< double >,
          sqlite::id_real >::set_value (
        v,
        i.time_value,
        i.time_null);
    }

    // iteration
    //
    {
      ::std::shared_ptr< unsigned int >& v =
        o.iteration;

      sqlite::value_traits<
          ::std::shared_ptr< unsigned int >,
          sqlite::id_integer >::set_value (
        v,
        i.iteration_value,
        i.iteration_null);
    }

    // costs
    //
    {
      ::std::shared_ptr< double >& v =
        o.costs;

      sqlite::value_traits<
          ::std::shared_ptr< double >,
          sqlite::id_real >::set_value (
        v,
        i.costs_value,
        i.costs_null);
    }

    // bound
    //
    {
      ::std::shared_ptr< double >& v =
        o.bound;

      sqlite::value_traits<
          ::std::shared_ptr< double >,
          sqlite::id_real >::set_value (
        v,
        i.bound_value,
        i.bound_null);
    }

    // solution
    //
    {
      ::std::shared_ptr< ::DBSolution >& v =
        o.solution;

      typedef object_traits< ::DBSolution > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBSolution > > ptr_traits;

      if (i.solution_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.solution_value,
          i.solution_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }
  }

  void access::object_traits_impl< ::DBIntermediate, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::DBIntermediate, id_sqlite >::persist_statement[] =
  "INSERT INTO \"DBIntermediate\" "
  "(\"res\", "
  "\"time\", "
  "\"iteration\", "
  "\"costs\", "
  "\"bound\", "
  "\"solution\", "
  "\"id\") "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::DBIntermediate, id_sqlite >::find_statement[] =
  "SELECT "
  "\"DBIntermediate\".\"res\", "
  "\"DBIntermediate\".\"time\", "
  "\"DBIntermediate\".\"iteration\", "
  "\"DBIntermediate\".\"costs\", "
  "\"DBIntermediate\".\"bound\", "
  "\"DBIntermediate\".\"solution\", "
  "\"DBIntermediate\".\"id\" "
  "FROM \"DBIntermediate\" "
  "WHERE \"DBIntermediate\".\"id\"=?";

  const char access::object_traits_impl< ::DBIntermediate, id_sqlite >::update_statement[] =
  "UPDATE \"DBIntermediate\" "
  "SET "
  "\"res\"=?, "
  "\"time\"=?, "
  "\"iteration\"=?, "
  "\"costs\"=?, "
  "\"bound\"=?, "
  "\"solution\"=? "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::DBIntermediate, id_sqlite >::erase_statement[] =
  "DELETE FROM \"DBIntermediate\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::DBIntermediate, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"DBIntermediate\".\"res\",\n"
  "\"DBIntermediate\".\"time\",\n"
  "\"DBIntermediate\".\"iteration\",\n"
  "\"DBIntermediate\".\"costs\",\n"
  "\"DBIntermediate\".\"bound\",\n"
  "\"DBIntermediate\".\"solution\",\n"
  "\"DBIntermediate\".\"id\"\n"
  "FROM \"DBIntermediate\"\n"
  "LEFT JOIN \"DBResult\" AS \"res\" ON \"res\".\"id\"=\"DBIntermediate\".\"res\"\n"
  "LEFT JOIN \"DBSolution\" AS \"solution\" ON \"solution\".\"id\"=\"DBIntermediate\".\"solution\"";

  const char access::object_traits_impl< ::DBIntermediate, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"DBIntermediate\"";

  const char access::object_traits_impl< ::DBIntermediate, id_sqlite >::table_name[] =
  "\"DBIntermediate\"";

  void access::object_traits_impl< ::DBIntermediate, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBIntermediate, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;
    using sqlite::update_statement;

    callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBIntermediate, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBIntermediate, id_sqlite >::pointer_type
  access::object_traits_impl< ::DBIntermediate, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBIntermediate, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBIntermediate, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBIntermediate, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::DBIntermediate, id_sqlite >::object_type >
  access::object_traits_impl< ::DBIntermediate, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::DBIntermediate, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // DBError
  //

  struct access::object_traits_impl< ::DBError, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  access::object_traits_impl< ::DBError, id_sqlite >::id_type
  access::object_traits_impl< ::DBError, id_sqlite >::
  id (const id_image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::DBError, id_sqlite >::id_type
  access::object_traits_impl< ::DBError, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::DBError, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // timestamp
    //
    t[0UL] = false;

    // run
    //
    if (t[1UL])
    {
      i.run_value.capacity (i.run_size);
      grew = true;
    }

    // instance
    //
    if (t[2UL])
    {
      i.instance_value.capacity (i.instance_size);
      grew = true;
    }

    // algorithm
    //
    if (t[3UL])
    {
      i.algorithm_value.capacity (i.algorithm_size);
      grew = true;
    }

    // config
    //
    if (t[4UL])
    {
      i.config_value.capacity (i.config_size);
      grew = true;
    }

    // seed
    //
    t[5UL] = false;

    // fault_code
    //
    t[6UL] = false;

    // error_id
    //
    t[7UL] = false;

    // id_
    //
    t[8UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::DBError, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // timestamp
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.timestamp_value;
    b[n].is_null = &i.timestamp_null;
    n++;

    // run
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.run_value.data ();
    b[n].size = &i.run_size;
    b[n].capacity = i.run_value.capacity ();
    b[n].is_null = &i.run_null;
    n++;

    // instance
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.instance_value.data ();
    b[n].size = &i.instance_size;
    b[n].capacity = i.instance_value.capacity ();
    b[n].is_null = &i.instance_null;
    n++;

    // algorithm
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.algorithm_value.data ();
    b[n].size = &i.algorithm_size;
    b[n].capacity = i.algorithm_value.capacity ();
    b[n].is_null = &i.algorithm_null;
    n++;

    // config
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.config_value.data ();
    b[n].size = &i.config_size;
    b[n].capacity = i.config_value.capacity ();
    b[n].is_null = &i.config_null;
    n++;

    // seed
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.seed_value;
    b[n].is_null = &i.seed_null;
    n++;

    // fault_code
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.fault_code_value;
    b[n].is_null = &i.fault_code_null;
    n++;

    // error_id
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.error_id_value;
    b[n].is_null = &i.error_id_null;
    n++;

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }
  }

  void access::object_traits_impl< ::DBError, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::DBError, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // timestamp
    //
    {
      long unsigned int const& v =
        o.timestamp;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.timestamp_value,
        is_null,
        v);
      i.timestamp_null = is_null;
    }

    // run
    //
    {
      ::std::string const& v =
        o.run;

      bool is_null (false);
      std::size_t cap (i.run_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.run_value,
        i.run_size,
        is_null,
        v);
      i.run_null = is_null;
      grew = grew || (cap != i.run_value.capacity ());
    }

    // instance
    //
    {
      ::std::string const& v =
        o.instance;

      bool is_null (false);
      std::size_t cap (i.instance_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.instance_value,
        i.instance_size,
        is_null,
        v);
      i.instance_null = is_null;
      grew = grew || (cap != i.instance_value.capacity ());
    }

    // algorithm
    //
    {
      ::std::string const& v =
        o.algorithm;

      bool is_null (false);
      std::size_t cap (i.algorithm_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.algorithm_value,
        i.algorithm_size,
        is_null,
        v);
      i.algorithm_null = is_null;
      grew = grew || (cap != i.algorithm_value.capacity ());
    }

    // config
    //
    {
      ::std::string const& v =
        o.config;

      bool is_null (false);
      std::size_t cap (i.config_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.config_value,
        i.config_size,
        is_null,
        v);
      i.config_null = is_null;
      grew = grew || (cap != i.config_value.capacity ());
    }

    // seed
    //
    {
      int const& v =
        o.seed;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.seed_value,
        is_null,
        v);
      i.seed_null = is_null;
    }

    // fault_code
    //
    {
      int const& v =
        o.fault_code;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.fault_code_value,
        is_null,
        v);
      i.fault_code_null = is_null;
    }

    // error_id
    //
    {
      int const& v =
        o.error_id;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.error_id_value,
        is_null,
        v);
      i.error_id_null = is_null;
    }

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::DBError, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // timestamp
    //
    {
      long unsigned int& v =
        o.timestamp;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.timestamp_value,
        i.timestamp_null);
    }

    // run
    //
    {
      ::std::string& v =
        o.run;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.run_value,
        i.run_size,
        i.run_null);
    }

    // instance
    //
    {
      ::std::string& v =
        o.instance;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.instance_value,
        i.instance_size,
        i.instance_null);
    }

    // algorithm
    //
    {
      ::std::string& v =
        o.algorithm;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.algorithm_value,
        i.algorithm_size,
        i.algorithm_null);
    }

    // config
    //
    {
      ::std::string& v =
        o.config;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.config_value,
        i.config_size,
        i.config_null);
    }

    // seed
    //
    {
      int& v =
        o.seed;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.seed_value,
        i.seed_null);
    }

    // fault_code
    //
    {
      int& v =
        o.fault_code;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.fault_code_value,
        i.fault_code_null);
    }

    // error_id
    //
    {
      int& v =
        o.error_id;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.error_id_value,
        i.error_id_null);
    }

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }
  }

  void access::object_traits_impl< ::DBError, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::DBError, id_sqlite >::persist_statement[] =
  "INSERT INTO \"DBError\" "
  "(\"timestamp\", "
  "\"run\", "
  "\"instance\", "
  "\"algorithm\", "
  "\"config\", "
  "\"seed\", "
  "\"fault_code\", "
  "\"error_id\", "
  "\"id\") "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::DBError, id_sqlite >::find_statement[] =
  "SELECT "
  "\"DBError\".\"timestamp\", "
  "\"DBError\".\"run\", "
  "\"DBError\".\"instance\", "
  "\"DBError\".\"algorithm\", "
  "\"DBError\".\"config\", "
  "\"DBError\".\"seed\", "
  "\"DBError\".\"fault_code\", "
  "\"DBError\".\"error_id\", "
  "\"DBError\".\"id\" "
  "FROM \"DBError\" "
  "WHERE \"DBError\".\"id\"=?";

  const char access::object_traits_impl< ::DBError, id_sqlite >::update_statement[] =
  "UPDATE \"DBError\" "
  "SET "
  "\"timestamp\"=?, "
  "\"run\"=?, "
  "\"instance\"=?, "
  "\"algorithm\"=?, "
  "\"config\"=?, "
  "\"seed\"=?, "
  "\"fault_code\"=?, "
  "\"error_id\"=? "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::DBError, id_sqlite >::erase_statement[] =
  "DELETE FROM \"DBError\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::DBError, id_sqlite >::query_statement[] =
  "SELECT "
  "\"DBError\".\"timestamp\", "
  "\"DBError\".\"run\", "
  "\"DBError\".\"instance\", "
  "\"DBError\".\"algorithm\", "
  "\"DBError\".\"config\", "
  "\"DBError\".\"seed\", "
  "\"DBError\".\"fault_code\", "
  "\"DBError\".\"error_id\", "
  "\"DBError\".\"id\" "
  "FROM \"DBError\"";

  const char access::object_traits_impl< ::DBError, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"DBError\"";

  const char access::object_traits_impl< ::DBError, id_sqlite >::table_name[] =
  "\"DBError\"";

  void access::object_traits_impl< ::DBError, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBError, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;
    using sqlite::update_statement;

    callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBError, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBError, id_sqlite >::pointer_type
  access::object_traits_impl< ::DBError, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBError, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBError, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBError, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::DBError, id_sqlite >::object_type >
  access::object_traits_impl< ::DBError, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::DBError, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // DBExtendedMeasure
  //

  const char alias_traits<  ::DBResult,
    id_sqlite,
    access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::res_tag>::
  table_name[] = "\"res\"";

  struct access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::id_type
  access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::
  id (const id_image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::id_type
  access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // res
    //
    t[0UL] = false;

    // key
    //
    if (t[1UL])
    {
      i.key_value.capacity (i.key_size);
      grew = true;
    }

    // iteration
    //
    t[2UL] = false;

    // time
    //
    t[3UL] = false;

    // v_int
    //
    t[4UL] = false;

    // v_double
    //
    t[5UL] = false;

    // id_
    //
    t[6UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // res
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.res_value;
    b[n].is_null = &i.res_null;
    n++;

    // key
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.key_value.data ();
    b[n].size = &i.key_size;
    b[n].capacity = i.key_value.capacity ();
    b[n].is_null = &i.key_null;
    n++;

    // iteration
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.iteration_value;
    b[n].is_null = &i.iteration_null;
    n++;

    // time
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.time_value;
    b[n].is_null = &i.time_null;
    n++;

    // v_int
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.v_int_value;
    b[n].is_null = &i.v_int_null;
    n++;

    // v_double
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.v_double_value;
    b[n].is_null = &i.v_double_null;
    n++;

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }
  }

  void access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // res
    //
    {
      ::std::shared_ptr< ::DBResult > const& v =
        o.res;

      typedef object_traits< ::DBResult > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBResult > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_image (
          i.res_value,
          is_null,
          id);
        i.res_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // key
    //
    {
      ::std::string const& v =
        o.key;

      bool is_null (false);
      std::size_t cap (i.key_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.key_value,
        i.key_size,
        is_null,
        v);
      i.key_null = is_null;
      grew = grew || (cap != i.key_value.capacity ());
    }

    // iteration
    //
    {
      ::std::shared_ptr< unsigned int > const& v =
        o.iteration;

      bool is_null (true);
      sqlite::value_traits<
          ::std::shared_ptr< unsigned int >,
          sqlite::id_integer >::set_image (
        i.iteration_value,
        is_null,
        v);
      i.iteration_null = is_null;
    }

    // time
    //
    {
      ::std::shared_ptr< double > const& v =
        o.time;

      bool is_null (true);
      sqlite::value_traits<
          ::std::shared_ptr< double >,
          sqlite::id_real >::set_image (
        i.time_value,
        is_null,
        v);
      i.time_null = is_null;
    }

    // v_int
    //
    {
      ::std::shared_ptr< int > const& v =
        o.v_int;

      bool is_null (true);
      sqlite::value_traits<
          ::std::shared_ptr< int >,
          sqlite::id_integer >::set_image (
        i.v_int_value,
        is_null,
        v);
      i.v_int_null = is_null;
    }

    // v_double
    //
    {
      ::std::shared_ptr< double > const& v =
        o.v_double;

      bool is_null (true);
      sqlite::value_traits<
          ::std::shared_ptr< double >,
          sqlite::id_real >::set_image (
        i.v_double_value,
        is_null,
        v);
      i.v_double_null = is_null;
    }

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // res
    //
    {
      ::std::shared_ptr< ::DBResult >& v =
        o.res;

      typedef object_traits< ::DBResult > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::DBResult > > ptr_traits;

      if (i.res_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.res_value,
          i.res_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // key
    //
    {
      ::std::string& v =
        o.key;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.key_value,
        i.key_size,
        i.key_null);
    }

    // iteration
    //
    {
      ::std::shared_ptr< unsigned int >& v =
        o.iteration;

      sqlite::value_traits<
          ::std::shared_ptr< unsigned int >,
          sqlite::id_integer >::set_value (
        v,
        i.iteration_value,
        i.iteration_null);
    }

    // time
    //
    {
      ::std::shared_ptr< double >& v =
        o.time;

      sqlite::value_traits<
          ::std::shared_ptr< double >,
          sqlite::id_real >::set_value (
        v,
        i.time_value,
        i.time_null);
    }

    // v_int
    //
    {
      ::std::shared_ptr< int >& v =
        o.v_int;

      sqlite::value_traits<
          ::std::shared_ptr< int >,
          sqlite::id_integer >::set_value (
        v,
        i.v_int_value,
        i.v_int_null);
    }

    // v_double
    //
    {
      ::std::shared_ptr< double >& v =
        o.v_double;

      sqlite::value_traits<
          ::std::shared_ptr< double >,
          sqlite::id_real >::set_value (
        v,
        i.v_double_value,
        i.v_double_null);
    }

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }
  }

  void access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::persist_statement[] =
  "INSERT INTO \"DBExtendedMeasure\" "
  "(\"res\", "
  "\"key\", "
  "\"iteration\", "
  "\"time\", "
  "\"v_int\", "
  "\"v_double\", "
  "\"id\") "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::find_statement[] =
  "SELECT "
  "\"DBExtendedMeasure\".\"res\", "
  "\"DBExtendedMeasure\".\"key\", "
  "\"DBExtendedMeasure\".\"iteration\", "
  "\"DBExtendedMeasure\".\"time\", "
  "\"DBExtendedMeasure\".\"v_int\", "
  "\"DBExtendedMeasure\".\"v_double\", "
  "\"DBExtendedMeasure\".\"id\" "
  "FROM \"DBExtendedMeasure\" "
  "WHERE \"DBExtendedMeasure\".\"id\"=?";

  const char access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::update_statement[] =
  "UPDATE \"DBExtendedMeasure\" "
  "SET "
  "\"res\"=?, "
  "\"key\"=?, "
  "\"iteration\"=?, "
  "\"time\"=?, "
  "\"v_int\"=?, "
  "\"v_double\"=? "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::erase_statement[] =
  "DELETE FROM \"DBExtendedMeasure\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"DBExtendedMeasure\".\"res\",\n"
  "\"DBExtendedMeasure\".\"key\",\n"
  "\"DBExtendedMeasure\".\"iteration\",\n"
  "\"DBExtendedMeasure\".\"time\",\n"
  "\"DBExtendedMeasure\".\"v_int\",\n"
  "\"DBExtendedMeasure\".\"v_double\",\n"
  "\"DBExtendedMeasure\".\"id\"\n"
  "FROM \"DBExtendedMeasure\"\n"
  "LEFT JOIN \"DBResult\" AS \"res\" ON \"res\".\"id\"=\"DBExtendedMeasure\".\"res\"";

  const char access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"DBExtendedMeasure\"";

  const char access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::table_name[] =
  "\"DBExtendedMeasure\"";

  void access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;
    using sqlite::update_statement;

    callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::pointer_type
  access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::object_type >
  access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::DBExtendedMeasure, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }
}

#include <odb/post.hxx>
