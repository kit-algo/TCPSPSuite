// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/database.hxx>

namespace odb
{
  // DBConfigKV
  //

  inline
  access::object_traits< ::DBConfigKV >::id_type
  access::object_traits< ::DBConfigKV >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::DBConfigKV >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::DBConfigKV >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits_impl< ::DBConfigKV, id_common >::
  persist (database& db, object_type& o)
  {
    function_table[db.id ()]->persist (db, o);
  }

  inline
  access::object_traits_impl< ::DBConfigKV, id_common >::pointer_type
  access::object_traits_impl< ::DBConfigKV, id_common >::
  find (database& db, const id_type& id)
  {
    return function_table[db.id ()]->find1 (db, id);
  }

  inline
  bool access::object_traits_impl< ::DBConfigKV, id_common >::
  find (database& db, const id_type& id, object_type& o)
  {
    return function_table[db.id ()]->find2 (db, id, o);
  }

  inline
  bool access::object_traits_impl< ::DBConfigKV, id_common >::
  reload (database& db, object_type& o)
  {
    return function_table[db.id ()]->reload (db, o);
  }

  inline
  void access::object_traits_impl< ::DBConfigKV, id_common >::
  update (database& db, const object_type& o)
  {
    function_table[db.id ()]->update (db, o);
  }

  inline
  void access::object_traits_impl< ::DBConfigKV, id_common >::
  erase (database& db, const id_type& id)
  {
    function_table[db.id ()]->erase1 (db, id);
  }

  inline
  void access::object_traits_impl< ::DBConfigKV, id_common >::
  erase (database& db, const object_type& o)
  {
    function_table[db.id ()]->erase2 (db, o);
  }

  inline
  result< access::object_traits_impl< ::DBConfigKV, id_common >::object_type >
  access::object_traits_impl< ::DBConfigKV, id_common >::
  query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->query (db, q);
  }

  inline
  unsigned long long access::object_traits_impl< ::DBConfigKV, id_common >::
  erase_query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->erase_query (db, q);
  }

  // DBConfig
  //

  inline
  access::object_traits< ::DBConfig >::id_type
  access::object_traits< ::DBConfig >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::DBConfig >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::DBConfig >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits_impl< ::DBConfig, id_common >::
  persist (database& db, object_type& o)
  {
    function_table[db.id ()]->persist (db, o);
  }

  inline
  access::object_traits_impl< ::DBConfig, id_common >::pointer_type
  access::object_traits_impl< ::DBConfig, id_common >::
  find (database& db, const id_type& id)
  {
    return function_table[db.id ()]->find1 (db, id);
  }

  inline
  bool access::object_traits_impl< ::DBConfig, id_common >::
  find (database& db, const id_type& id, object_type& o)
  {
    return function_table[db.id ()]->find2 (db, id, o);
  }

  inline
  bool access::object_traits_impl< ::DBConfig, id_common >::
  reload (database& db, object_type& o)
  {
    return function_table[db.id ()]->reload (db, o);
  }

  inline
  void access::object_traits_impl< ::DBConfig, id_common >::
  update (database& db, const object_type& o)
  {
    function_table[db.id ()]->update (db, o);
  }

  inline
  void access::object_traits_impl< ::DBConfig, id_common >::
  erase (database& db, const id_type& id)
  {
    function_table[db.id ()]->erase1 (db, id);
  }

  inline
  void access::object_traits_impl< ::DBConfig, id_common >::
  erase (database& db, const object_type& o)
  {
    function_table[db.id ()]->erase2 (db, o);
  }

  inline
  result< access::object_traits_impl< ::DBConfig, id_common >::object_type >
  access::object_traits_impl< ::DBConfig, id_common >::
  query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->query (db, q);
  }

  inline
  unsigned long long access::object_traits_impl< ::DBConfig, id_common >::
  erase_query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->erase_query (db, q);
  }

  // DBInvocation
  //

  inline
  access::object_traits< ::DBInvocation >::id_type
  access::object_traits< ::DBInvocation >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::DBInvocation >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::DBInvocation >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits_impl< ::DBInvocation, id_common >::
  persist (database& db, object_type& o)
  {
    function_table[db.id ()]->persist (db, o);
  }

  inline
  access::object_traits_impl< ::DBInvocation, id_common >::pointer_type
  access::object_traits_impl< ::DBInvocation, id_common >::
  find (database& db, const id_type& id)
  {
    return function_table[db.id ()]->find1 (db, id);
  }

  inline
  bool access::object_traits_impl< ::DBInvocation, id_common >::
  find (database& db, const id_type& id, object_type& o)
  {
    return function_table[db.id ()]->find2 (db, id, o);
  }

  inline
  bool access::object_traits_impl< ::DBInvocation, id_common >::
  reload (database& db, object_type& o)
  {
    return function_table[db.id ()]->reload (db, o);
  }

  inline
  void access::object_traits_impl< ::DBInvocation, id_common >::
  update (database& db, const object_type& o)
  {
    function_table[db.id ()]->update (db, o);
  }

  inline
  void access::object_traits_impl< ::DBInvocation, id_common >::
  erase (database& db, const id_type& id)
  {
    function_table[db.id ()]->erase1 (db, id);
  }

  inline
  void access::object_traits_impl< ::DBInvocation, id_common >::
  erase (database& db, const object_type& o)
  {
    function_table[db.id ()]->erase2 (db, o);
  }

  inline
  result< access::object_traits_impl< ::DBInvocation, id_common >::object_type >
  access::object_traits_impl< ::DBInvocation, id_common >::
  query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->query (db, q);
  }

  inline
  unsigned long long access::object_traits_impl< ::DBInvocation, id_common >::
  erase_query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->erase_query (db, q);
  }

  // DBResult
  //

  inline
  access::object_traits< ::DBResult >::id_type
  access::object_traits< ::DBResult >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::DBResult >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::DBResult >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits_impl< ::DBResult, id_common >::
  persist (database& db, object_type& o)
  {
    function_table[db.id ()]->persist (db, o);
  }

  inline
  access::object_traits_impl< ::DBResult, id_common >::pointer_type
  access::object_traits_impl< ::DBResult, id_common >::
  find (database& db, const id_type& id)
  {
    return function_table[db.id ()]->find1 (db, id);
  }

  inline
  bool access::object_traits_impl< ::DBResult, id_common >::
  find (database& db, const id_type& id, object_type& o)
  {
    return function_table[db.id ()]->find2 (db, id, o);
  }

  inline
  bool access::object_traits_impl< ::DBResult, id_common >::
  reload (database& db, object_type& o)
  {
    return function_table[db.id ()]->reload (db, o);
  }

  inline
  void access::object_traits_impl< ::DBResult, id_common >::
  update (database& db, const object_type& o)
  {
    function_table[db.id ()]->update (db, o);
  }

  inline
  void access::object_traits_impl< ::DBResult, id_common >::
  erase (database& db, const id_type& id)
  {
    function_table[db.id ()]->erase1 (db, id);
  }

  inline
  void access::object_traits_impl< ::DBResult, id_common >::
  erase (database& db, const object_type& o)
  {
    function_table[db.id ()]->erase2 (db, o);
  }

  inline
  result< access::object_traits_impl< ::DBResult, id_common >::object_type >
  access::object_traits_impl< ::DBResult, id_common >::
  query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->query (db, q);
  }

  inline
  unsigned long long access::object_traits_impl< ::DBResult, id_common >::
  erase_query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->erase_query (db, q);
  }

  // DBResourcesInfo
  //

  inline
  access::object_traits< ::DBResourcesInfo >::id_type
  access::object_traits< ::DBResourcesInfo >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::DBResourcesInfo >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::DBResourcesInfo >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits_impl< ::DBResourcesInfo, id_common >::
  persist (database& db, object_type& o)
  {
    function_table[db.id ()]->persist (db, o);
  }

  inline
  access::object_traits_impl< ::DBResourcesInfo, id_common >::pointer_type
  access::object_traits_impl< ::DBResourcesInfo, id_common >::
  find (database& db, const id_type& id)
  {
    return function_table[db.id ()]->find1 (db, id);
  }

  inline
  bool access::object_traits_impl< ::DBResourcesInfo, id_common >::
  find (database& db, const id_type& id, object_type& o)
  {
    return function_table[db.id ()]->find2 (db, id, o);
  }

  inline
  bool access::object_traits_impl< ::DBResourcesInfo, id_common >::
  reload (database& db, object_type& o)
  {
    return function_table[db.id ()]->reload (db, o);
  }

  inline
  void access::object_traits_impl< ::DBResourcesInfo, id_common >::
  update (database& db, const object_type& o)
  {
    function_table[db.id ()]->update (db, o);
  }

  inline
  void access::object_traits_impl< ::DBResourcesInfo, id_common >::
  erase (database& db, const id_type& id)
  {
    function_table[db.id ()]->erase1 (db, id);
  }

  inline
  void access::object_traits_impl< ::DBResourcesInfo, id_common >::
  erase (database& db, const object_type& o)
  {
    function_table[db.id ()]->erase2 (db, o);
  }

  inline
  result< access::object_traits_impl< ::DBResourcesInfo, id_common >::object_type >
  access::object_traits_impl< ::DBResourcesInfo, id_common >::
  query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->query (db, q);
  }

  inline
  unsigned long long access::object_traits_impl< ::DBResourcesInfo, id_common >::
  erase_query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->erase_query (db, q);
  }

  // DBPapiMeasurement
  //

  inline
  access::object_traits< ::DBPapiMeasurement >::id_type
  access::object_traits< ::DBPapiMeasurement >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::DBPapiMeasurement >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::DBPapiMeasurement >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits_impl< ::DBPapiMeasurement, id_common >::
  persist (database& db, object_type& o)
  {
    function_table[db.id ()]->persist (db, o);
  }

  inline
  access::object_traits_impl< ::DBPapiMeasurement, id_common >::pointer_type
  access::object_traits_impl< ::DBPapiMeasurement, id_common >::
  find (database& db, const id_type& id)
  {
    return function_table[db.id ()]->find1 (db, id);
  }

  inline
  bool access::object_traits_impl< ::DBPapiMeasurement, id_common >::
  find (database& db, const id_type& id, object_type& o)
  {
    return function_table[db.id ()]->find2 (db, id, o);
  }

  inline
  bool access::object_traits_impl< ::DBPapiMeasurement, id_common >::
  reload (database& db, object_type& o)
  {
    return function_table[db.id ()]->reload (db, o);
  }

  inline
  void access::object_traits_impl< ::DBPapiMeasurement, id_common >::
  update (database& db, const object_type& o)
  {
    function_table[db.id ()]->update (db, o);
  }

  inline
  void access::object_traits_impl< ::DBPapiMeasurement, id_common >::
  erase (database& db, const id_type& id)
  {
    function_table[db.id ()]->erase1 (db, id);
  }

  inline
  void access::object_traits_impl< ::DBPapiMeasurement, id_common >::
  erase (database& db, const object_type& o)
  {
    function_table[db.id ()]->erase2 (db, o);
  }

  inline
  result< access::object_traits_impl< ::DBPapiMeasurement, id_common >::object_type >
  access::object_traits_impl< ::DBPapiMeasurement, id_common >::
  query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->query (db, q);
  }

  inline
  unsigned long long access::object_traits_impl< ::DBPapiMeasurement, id_common >::
  erase_query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->erase_query (db, q);
  }

  // DBSolution
  //

  inline
  access::object_traits< ::DBSolution >::id_type
  access::object_traits< ::DBSolution >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::DBSolution >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::DBSolution >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits_impl< ::DBSolution, id_common >::
  persist (database& db, object_type& o)
  {
    function_table[db.id ()]->persist (db, o);
  }

  inline
  access::object_traits_impl< ::DBSolution, id_common >::pointer_type
  access::object_traits_impl< ::DBSolution, id_common >::
  find (database& db, const id_type& id)
  {
    return function_table[db.id ()]->find1 (db, id);
  }

  inline
  bool access::object_traits_impl< ::DBSolution, id_common >::
  find (database& db, const id_type& id, object_type& o)
  {
    return function_table[db.id ()]->find2 (db, id, o);
  }

  inline
  bool access::object_traits_impl< ::DBSolution, id_common >::
  reload (database& db, object_type& o)
  {
    return function_table[db.id ()]->reload (db, o);
  }

  inline
  void access::object_traits_impl< ::DBSolution, id_common >::
  update (database& db, const object_type& o)
  {
    function_table[db.id ()]->update (db, o);
  }

  inline
  void access::object_traits_impl< ::DBSolution, id_common >::
  erase (database& db, const id_type& id)
  {
    function_table[db.id ()]->erase1 (db, id);
  }

  inline
  void access::object_traits_impl< ::DBSolution, id_common >::
  erase (database& db, const object_type& o)
  {
    function_table[db.id ()]->erase2 (db, o);
  }

  inline
  result< access::object_traits_impl< ::DBSolution, id_common >::object_type >
  access::object_traits_impl< ::DBSolution, id_common >::
  query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->query (db, q);
  }

  inline
  unsigned long long access::object_traits_impl< ::DBSolution, id_common >::
  erase_query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->erase_query (db, q);
  }

  // DBSolutionJob
  //

  inline
  access::object_traits< ::DBSolutionJob >::id_type
  access::object_traits< ::DBSolutionJob >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::DBSolutionJob >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::DBSolutionJob >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits_impl< ::DBSolutionJob, id_common >::
  persist (database& db, object_type& o)
  {
    function_table[db.id ()]->persist (db, o);
  }

  inline
  access::object_traits_impl< ::DBSolutionJob, id_common >::pointer_type
  access::object_traits_impl< ::DBSolutionJob, id_common >::
  find (database& db, const id_type& id)
  {
    return function_table[db.id ()]->find1 (db, id);
  }

  inline
  bool access::object_traits_impl< ::DBSolutionJob, id_common >::
  find (database& db, const id_type& id, object_type& o)
  {
    return function_table[db.id ()]->find2 (db, id, o);
  }

  inline
  bool access::object_traits_impl< ::DBSolutionJob, id_common >::
  reload (database& db, object_type& o)
  {
    return function_table[db.id ()]->reload (db, o);
  }

  inline
  void access::object_traits_impl< ::DBSolutionJob, id_common >::
  update (database& db, const object_type& o)
  {
    function_table[db.id ()]->update (db, o);
  }

  inline
  void access::object_traits_impl< ::DBSolutionJob, id_common >::
  erase (database& db, const id_type& id)
  {
    function_table[db.id ()]->erase1 (db, id);
  }

  inline
  void access::object_traits_impl< ::DBSolutionJob, id_common >::
  erase (database& db, const object_type& o)
  {
    function_table[db.id ()]->erase2 (db, o);
  }

  inline
  result< access::object_traits_impl< ::DBSolutionJob, id_common >::object_type >
  access::object_traits_impl< ::DBSolutionJob, id_common >::
  query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->query (db, q);
  }

  inline
  unsigned long long access::object_traits_impl< ::DBSolutionJob, id_common >::
  erase_query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->erase_query (db, q);
  }

  // DBIntermediate
  //

  inline
  access::object_traits< ::DBIntermediate >::id_type
  access::object_traits< ::DBIntermediate >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::DBIntermediate >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::DBIntermediate >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits_impl< ::DBIntermediate, id_common >::
  persist (database& db, object_type& o)
  {
    function_table[db.id ()]->persist (db, o);
  }

  inline
  access::object_traits_impl< ::DBIntermediate, id_common >::pointer_type
  access::object_traits_impl< ::DBIntermediate, id_common >::
  find (database& db, const id_type& id)
  {
    return function_table[db.id ()]->find1 (db, id);
  }

  inline
  bool access::object_traits_impl< ::DBIntermediate, id_common >::
  find (database& db, const id_type& id, object_type& o)
  {
    return function_table[db.id ()]->find2 (db, id, o);
  }

  inline
  bool access::object_traits_impl< ::DBIntermediate, id_common >::
  reload (database& db, object_type& o)
  {
    return function_table[db.id ()]->reload (db, o);
  }

  inline
  void access::object_traits_impl< ::DBIntermediate, id_common >::
  update (database& db, const object_type& o)
  {
    function_table[db.id ()]->update (db, o);
  }

  inline
  void access::object_traits_impl< ::DBIntermediate, id_common >::
  erase (database& db, const id_type& id)
  {
    function_table[db.id ()]->erase1 (db, id);
  }

  inline
  void access::object_traits_impl< ::DBIntermediate, id_common >::
  erase (database& db, const object_type& o)
  {
    function_table[db.id ()]->erase2 (db, o);
  }

  inline
  result< access::object_traits_impl< ::DBIntermediate, id_common >::object_type >
  access::object_traits_impl< ::DBIntermediate, id_common >::
  query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->query (db, q);
  }

  inline
  unsigned long long access::object_traits_impl< ::DBIntermediate, id_common >::
  erase_query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->erase_query (db, q);
  }

  // DBError
  //

  inline
  access::object_traits< ::DBError >::id_type
  access::object_traits< ::DBError >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::DBError >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::DBError >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits_impl< ::DBError, id_common >::
  persist (database& db, object_type& o)
  {
    function_table[db.id ()]->persist (db, o);
  }

  inline
  access::object_traits_impl< ::DBError, id_common >::pointer_type
  access::object_traits_impl< ::DBError, id_common >::
  find (database& db, const id_type& id)
  {
    return function_table[db.id ()]->find1 (db, id);
  }

  inline
  bool access::object_traits_impl< ::DBError, id_common >::
  find (database& db, const id_type& id, object_type& o)
  {
    return function_table[db.id ()]->find2 (db, id, o);
  }

  inline
  bool access::object_traits_impl< ::DBError, id_common >::
  reload (database& db, object_type& o)
  {
    return function_table[db.id ()]->reload (db, o);
  }

  inline
  void access::object_traits_impl< ::DBError, id_common >::
  update (database& db, const object_type& o)
  {
    function_table[db.id ()]->update (db, o);
  }

  inline
  void access::object_traits_impl< ::DBError, id_common >::
  erase (database& db, const id_type& id)
  {
    function_table[db.id ()]->erase1 (db, id);
  }

  inline
  void access::object_traits_impl< ::DBError, id_common >::
  erase (database& db, const object_type& o)
  {
    function_table[db.id ()]->erase2 (db, o);
  }

  inline
  result< access::object_traits_impl< ::DBError, id_common >::object_type >
  access::object_traits_impl< ::DBError, id_common >::
  query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->query (db, q);
  }

  inline
  unsigned long long access::object_traits_impl< ::DBError, id_common >::
  erase_query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->erase_query (db, q);
  }

  // DBExtendedMeasure
  //

  inline
  access::object_traits< ::DBExtendedMeasure >::id_type
  access::object_traits< ::DBExtendedMeasure >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::DBExtendedMeasure >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::DBExtendedMeasure >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits_impl< ::DBExtendedMeasure, id_common >::
  persist (database& db, object_type& o)
  {
    function_table[db.id ()]->persist (db, o);
  }

  inline
  access::object_traits_impl< ::DBExtendedMeasure, id_common >::pointer_type
  access::object_traits_impl< ::DBExtendedMeasure, id_common >::
  find (database& db, const id_type& id)
  {
    return function_table[db.id ()]->find1 (db, id);
  }

  inline
  bool access::object_traits_impl< ::DBExtendedMeasure, id_common >::
  find (database& db, const id_type& id, object_type& o)
  {
    return function_table[db.id ()]->find2 (db, id, o);
  }

  inline
  bool access::object_traits_impl< ::DBExtendedMeasure, id_common >::
  reload (database& db, object_type& o)
  {
    return function_table[db.id ()]->reload (db, o);
  }

  inline
  void access::object_traits_impl< ::DBExtendedMeasure, id_common >::
  update (database& db, const object_type& o)
  {
    function_table[db.id ()]->update (db, o);
  }

  inline
  void access::object_traits_impl< ::DBExtendedMeasure, id_common >::
  erase (database& db, const id_type& id)
  {
    function_table[db.id ()]->erase1 (db, id);
  }

  inline
  void access::object_traits_impl< ::DBExtendedMeasure, id_common >::
  erase (database& db, const object_type& o)
  {
    function_table[db.id ()]->erase2 (db, o);
  }

  inline
  result< access::object_traits_impl< ::DBExtendedMeasure, id_common >::object_type >
  access::object_traits_impl< ::DBExtendedMeasure, id_common >::
  query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->query (db, q);
  }

  inline
  unsigned long long access::object_traits_impl< ::DBExtendedMeasure, id_common >::
  erase_query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->erase_query (db, q);
  }

  // ConfigGetterView
  //

  inline
  void access::view_traits< ::ConfigGetterView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  result< access::view_traits_impl< ::ConfigGetterView, id_common >::view_type >
  access::view_traits_impl< ::ConfigGetterView, id_common >::
  query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->query (db, q);
  }
}

