// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include <odb/database.hxx>
#include <odb/schema-catalog-impl.hxx>

#include <odb/details/unused.hxx>

namespace odb
{
  static bool
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          return true;
        }
        case 2:
        {
          db.execute ("DROP TABLE IF EXISTS \"DBExtendedMeasure\"");
          db.execute ("DROP TABLE IF EXISTS \"DBError\"");
          db.execute ("DROP TABLE IF EXISTS \"DBIntermediate\"");
          db.execute ("DROP TABLE IF EXISTS \"DBSolutionJob\"");
          db.execute ("DROP TABLE IF EXISTS \"DBSolution\"");
          db.execute ("DROP TABLE IF EXISTS \"DBResult\"");
          db.execute ("DROP TABLE IF EXISTS \"DBConfig\"");
          db.execute ("DROP TABLE IF EXISTS \"DBConfigKV\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"DBConfigKV\" (\n"
                      "  \"cfg\" INTEGER NOT NULL,\n"
                      "  \"key\" TEXT NOT NULL,\n"
                      "  \"value\" TEXT NOT NULL,\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  CONSTRAINT \"cfg_fk\"\n"
                      "    FOREIGN KEY (\"cfg\")\n"
                      "    REFERENCES \"DBConfig\" (\"id\")\n"
                      "    DEFERRABLE INITIALLY DEFERRED)");
          db.execute ("CREATE TABLE \"DBConfig\" (\n"
                      "  \"name\" TEXT NOT NULL,\n"
                      "  \"time_limit\" INTEGER NULL,\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT)");
          db.execute ("CREATE UNIQUE INDEX \"DBConfig_name_i\"\n"
                      "  ON \"DBConfig\" (\"name\")");
          db.execute ("CREATE TABLE \"DBResult\" (\n"
                      "  \"run\" TEXT NOT NULL,\n"
                      "  \"instance\" TEXT NOT NULL,\n"
                      "  \"score\" REAL NULL,\n"
                      "  \"algorithm\" TEXT NOT NULL,\n"
                      "  \"config\" TEXT NOT NULL,\n"
                      "  \"seed\" INTEGER NOT NULL,\n"
                      "  \"optimal\" INTEGER NOT NULL,\n"
                      "  \"feasible\" INTEGER NOT NULL,\n"
                      "  \"lower_bound\" REAL NULL,\n"
                      "  \"elapsed\" REAL NULL,\n"
                      "  \"cfg\" INTEGER NOT NULL,\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  CONSTRAINT \"cfg_fk\"\n"
                      "    FOREIGN KEY (\"cfg\")\n"
                      "    REFERENCES \"DBConfig\" (\"id\")\n"
                      "    DEFERRABLE INITIALLY DEFERRED)");
          db.execute ("CREATE TABLE \"DBSolution\" (\n"
                      "  \"res\" INTEGER NOT NULL,\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  CONSTRAINT \"res_fk\"\n"
                      "    FOREIGN KEY (\"res\")\n"
                      "    REFERENCES \"DBResult\" (\"id\")\n"
                      "    DEFERRABLE INITIALLY DEFERRED)");
          db.execute ("CREATE TABLE \"DBSolutionJob\" (\n"
                      "  \"sol\" INTEGER NOT NULL,\n"
                      "  \"job_id\" INTEGER NOT NULL,\n"
                      "  \"start_time\" INTEGER NOT NULL,\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  CONSTRAINT \"sol_fk\"\n"
                      "    FOREIGN KEY (\"sol\")\n"
                      "    REFERENCES \"DBSolution\" (\"id\")\n"
                      "    DEFERRABLE INITIALLY DEFERRED)");
          db.execute ("CREATE TABLE \"DBIntermediate\" (\n"
                      "  \"res\" INTEGER NOT NULL,\n"
                      "  \"time\" REAL NULL,\n"
                      "  \"iteration\" INTEGER NOT NULL,\n"
                      "  \"costs\" REAL NULL,\n"
                      "  \"bound\" REAL NULL,\n"
                      "  \"solution\" INTEGER NULL,\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  CONSTRAINT \"res_fk\"\n"
                      "    FOREIGN KEY (\"res\")\n"
                      "    REFERENCES \"DBResult\" (\"id\")\n"
                      "    DEFERRABLE INITIALLY DEFERRED,\n"
                      "  CONSTRAINT \"solution_fk\"\n"
                      "    FOREIGN KEY (\"solution\")\n"
                      "    REFERENCES \"DBSolution\" (\"id\")\n"
                      "    DEFERRABLE INITIALLY DEFERRED)");
          db.execute ("CREATE TABLE \"DBError\" (\n"
                      "  \"timestamp\" INTEGER NOT NULL,\n"
                      "  \"run\" TEXT NOT NULL,\n"
                      "  \"instance\" TEXT NOT NULL,\n"
                      "  \"algorithm\" TEXT NOT NULL,\n"
                      "  \"config\" TEXT NOT NULL,\n"
                      "  \"seed\" INTEGER NOT NULL,\n"
                      "  \"fault_code\" INTEGER NOT NULL,\n"
                      "  \"error_id\" INTEGER NOT NULL,\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT)");
          db.execute ("CREATE TABLE \"DBExtendedMeasure\" (\n"
                      "  \"res\" INTEGER NOT NULL,\n"
                      "  \"key\" TEXT NOT NULL,\n"
                      "  \"iteration\" INTEGER NULL,\n"
                      "  \"time\" REAL NULL,\n"
                      "  \"v_int\" INTEGER NULL,\n"
                      "  \"v_double\" REAL NULL,\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  CONSTRAINT \"res_fk\"\n"
                      "    FOREIGN KEY (\"res\")\n"
                      "    REFERENCES \"DBResult\" (\"id\")\n"
                      "    DEFERRABLE INITIALLY DEFERRED)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_create_entry
  create_schema_entry_ (
    id_sqlite,
    "",
    &create_schema);
}

#include <odb/post.hxx>
