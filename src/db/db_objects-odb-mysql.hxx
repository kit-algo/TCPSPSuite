// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef DB_OBJECTS_ODB_MYSQL_HXX
#define DB_OBJECTS_ODB_MYSQL_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "db_objects.hpp"

#include "db_objects-odb.hxx"

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/binding.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>
#include <odb/mysql/query-dynamic.hxx>

namespace odb
{
  // DBConfigKV
  //
  template <typename A>
  struct pointer_query_columns< ::DBConfigKV, id_mysql, A >
  {
    // cfg
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    cfg_type_;

    static const cfg_type_ cfg;

    // key
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    key_type_;

    static const key_type_ key;

    // value
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    value_type_;

    static const value_type_ value;

    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;
  };

#ifdef ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  const typename pointer_query_columns< ::DBConfigKV, id_mysql, A >::cfg_type_
  pointer_query_columns< ::DBConfigKV, id_mysql, A >::
  cfg (pointer_query_columns< ::DBConfigKV, id_common, typename A::common_traits >::cfg,
       A::table_name, "`cfg`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBConfigKV, id_mysql, A >::key_type_
  pointer_query_columns< ::DBConfigKV, id_mysql, A >::
  key (pointer_query_columns< ::DBConfigKV, id_common, typename A::common_traits >::key,
       A::table_name, "`key`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBConfigKV, id_mysql, A >::value_type_
  pointer_query_columns< ::DBConfigKV, id_mysql, A >::
  value (pointer_query_columns< ::DBConfigKV, id_common, typename A::common_traits >::value,
         A::table_name, "`value`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBConfigKV, id_mysql, A >::id_type_
  pointer_query_columns< ::DBConfigKV, id_mysql, A >::
  id (pointer_query_columns< ::DBConfigKV, id_common, typename A::common_traits >::id,
      A::table_name, "`id`", 0);

#endif // ODB_MYSQL_QUERY_COLUMNS_DEF

  template <>
  class access::object_traits_impl< ::DBConfigKV, id_mysql >:
    public access::object_traits< ::DBConfigKV >
  {
    public:
    typedef access::object_traits_impl< ::DBConfigKV, id_common > common_traits;

    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // cfg
      //
      unsigned long long cfg_value;
      my_bool cfg_null;

      // key
      //
      details::buffer key_value;
      unsigned long key_size;
      my_bool key_null;

      // value
      //
      details::buffer value_value;
      unsigned long value_size;
      my_bool value_null;

      // id_
      //
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static result<object_type>
    query (database&, const odb::query_base&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const odb::query_base&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  // DBConfig
  //
  template <typename A>
  struct query_columns< ::DBConfig, id_mysql, A >
  {
    // name
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    name_type_;

    static const name_type_ name;

    // time_limit
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    time_limit_type_;

    static const time_limit_type_ time_limit;

    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;
  };

#ifdef ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  const typename query_columns< ::DBConfig, id_mysql, A >::name_type_
  query_columns< ::DBConfig, id_mysql, A >::
  name (query_columns< ::DBConfig, id_common, typename A::common_traits >::name,
        A::table_name, "`name`", 0);

  template <typename A>
  const typename query_columns< ::DBConfig, id_mysql, A >::time_limit_type_
  query_columns< ::DBConfig, id_mysql, A >::
  time_limit (query_columns< ::DBConfig, id_common, typename A::common_traits >::time_limit,
              A::table_name, "`time_limit`", 0);

  template <typename A>
  const typename query_columns< ::DBConfig, id_mysql, A >::id_type_
  query_columns< ::DBConfig, id_mysql, A >::
  id (query_columns< ::DBConfig, id_common, typename A::common_traits >::id,
      A::table_name, "`id`", 0);

#endif // ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  struct pointer_query_columns< ::DBConfig, id_mysql, A >:
    query_columns< ::DBConfig, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::DBConfig, id_mysql >:
    public access::object_traits< ::DBConfig >
  {
    public:
    typedef access::object_traits_impl< ::DBConfig, id_common > common_traits;

    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // name
      //
      details::buffer name_value;
      unsigned long name_size;
      my_bool name_null;

      // time_limit
      //
      unsigned int time_limit_value;
      my_bool time_limit_null;

      // id_
      //
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // entries
    //
    struct entries_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::std::shared_ptr< ::DBConfigKV > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mysql::container_statements< entries_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        unsigned long long value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      load (container_type&,
            statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static result<object_type>
    query (database&, const odb::query_base&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const odb::query_base&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  // DBInvocation
  //
  template <typename A>
  struct query_columns< ::DBInvocation, id_mysql, A >
  {
    // cmdline
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    cmdline_type_;

    static const cmdline_type_ cmdline;

    // git_revision
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    git_revision_type_;

    static const git_revision_type_ git_revision;

    // hostname
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    hostname_type_;

    static const hostname_type_ hostname;

    // time
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    time_type_;

    static const time_type_ time;

    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;
  };

#ifdef ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  const typename query_columns< ::DBInvocation, id_mysql, A >::cmdline_type_
  query_columns< ::DBInvocation, id_mysql, A >::
  cmdline (query_columns< ::DBInvocation, id_common, typename A::common_traits >::cmdline,
           A::table_name, "`cmdline`", 0);

  template <typename A>
  const typename query_columns< ::DBInvocation, id_mysql, A >::git_revision_type_
  query_columns< ::DBInvocation, id_mysql, A >::
  git_revision (query_columns< ::DBInvocation, id_common, typename A::common_traits >::git_revision,
                A::table_name, "`git_revision`", 0);

  template <typename A>
  const typename query_columns< ::DBInvocation, id_mysql, A >::hostname_type_
  query_columns< ::DBInvocation, id_mysql, A >::
  hostname (query_columns< ::DBInvocation, id_common, typename A::common_traits >::hostname,
            A::table_name, "`hostname`", 0);

  template <typename A>
  const typename query_columns< ::DBInvocation, id_mysql, A >::time_type_
  query_columns< ::DBInvocation, id_mysql, A >::
  time (query_columns< ::DBInvocation, id_common, typename A::common_traits >::time,
        A::table_name, "`time`", 0);

  template <typename A>
  const typename query_columns< ::DBInvocation, id_mysql, A >::id_type_
  query_columns< ::DBInvocation, id_mysql, A >::
  id (query_columns< ::DBInvocation, id_common, typename A::common_traits >::id,
      A::table_name, "`id`", 0);

#endif // ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  struct pointer_query_columns< ::DBInvocation, id_mysql, A >:
    query_columns< ::DBInvocation, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::DBInvocation, id_mysql >:
    public access::object_traits< ::DBInvocation >
  {
    public:
    typedef access::object_traits_impl< ::DBInvocation, id_common > common_traits;

    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // cmdline
      //
      details::buffer cmdline_value;
      unsigned long cmdline_size;
      my_bool cmdline_null;

      // git_revision
      //
      details::buffer git_revision_value;
      unsigned long git_revision_size;
      my_bool git_revision_null;

      // hostname
      //
      details::buffer hostname_value;
      unsigned long hostname_size;
      my_bool hostname_null;

      // time
      //
      unsigned long long time_value;
      my_bool time_null;

      // id_
      //
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // results
    //
    struct results_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::std::shared_ptr< ::DBResult > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mysql::container_statements< results_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        unsigned long long value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      load (container_type&,
            statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 5UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static result<object_type>
    query (database&, const odb::query_base&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const odb::query_base&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  // DBResult
  //
  template <typename A>
  struct pointer_query_columns< ::DBResult, id_mysql, A >
  {
    // run
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    run_type_;

    static const run_type_ run;

    // instance
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    instance_type_;

    static const instance_type_ instance;

    // score
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    score_type_;

    static const score_type_ score;

    // algorithm
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    algorithm_type_;

    static const algorithm_type_ algorithm;

    // config
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    config_type_;

    static const config_type_ config;

    // seed
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        int,
        mysql::id_long >::query_type,
      mysql::id_long >
    seed_type_;

    static const seed_type_ seed;

    // optimal
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    optimal_type_;

    static const optimal_type_ optimal;

    // feasible
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    feasible_type_;

    static const feasible_type_ feasible;

    // lower_bound
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    lower_bound_type_;

    static const lower_bound_type_ lower_bound;

    // elapsed
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    elapsed_type_;

    static const elapsed_type_ elapsed;

    // time
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    time_type_;

    static const time_type_ time;

    // invocation
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    invocation_type_;

    static const invocation_type_ invocation;

    // cfg
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    cfg_type_;

    static const cfg_type_ cfg;

    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;
  };

#ifdef ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  const typename pointer_query_columns< ::DBResult, id_mysql, A >::run_type_
  pointer_query_columns< ::DBResult, id_mysql, A >::
  run (pointer_query_columns< ::DBResult, id_common, typename A::common_traits >::run,
       A::table_name, "`run`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBResult, id_mysql, A >::instance_type_
  pointer_query_columns< ::DBResult, id_mysql, A >::
  instance (pointer_query_columns< ::DBResult, id_common, typename A::common_traits >::instance,
            A::table_name, "`instance`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBResult, id_mysql, A >::score_type_
  pointer_query_columns< ::DBResult, id_mysql, A >::
  score (pointer_query_columns< ::DBResult, id_common, typename A::common_traits >::score,
         A::table_name, "`score`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBResult, id_mysql, A >::algorithm_type_
  pointer_query_columns< ::DBResult, id_mysql, A >::
  algorithm (pointer_query_columns< ::DBResult, id_common, typename A::common_traits >::algorithm,
             A::table_name, "`algorithm`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBResult, id_mysql, A >::config_type_
  pointer_query_columns< ::DBResult, id_mysql, A >::
  config (pointer_query_columns< ::DBResult, id_common, typename A::common_traits >::config,
          A::table_name, "`config`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBResult, id_mysql, A >::seed_type_
  pointer_query_columns< ::DBResult, id_mysql, A >::
  seed (pointer_query_columns< ::DBResult, id_common, typename A::common_traits >::seed,
        A::table_name, "`seed`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBResult, id_mysql, A >::optimal_type_
  pointer_query_columns< ::DBResult, id_mysql, A >::
  optimal (pointer_query_columns< ::DBResult, id_common, typename A::common_traits >::optimal,
           A::table_name, "`optimal`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBResult, id_mysql, A >::feasible_type_
  pointer_query_columns< ::DBResult, id_mysql, A >::
  feasible (pointer_query_columns< ::DBResult, id_common, typename A::common_traits >::feasible,
            A::table_name, "`feasible`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBResult, id_mysql, A >::lower_bound_type_
  pointer_query_columns< ::DBResult, id_mysql, A >::
  lower_bound (pointer_query_columns< ::DBResult, id_common, typename A::common_traits >::lower_bound,
               A::table_name, "`lower_bound`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBResult, id_mysql, A >::elapsed_type_
  pointer_query_columns< ::DBResult, id_mysql, A >::
  elapsed (pointer_query_columns< ::DBResult, id_common, typename A::common_traits >::elapsed,
           A::table_name, "`elapsed`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBResult, id_mysql, A >::time_type_
  pointer_query_columns< ::DBResult, id_mysql, A >::
  time (pointer_query_columns< ::DBResult, id_common, typename A::common_traits >::time,
        A::table_name, "`time`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBResult, id_mysql, A >::invocation_type_
  pointer_query_columns< ::DBResult, id_mysql, A >::
  invocation (pointer_query_columns< ::DBResult, id_common, typename A::common_traits >::invocation,
              A::table_name, "`invocation`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBResult, id_mysql, A >::cfg_type_
  pointer_query_columns< ::DBResult, id_mysql, A >::
  cfg (pointer_query_columns< ::DBResult, id_common, typename A::common_traits >::cfg,
       A::table_name, "`cfg`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBResult, id_mysql, A >::id_type_
  pointer_query_columns< ::DBResult, id_mysql, A >::
  id (pointer_query_columns< ::DBResult, id_common, typename A::common_traits >::id,
      A::table_name, "`id`", 0);

#endif // ODB_MYSQL_QUERY_COLUMNS_DEF

  template <>
  class access::object_traits_impl< ::DBResult, id_mysql >:
    public access::object_traits< ::DBResult >
  {
    public:
    typedef access::object_traits_impl< ::DBResult, id_common > common_traits;

    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // run
      //
      details::buffer run_value;
      unsigned long run_size;
      my_bool run_null;

      // instance
      //
      details::buffer instance_value;
      unsigned long instance_size;
      my_bool instance_null;

      // score
      //
      double score_value;
      my_bool score_null;

      // algorithm
      //
      details::buffer algorithm_value;
      unsigned long algorithm_size;
      my_bool algorithm_null;

      // config
      //
      details::buffer config_value;
      unsigned long config_size;
      my_bool config_null;

      // seed
      //
      int seed_value;
      my_bool seed_null;

      // optimal
      //
      signed char optimal_value;
      my_bool optimal_null;

      // feasible
      //
      signed char feasible_value;
      my_bool feasible_null;

      // lower_bound
      //
      double lower_bound_value;
      my_bool lower_bound_null;

      // elapsed
      //
      double elapsed_value;
      my_bool elapsed_null;

      // time
      //
      unsigned long long time_value;
      my_bool time_null;

      // invocation
      //
      unsigned long long invocation_value;
      my_bool invocation_null;

      // cfg
      //
      unsigned long long cfg_value;
      my_bool cfg_null;

      // id_
      //
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // resource_infos
    //
    struct resource_infos_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::std::shared_ptr< ::DBResourcesInfo > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mysql::container_statements< resource_infos_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        unsigned long long value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      load (container_type&,
            statements_type&);
    };

    // papi_measurements
    //
    struct papi_measurements_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::std::shared_ptr< ::DBPapiMeasurement > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mysql::container_statements< papi_measurements_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        unsigned long long value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      load (container_type&,
            statements_type&);
    };

    // solutions
    //
    struct solutions_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::std::shared_ptr< ::DBSolution > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mysql::container_statements< solutions_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        unsigned long long value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      load (container_type&,
            statements_type&);
    };

    // intermediates
    //
    struct intermediates_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::std::shared_ptr< ::DBIntermediate > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mysql::container_statements< intermediates_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        unsigned long long value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      load (container_type&,
            statements_type&);
    };

    // extended_measures
    //
    struct extended_measures_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::std::shared_ptr< ::DBExtendedMeasure > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mysql::container_statements< extended_measures_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        unsigned long long value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      load (container_type&,
            statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 14UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static result<object_type>
    query (database&, const odb::query_base&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const odb::query_base&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  // DBResourcesInfo
  //
  template <typename A>
  struct pointer_query_columns< ::DBResourcesInfo, id_mysql, A >
  {
    // res
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    res_type_;

    static const res_type_ res;

    // major_pagefaults
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::size_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    major_pagefaults_type_;

    static const major_pagefaults_type_ major_pagefaults;

    // minor_pagefaults
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::size_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    minor_pagefaults_type_;

    static const minor_pagefaults_type_ minor_pagefaults;

    // user_usecs
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    user_usecs_type_;

    static const user_usecs_type_ user_usecs;

    // system_usecs
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    system_usecs_type_;

    static const system_usecs_type_ system_usecs;

    // max_rss_size
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    max_rss_size_type_;

    static const max_rss_size_type_ max_rss_size;

    // max_data_size
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    max_data_size_type_;

    static const max_data_size_type_ max_data_size;

    // malloc_max_size
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    malloc_max_size_type_;

    static const malloc_max_size_type_ malloc_max_size;

    // malloc_count
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    malloc_count_type_;

    static const malloc_count_type_ malloc_count;

    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;
  };

#ifdef ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  const typename pointer_query_columns< ::DBResourcesInfo, id_mysql, A >::res_type_
  pointer_query_columns< ::DBResourcesInfo, id_mysql, A >::
  res (pointer_query_columns< ::DBResourcesInfo, id_common, typename A::common_traits >::res,
       A::table_name, "`res`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBResourcesInfo, id_mysql, A >::major_pagefaults_type_
  pointer_query_columns< ::DBResourcesInfo, id_mysql, A >::
  major_pagefaults (pointer_query_columns< ::DBResourcesInfo, id_common, typename A::common_traits >::major_pagefaults,
                    A::table_name, "`major_pagefaults`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBResourcesInfo, id_mysql, A >::minor_pagefaults_type_
  pointer_query_columns< ::DBResourcesInfo, id_mysql, A >::
  minor_pagefaults (pointer_query_columns< ::DBResourcesInfo, id_common, typename A::common_traits >::minor_pagefaults,
                    A::table_name, "`minor_pagefaults`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBResourcesInfo, id_mysql, A >::user_usecs_type_
  pointer_query_columns< ::DBResourcesInfo, id_mysql, A >::
  user_usecs (pointer_query_columns< ::DBResourcesInfo, id_common, typename A::common_traits >::user_usecs,
              A::table_name, "`user_usecs`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBResourcesInfo, id_mysql, A >::system_usecs_type_
  pointer_query_columns< ::DBResourcesInfo, id_mysql, A >::
  system_usecs (pointer_query_columns< ::DBResourcesInfo, id_common, typename A::common_traits >::system_usecs,
                A::table_name, "`system_usecs`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBResourcesInfo, id_mysql, A >::max_rss_size_type_
  pointer_query_columns< ::DBResourcesInfo, id_mysql, A >::
  max_rss_size (pointer_query_columns< ::DBResourcesInfo, id_common, typename A::common_traits >::max_rss_size,
                A::table_name, "`max_rss_size`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBResourcesInfo, id_mysql, A >::max_data_size_type_
  pointer_query_columns< ::DBResourcesInfo, id_mysql, A >::
  max_data_size (pointer_query_columns< ::DBResourcesInfo, id_common, typename A::common_traits >::max_data_size,
                 A::table_name, "`max_data_size`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBResourcesInfo, id_mysql, A >::malloc_max_size_type_
  pointer_query_columns< ::DBResourcesInfo, id_mysql, A >::
  malloc_max_size (pointer_query_columns< ::DBResourcesInfo, id_common, typename A::common_traits >::malloc_max_size,
                   A::table_name, "`malloc_max_size`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBResourcesInfo, id_mysql, A >::malloc_count_type_
  pointer_query_columns< ::DBResourcesInfo, id_mysql, A >::
  malloc_count (pointer_query_columns< ::DBResourcesInfo, id_common, typename A::common_traits >::malloc_count,
                A::table_name, "`malloc_count`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBResourcesInfo, id_mysql, A >::id_type_
  pointer_query_columns< ::DBResourcesInfo, id_mysql, A >::
  id (pointer_query_columns< ::DBResourcesInfo, id_common, typename A::common_traits >::id,
      A::table_name, "`id`", 0);

#endif // ODB_MYSQL_QUERY_COLUMNS_DEF

  template <>
  class access::object_traits_impl< ::DBResourcesInfo, id_mysql >:
    public access::object_traits< ::DBResourcesInfo >
  {
    public:
    typedef access::object_traits_impl< ::DBResourcesInfo, id_common > common_traits;

    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // res
      //
      unsigned long long res_value;
      my_bool res_null;

      // major_pagefaults
      //
      unsigned long long major_pagefaults_value;
      my_bool major_pagefaults_null;

      // minor_pagefaults
      //
      unsigned long long minor_pagefaults_value;
      my_bool minor_pagefaults_null;

      // user_usecs
      //
      unsigned long long user_usecs_value;
      my_bool user_usecs_null;

      // system_usecs
      //
      unsigned long long system_usecs_value;
      my_bool system_usecs_null;

      // max_rss_size
      //
      unsigned long long max_rss_size_value;
      my_bool max_rss_size_null;

      // max_data_size
      //
      unsigned long long max_data_size_value;
      my_bool max_data_size_null;

      // malloc_max_size
      //
      unsigned long long malloc_max_size_value;
      my_bool malloc_max_size_null;

      // malloc_count
      //
      unsigned long long malloc_count_value;
      my_bool malloc_count_null;

      // id_
      //
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 10UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static result<object_type>
    query (database&, const odb::query_base&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const odb::query_base&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  // DBPapiMeasurement
  //
  template <typename A>
  struct pointer_query_columns< ::DBPapiMeasurement, id_mysql, A >
  {
    // res
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    res_type_;

    static const res_type_ res;

    // event_type
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    event_type_type_;

    static const event_type_type_ event_type;

    // event_count
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long long int,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    event_count_type_;

    static const event_count_type_ event_count;

    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;
  };

#ifdef ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  const typename pointer_query_columns< ::DBPapiMeasurement, id_mysql, A >::res_type_
  pointer_query_columns< ::DBPapiMeasurement, id_mysql, A >::
  res (pointer_query_columns< ::DBPapiMeasurement, id_common, typename A::common_traits >::res,
       A::table_name, "`res`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBPapiMeasurement, id_mysql, A >::event_type_type_
  pointer_query_columns< ::DBPapiMeasurement, id_mysql, A >::
  event_type (pointer_query_columns< ::DBPapiMeasurement, id_common, typename A::common_traits >::event_type,
              A::table_name, "`event_type`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBPapiMeasurement, id_mysql, A >::event_count_type_
  pointer_query_columns< ::DBPapiMeasurement, id_mysql, A >::
  event_count (pointer_query_columns< ::DBPapiMeasurement, id_common, typename A::common_traits >::event_count,
               A::table_name, "`event_count`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBPapiMeasurement, id_mysql, A >::id_type_
  pointer_query_columns< ::DBPapiMeasurement, id_mysql, A >::
  id (pointer_query_columns< ::DBPapiMeasurement, id_common, typename A::common_traits >::id,
      A::table_name, "`id`", 0);

#endif // ODB_MYSQL_QUERY_COLUMNS_DEF

  template <>
  class access::object_traits_impl< ::DBPapiMeasurement, id_mysql >:
    public access::object_traits< ::DBPapiMeasurement >
  {
    public:
    typedef access::object_traits_impl< ::DBPapiMeasurement, id_common > common_traits;

    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // res
      //
      unsigned long long res_value;
      my_bool res_null;

      // event_type
      //
      details::buffer event_type_value;
      unsigned long event_type_size;
      my_bool event_type_null;

      // event_count
      //
      long long event_count_value;
      my_bool event_count_null;

      // id_
      //
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static result<object_type>
    query (database&, const odb::query_base&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const odb::query_base&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  // DBSolution
  //
  template <typename A>
  struct pointer_query_columns< ::DBSolution, id_mysql, A >
  {
    // res
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    res_type_;

    static const res_type_ res;

    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;
  };

#ifdef ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  const typename pointer_query_columns< ::DBSolution, id_mysql, A >::res_type_
  pointer_query_columns< ::DBSolution, id_mysql, A >::
  res (pointer_query_columns< ::DBSolution, id_common, typename A::common_traits >::res,
       A::table_name, "`res`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBSolution, id_mysql, A >::id_type_
  pointer_query_columns< ::DBSolution, id_mysql, A >::
  id (pointer_query_columns< ::DBSolution, id_common, typename A::common_traits >::id,
      A::table_name, "`id`", 0);

#endif // ODB_MYSQL_QUERY_COLUMNS_DEF

  template <>
  class access::object_traits_impl< ::DBSolution, id_mysql >:
    public access::object_traits< ::DBSolution >
  {
    public:
    typedef access::object_traits_impl< ::DBSolution, id_common > common_traits;

    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // res
      //
      unsigned long long res_value;
      my_bool res_null;

      // id_
      //
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // jobs
    //
    struct jobs_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::std::shared_ptr< ::DBSolutionJob > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mysql::container_statements< jobs_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        unsigned long long value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      load (container_type&,
            statements_type&);
    };

    // intermediates
    //
    struct intermediates_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::std::shared_ptr< ::DBIntermediate > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mysql::container_statements< intermediates_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        unsigned long long value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      load (container_type&,
            statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 2UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static result<object_type>
    query (database&, const odb::query_base&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const odb::query_base&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  // DBSolutionJob
  //
  template <typename A>
  struct pointer_query_columns< ::DBSolutionJob, id_mysql, A >
  {
    // sol
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    sol_type_;

    static const sol_type_ sol;

    // job_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    job_id_type_;

    static const job_id_type_ job_id;

    // start_time
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    start_time_type_;

    static const start_time_type_ start_time;

    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;
  };

#ifdef ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  const typename pointer_query_columns< ::DBSolutionJob, id_mysql, A >::sol_type_
  pointer_query_columns< ::DBSolutionJob, id_mysql, A >::
  sol (pointer_query_columns< ::DBSolutionJob, id_common, typename A::common_traits >::sol,
       A::table_name, "`sol`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBSolutionJob, id_mysql, A >::job_id_type_
  pointer_query_columns< ::DBSolutionJob, id_mysql, A >::
  job_id (pointer_query_columns< ::DBSolutionJob, id_common, typename A::common_traits >::job_id,
          A::table_name, "`job_id`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBSolutionJob, id_mysql, A >::start_time_type_
  pointer_query_columns< ::DBSolutionJob, id_mysql, A >::
  start_time (pointer_query_columns< ::DBSolutionJob, id_common, typename A::common_traits >::start_time,
              A::table_name, "`start_time`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBSolutionJob, id_mysql, A >::id_type_
  pointer_query_columns< ::DBSolutionJob, id_mysql, A >::
  id (pointer_query_columns< ::DBSolutionJob, id_common, typename A::common_traits >::id,
      A::table_name, "`id`", 0);

#endif // ODB_MYSQL_QUERY_COLUMNS_DEF

  template <>
  class access::object_traits_impl< ::DBSolutionJob, id_mysql >:
    public access::object_traits< ::DBSolutionJob >
  {
    public:
    typedef access::object_traits_impl< ::DBSolutionJob, id_common > common_traits;

    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // sol
      //
      unsigned long long sol_value;
      my_bool sol_null;

      // job_id
      //
      unsigned int job_id_value;
      my_bool job_id_null;

      // start_time
      //
      unsigned int start_time_value;
      my_bool start_time_null;

      // id_
      //
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static result<object_type>
    query (database&, const odb::query_base&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const odb::query_base&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  // DBIntermediate
  //
  template <typename A>
  struct pointer_query_columns< ::DBIntermediate, id_mysql, A >
  {
    // res
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    res_type_;

    static const res_type_ res;

    // time
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    time_type_;

    static const time_type_ time;

    // iteration
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    iteration_type_;

    static const iteration_type_ iteration;

    // costs
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    costs_type_;

    static const costs_type_ costs;

    // bound
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    bound_type_;

    static const bound_type_ bound;

    // solution
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    solution_type_;

    static const solution_type_ solution;

    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;
  };

#ifdef ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  const typename pointer_query_columns< ::DBIntermediate, id_mysql, A >::res_type_
  pointer_query_columns< ::DBIntermediate, id_mysql, A >::
  res (pointer_query_columns< ::DBIntermediate, id_common, typename A::common_traits >::res,
       A::table_name, "`res`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBIntermediate, id_mysql, A >::time_type_
  pointer_query_columns< ::DBIntermediate, id_mysql, A >::
  time (pointer_query_columns< ::DBIntermediate, id_common, typename A::common_traits >::time,
        A::table_name, "`time`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBIntermediate, id_mysql, A >::iteration_type_
  pointer_query_columns< ::DBIntermediate, id_mysql, A >::
  iteration (pointer_query_columns< ::DBIntermediate, id_common, typename A::common_traits >::iteration,
             A::table_name, "`iteration`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBIntermediate, id_mysql, A >::costs_type_
  pointer_query_columns< ::DBIntermediate, id_mysql, A >::
  costs (pointer_query_columns< ::DBIntermediate, id_common, typename A::common_traits >::costs,
         A::table_name, "`costs`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBIntermediate, id_mysql, A >::bound_type_
  pointer_query_columns< ::DBIntermediate, id_mysql, A >::
  bound (pointer_query_columns< ::DBIntermediate, id_common, typename A::common_traits >::bound,
         A::table_name, "`bound`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBIntermediate, id_mysql, A >::solution_type_
  pointer_query_columns< ::DBIntermediate, id_mysql, A >::
  solution (pointer_query_columns< ::DBIntermediate, id_common, typename A::common_traits >::solution,
            A::table_name, "`solution`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBIntermediate, id_mysql, A >::id_type_
  pointer_query_columns< ::DBIntermediate, id_mysql, A >::
  id (pointer_query_columns< ::DBIntermediate, id_common, typename A::common_traits >::id,
      A::table_name, "`id`", 0);

#endif // ODB_MYSQL_QUERY_COLUMNS_DEF

  template <>
  class access::object_traits_impl< ::DBIntermediate, id_mysql >:
    public access::object_traits< ::DBIntermediate >
  {
    public:
    typedef access::object_traits_impl< ::DBIntermediate, id_common > common_traits;

    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // res
      //
      unsigned long long res_value;
      my_bool res_null;

      // time
      //
      double time_value;
      my_bool time_null;

      // iteration
      //
      unsigned int iteration_value;
      my_bool iteration_null;

      // costs
      //
      double costs_value;
      my_bool costs_null;

      // bound
      //
      double bound_value;
      my_bool bound_null;

      // solution
      //
      unsigned long long solution_value;
      my_bool solution_null;

      // id_
      //
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 7UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static result<object_type>
    query (database&, const odb::query_base&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const odb::query_base&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  // DBError
  //
  template <typename A>
  struct query_columns< ::DBError, id_mysql, A >
  {
    // timestamp
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    timestamp_type_;

    static const timestamp_type_ timestamp;

    // run
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    run_type_;

    static const run_type_ run;

    // instance
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    instance_type_;

    static const instance_type_ instance;

    // algorithm
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    algorithm_type_;

    static const algorithm_type_ algorithm;

    // config
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    config_type_;

    static const config_type_ config;

    // seed
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        int,
        mysql::id_long >::query_type,
      mysql::id_long >
    seed_type_;

    static const seed_type_ seed;

    // fault_code
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        int,
        mysql::id_long >::query_type,
      mysql::id_long >
    fault_code_type_;

    static const fault_code_type_ fault_code;

    // error_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        int,
        mysql::id_long >::query_type,
      mysql::id_long >
    error_id_type_;

    static const error_id_type_ error_id;

    // time
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    time_type_;

    static const time_type_ time;

    // git_revision
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    git_revision_type_;

    static const git_revision_type_ git_revision;

    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;
  };

#ifdef ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  const typename query_columns< ::DBError, id_mysql, A >::timestamp_type_
  query_columns< ::DBError, id_mysql, A >::
  timestamp (query_columns< ::DBError, id_common, typename A::common_traits >::timestamp,
             A::table_name, "`timestamp`", 0);

  template <typename A>
  const typename query_columns< ::DBError, id_mysql, A >::run_type_
  query_columns< ::DBError, id_mysql, A >::
  run (query_columns< ::DBError, id_common, typename A::common_traits >::run,
       A::table_name, "`run`", 0);

  template <typename A>
  const typename query_columns< ::DBError, id_mysql, A >::instance_type_
  query_columns< ::DBError, id_mysql, A >::
  instance (query_columns< ::DBError, id_common, typename A::common_traits >::instance,
            A::table_name, "`instance`", 0);

  template <typename A>
  const typename query_columns< ::DBError, id_mysql, A >::algorithm_type_
  query_columns< ::DBError, id_mysql, A >::
  algorithm (query_columns< ::DBError, id_common, typename A::common_traits >::algorithm,
             A::table_name, "`algorithm`", 0);

  template <typename A>
  const typename query_columns< ::DBError, id_mysql, A >::config_type_
  query_columns< ::DBError, id_mysql, A >::
  config (query_columns< ::DBError, id_common, typename A::common_traits >::config,
          A::table_name, "`config`", 0);

  template <typename A>
  const typename query_columns< ::DBError, id_mysql, A >::seed_type_
  query_columns< ::DBError, id_mysql, A >::
  seed (query_columns< ::DBError, id_common, typename A::common_traits >::seed,
        A::table_name, "`seed`", 0);

  template <typename A>
  const typename query_columns< ::DBError, id_mysql, A >::fault_code_type_
  query_columns< ::DBError, id_mysql, A >::
  fault_code (query_columns< ::DBError, id_common, typename A::common_traits >::fault_code,
              A::table_name, "`fault_code`", 0);

  template <typename A>
  const typename query_columns< ::DBError, id_mysql, A >::error_id_type_
  query_columns< ::DBError, id_mysql, A >::
  error_id (query_columns< ::DBError, id_common, typename A::common_traits >::error_id,
            A::table_name, "`error_id`", 0);

  template <typename A>
  const typename query_columns< ::DBError, id_mysql, A >::time_type_
  query_columns< ::DBError, id_mysql, A >::
  time (query_columns< ::DBError, id_common, typename A::common_traits >::time,
        A::table_name, "`time`", 0);

  template <typename A>
  const typename query_columns< ::DBError, id_mysql, A >::git_revision_type_
  query_columns< ::DBError, id_mysql, A >::
  git_revision (query_columns< ::DBError, id_common, typename A::common_traits >::git_revision,
                A::table_name, "`git_revision`", 0);

  template <typename A>
  const typename query_columns< ::DBError, id_mysql, A >::id_type_
  query_columns< ::DBError, id_mysql, A >::
  id (query_columns< ::DBError, id_common, typename A::common_traits >::id,
      A::table_name, "`id`", 0);

#endif // ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  struct pointer_query_columns< ::DBError, id_mysql, A >:
    query_columns< ::DBError, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::DBError, id_mysql >:
    public access::object_traits< ::DBError >
  {
    public:
    typedef access::object_traits_impl< ::DBError, id_common > common_traits;

    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // timestamp
      //
      unsigned long long timestamp_value;
      my_bool timestamp_null;

      // run
      //
      details::buffer run_value;
      unsigned long run_size;
      my_bool run_null;

      // instance
      //
      details::buffer instance_value;
      unsigned long instance_size;
      my_bool instance_null;

      // algorithm
      //
      details::buffer algorithm_value;
      unsigned long algorithm_size;
      my_bool algorithm_null;

      // config
      //
      details::buffer config_value;
      unsigned long config_size;
      my_bool config_null;

      // seed
      //
      int seed_value;
      my_bool seed_null;

      // fault_code
      //
      int fault_code_value;
      my_bool fault_code_null;

      // error_id
      //
      int error_id_value;
      my_bool error_id_null;

      // time
      //
      unsigned long long time_value;
      my_bool time_null;

      // git_revision
      //
      details::buffer git_revision_value;
      unsigned long git_revision_size;
      my_bool git_revision_null;

      // id_
      //
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 11UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static result<object_type>
    query (database&, const odb::query_base&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const odb::query_base&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  // DBExtendedMeasure
  //
  template <typename A>
  struct pointer_query_columns< ::DBExtendedMeasure, id_mysql, A >
  {
    // res
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    res_type_;

    static const res_type_ res;

    // key
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    key_type_;

    static const key_type_ key;

    // iteration
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    iteration_type_;

    static const iteration_type_ iteration;

    // time
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    time_type_;

    static const time_type_ time;

    // v_int
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        int,
        mysql::id_long >::query_type,
      mysql::id_long >
    v_int_type_;

    static const v_int_type_ v_int;

    // v_double
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    v_double_type_;

    static const v_double_type_ v_double;

    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;
  };

#ifdef ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  const typename pointer_query_columns< ::DBExtendedMeasure, id_mysql, A >::res_type_
  pointer_query_columns< ::DBExtendedMeasure, id_mysql, A >::
  res (pointer_query_columns< ::DBExtendedMeasure, id_common, typename A::common_traits >::res,
       A::table_name, "`res`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBExtendedMeasure, id_mysql, A >::key_type_
  pointer_query_columns< ::DBExtendedMeasure, id_mysql, A >::
  key (pointer_query_columns< ::DBExtendedMeasure, id_common, typename A::common_traits >::key,
       A::table_name, "`key`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBExtendedMeasure, id_mysql, A >::iteration_type_
  pointer_query_columns< ::DBExtendedMeasure, id_mysql, A >::
  iteration (pointer_query_columns< ::DBExtendedMeasure, id_common, typename A::common_traits >::iteration,
             A::table_name, "`iteration`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBExtendedMeasure, id_mysql, A >::time_type_
  pointer_query_columns< ::DBExtendedMeasure, id_mysql, A >::
  time (pointer_query_columns< ::DBExtendedMeasure, id_common, typename A::common_traits >::time,
        A::table_name, "`time`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBExtendedMeasure, id_mysql, A >::v_int_type_
  pointer_query_columns< ::DBExtendedMeasure, id_mysql, A >::
  v_int (pointer_query_columns< ::DBExtendedMeasure, id_common, typename A::common_traits >::v_int,
         A::table_name, "`v_int`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBExtendedMeasure, id_mysql, A >::v_double_type_
  pointer_query_columns< ::DBExtendedMeasure, id_mysql, A >::
  v_double (pointer_query_columns< ::DBExtendedMeasure, id_common, typename A::common_traits >::v_double,
            A::table_name, "`v_double`", 0);

  template <typename A>
  const typename pointer_query_columns< ::DBExtendedMeasure, id_mysql, A >::id_type_
  pointer_query_columns< ::DBExtendedMeasure, id_mysql, A >::
  id (pointer_query_columns< ::DBExtendedMeasure, id_common, typename A::common_traits >::id,
      A::table_name, "`id`", 0);

#endif // ODB_MYSQL_QUERY_COLUMNS_DEF

  template <>
  class access::object_traits_impl< ::DBExtendedMeasure, id_mysql >:
    public access::object_traits< ::DBExtendedMeasure >
  {
    public:
    typedef access::object_traits_impl< ::DBExtendedMeasure, id_common > common_traits;

    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // res
      //
      unsigned long long res_value;
      my_bool res_null;

      // key
      //
      details::buffer key_value;
      unsigned long key_size;
      my_bool key_null;

      // iteration
      //
      unsigned int iteration_value;
      my_bool iteration_null;

      // time
      //
      double time_value;
      my_bool time_null;

      // v_int
      //
      int v_int_value;
      my_bool v_int_null;

      // v_double
      //
      double v_double_value;
      my_bool v_double_null;

      // id_
      //
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 7UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static result<object_type>
    query (database&, const odb::query_base&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const odb::query_base&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  // ConfigGetterView
  //
  template <>
  class access::view_traits_impl< ::ConfigGetterView, id_mysql >:
    public access::view_traits< ::ConfigGetterView >
  {
    public:
    typedef access::view_traits_impl< ::ConfigGetterView, id_common > common_traits;

    struct image_type
    {
      // config_id
      //
      int config_id_value;
      my_bool config_id_null;

      std::size_t version;
    };

    typedef mysql::view_statements<view_type> statements_type;

    typedef mysql::query_base query_base_type;
    struct query_columns
    {
    };

    static const bool versioned = false;

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);

    static result<view_type>
    query (database&, const odb::query_base&);
  };

  // DBConfigKV
  //
  template <>
  struct alias_traits<
    ::DBConfig,
    id_mysql,
    access::object_traits_impl< ::DBConfigKV, id_mysql >::cfg_tag>
  {
    typedef alias_traits<
      ::DBConfig,
      id_common,
      access::object_traits_impl< ::DBConfigKV, id_mysql >::cfg_tag>
    common_traits;

    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::DBConfigKV, id_mysql >
  {
    // cfg
    //
    typedef
    odb::alias_traits<
      ::DBConfig,
      id_mysql,
      access::object_traits_impl< ::DBConfigKV, id_mysql >::cfg_tag>
    cfg_alias_;
  };

  template <typename A>
  struct query_columns< ::DBConfigKV, id_mysql, A >:
    query_columns_base< ::DBConfigKV, id_mysql >
  {
    // cfg
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    cfg_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::DBConfig,
        id_mysql,
        cfg_alias_ > >
    cfg_pointer_type_;

    struct cfg_type_: cfg_pointer_type_, cfg_column_type_
    {
      cfg_type_ (odb::query_column< long unsigned int >& qc,
                 const char* t, const char* c, const char* conv)
        : cfg_column_type_ (qc, t, c, conv)
      {
      }
    };

    static const cfg_type_ cfg;

    // key
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    key_type_;

    static const key_type_ key;

    // value
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    value_type_;

    static const value_type_ value;

    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;
  };

#ifdef ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  const typename query_columns< ::DBConfigKV, id_mysql, A >::cfg_type_
  query_columns< ::DBConfigKV, id_mysql, A >::
  cfg (query_columns< ::DBConfigKV, id_common, typename A::common_traits >::cfg,
       A::table_name, "`cfg`", 0);

  template <typename A>
  const typename query_columns< ::DBConfigKV, id_mysql, A >::key_type_
  query_columns< ::DBConfigKV, id_mysql, A >::
  key (query_columns< ::DBConfigKV, id_common, typename A::common_traits >::key,
       A::table_name, "`key`", 0);

  template <typename A>
  const typename query_columns< ::DBConfigKV, id_mysql, A >::value_type_
  query_columns< ::DBConfigKV, id_mysql, A >::
  value (query_columns< ::DBConfigKV, id_common, typename A::common_traits >::value,
         A::table_name, "`value`", 0);

  template <typename A>
  const typename query_columns< ::DBConfigKV, id_mysql, A >::id_type_
  query_columns< ::DBConfigKV, id_mysql, A >::
  id (query_columns< ::DBConfigKV, id_common, typename A::common_traits >::id,
      A::table_name, "`id`", 0);

#endif // ODB_MYSQL_QUERY_COLUMNS_DEF

  // DBConfig
  //
  // DBInvocation
  //
  // DBResult
  //
  template <>
  struct alias_traits<
    ::DBInvocation,
    id_mysql,
    access::object_traits_impl< ::DBResult, id_mysql >::invocation_tag>
  {
    typedef alias_traits<
      ::DBInvocation,
      id_common,
      access::object_traits_impl< ::DBResult, id_mysql >::invocation_tag>
    common_traits;

    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::DBConfig,
    id_mysql,
    access::object_traits_impl< ::DBResult, id_mysql >::cfg_tag>
  {
    typedef alias_traits<
      ::DBConfig,
      id_common,
      access::object_traits_impl< ::DBResult, id_mysql >::cfg_tag>
    common_traits;

    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::DBResult, id_mysql >
  {
    // invocation
    //
    typedef
    odb::alias_traits<
      ::DBInvocation,
      id_mysql,
      access::object_traits_impl< ::DBResult, id_mysql >::invocation_tag>
    invocation_alias_;

    // cfg
    //
    typedef
    odb::alias_traits<
      ::DBConfig,
      id_mysql,
      access::object_traits_impl< ::DBResult, id_mysql >::cfg_tag>
    cfg_alias_;
  };

  template <typename A>
  struct query_columns< ::DBResult, id_mysql, A >:
    query_columns_base< ::DBResult, id_mysql >
  {
    // run
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    run_type_;

    static const run_type_ run;

    // instance
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    instance_type_;

    static const instance_type_ instance;

    // score
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    score_type_;

    static const score_type_ score;

    // algorithm
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    algorithm_type_;

    static const algorithm_type_ algorithm;

    // config
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    config_type_;

    static const config_type_ config;

    // seed
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        int,
        mysql::id_long >::query_type,
      mysql::id_long >
    seed_type_;

    static const seed_type_ seed;

    // optimal
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    optimal_type_;

    static const optimal_type_ optimal;

    // feasible
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    feasible_type_;

    static const feasible_type_ feasible;

    // lower_bound
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    lower_bound_type_;

    static const lower_bound_type_ lower_bound;

    // elapsed
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    elapsed_type_;

    static const elapsed_type_ elapsed;

    // time
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    time_type_;

    static const time_type_ time;

    // invocation
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    invocation_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::DBInvocation,
        id_mysql,
        invocation_alias_ > >
    invocation_pointer_type_;

    struct invocation_type_: invocation_pointer_type_, invocation_column_type_
    {
      invocation_type_ (odb::query_column< long unsigned int >& qc,
                        const char* t, const char* c, const char* conv)
        : invocation_column_type_ (qc, t, c, conv)
      {
      }
    };

    static const invocation_type_ invocation;

    // cfg
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    cfg_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::DBConfig,
        id_mysql,
        cfg_alias_ > >
    cfg_pointer_type_;

    struct cfg_type_: cfg_pointer_type_, cfg_column_type_
    {
      cfg_type_ (odb::query_column< long unsigned int >& qc,
                 const char* t, const char* c, const char* conv)
        : cfg_column_type_ (qc, t, c, conv)
      {
      }
    };

    static const cfg_type_ cfg;

    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;
  };

#ifdef ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  const typename query_columns< ::DBResult, id_mysql, A >::run_type_
  query_columns< ::DBResult, id_mysql, A >::
  run (query_columns< ::DBResult, id_common, typename A::common_traits >::run,
       A::table_name, "`run`", 0);

  template <typename A>
  const typename query_columns< ::DBResult, id_mysql, A >::instance_type_
  query_columns< ::DBResult, id_mysql, A >::
  instance (query_columns< ::DBResult, id_common, typename A::common_traits >::instance,
            A::table_name, "`instance`", 0);

  template <typename A>
  const typename query_columns< ::DBResult, id_mysql, A >::score_type_
  query_columns< ::DBResult, id_mysql, A >::
  score (query_columns< ::DBResult, id_common, typename A::common_traits >::score,
         A::table_name, "`score`", 0);

  template <typename A>
  const typename query_columns< ::DBResult, id_mysql, A >::algorithm_type_
  query_columns< ::DBResult, id_mysql, A >::
  algorithm (query_columns< ::DBResult, id_common, typename A::common_traits >::algorithm,
             A::table_name, "`algorithm`", 0);

  template <typename A>
  const typename query_columns< ::DBResult, id_mysql, A >::config_type_
  query_columns< ::DBResult, id_mysql, A >::
  config (query_columns< ::DBResult, id_common, typename A::common_traits >::config,
          A::table_name, "`config`", 0);

  template <typename A>
  const typename query_columns< ::DBResult, id_mysql, A >::seed_type_
  query_columns< ::DBResult, id_mysql, A >::
  seed (query_columns< ::DBResult, id_common, typename A::common_traits >::seed,
        A::table_name, "`seed`", 0);

  template <typename A>
  const typename query_columns< ::DBResult, id_mysql, A >::optimal_type_
  query_columns< ::DBResult, id_mysql, A >::
  optimal (query_columns< ::DBResult, id_common, typename A::common_traits >::optimal,
           A::table_name, "`optimal`", 0);

  template <typename A>
  const typename query_columns< ::DBResult, id_mysql, A >::feasible_type_
  query_columns< ::DBResult, id_mysql, A >::
  feasible (query_columns< ::DBResult, id_common, typename A::common_traits >::feasible,
            A::table_name, "`feasible`", 0);

  template <typename A>
  const typename query_columns< ::DBResult, id_mysql, A >::lower_bound_type_
  query_columns< ::DBResult, id_mysql, A >::
  lower_bound (query_columns< ::DBResult, id_common, typename A::common_traits >::lower_bound,
               A::table_name, "`lower_bound`", 0);

  template <typename A>
  const typename query_columns< ::DBResult, id_mysql, A >::elapsed_type_
  query_columns< ::DBResult, id_mysql, A >::
  elapsed (query_columns< ::DBResult, id_common, typename A::common_traits >::elapsed,
           A::table_name, "`elapsed`", 0);

  template <typename A>
  const typename query_columns< ::DBResult, id_mysql, A >::time_type_
  query_columns< ::DBResult, id_mysql, A >::
  time (query_columns< ::DBResult, id_common, typename A::common_traits >::time,
        A::table_name, "`time`", 0);

  template <typename A>
  const typename query_columns< ::DBResult, id_mysql, A >::invocation_type_
  query_columns< ::DBResult, id_mysql, A >::
  invocation (query_columns< ::DBResult, id_common, typename A::common_traits >::invocation,
              A::table_name, "`invocation`", 0);

  template <typename A>
  const typename query_columns< ::DBResult, id_mysql, A >::cfg_type_
  query_columns< ::DBResult, id_mysql, A >::
  cfg (query_columns< ::DBResult, id_common, typename A::common_traits >::cfg,
       A::table_name, "`cfg`", 0);

  template <typename A>
  const typename query_columns< ::DBResult, id_mysql, A >::id_type_
  query_columns< ::DBResult, id_mysql, A >::
  id (query_columns< ::DBResult, id_common, typename A::common_traits >::id,
      A::table_name, "`id`", 0);

#endif // ODB_MYSQL_QUERY_COLUMNS_DEF

  // DBResourcesInfo
  //
  template <>
  struct alias_traits<
    ::DBResult,
    id_mysql,
    access::object_traits_impl< ::DBResourcesInfo, id_mysql >::res_tag>
  {
    typedef alias_traits<
      ::DBResult,
      id_common,
      access::object_traits_impl< ::DBResourcesInfo, id_mysql >::res_tag>
    common_traits;

    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::DBResourcesInfo, id_mysql >
  {
    // res
    //
    typedef
    odb::alias_traits<
      ::DBResult,
      id_mysql,
      access::object_traits_impl< ::DBResourcesInfo, id_mysql >::res_tag>
    res_alias_;
  };

  template <typename A>
  struct query_columns< ::DBResourcesInfo, id_mysql, A >:
    query_columns_base< ::DBResourcesInfo, id_mysql >
  {
    // res
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    res_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::DBResult,
        id_mysql,
        res_alias_ > >
    res_pointer_type_;

    struct res_type_: res_pointer_type_, res_column_type_
    {
      res_type_ (odb::query_column< long unsigned int >& qc,
                 const char* t, const char* c, const char* conv)
        : res_column_type_ (qc, t, c, conv)
      {
      }
    };

    static const res_type_ res;

    // major_pagefaults
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::size_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    major_pagefaults_type_;

    static const major_pagefaults_type_ major_pagefaults;

    // minor_pagefaults
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::size_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    minor_pagefaults_type_;

    static const minor_pagefaults_type_ minor_pagefaults;

    // user_usecs
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    user_usecs_type_;

    static const user_usecs_type_ user_usecs;

    // system_usecs
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    system_usecs_type_;

    static const system_usecs_type_ system_usecs;

    // max_rss_size
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    max_rss_size_type_;

    static const max_rss_size_type_ max_rss_size;

    // max_data_size
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    max_data_size_type_;

    static const max_data_size_type_ max_data_size;

    // malloc_max_size
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    malloc_max_size_type_;

    static const malloc_max_size_type_ malloc_max_size;

    // malloc_count
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    malloc_count_type_;

    static const malloc_count_type_ malloc_count;

    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;
  };

#ifdef ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  const typename query_columns< ::DBResourcesInfo, id_mysql, A >::res_type_
  query_columns< ::DBResourcesInfo, id_mysql, A >::
  res (query_columns< ::DBResourcesInfo, id_common, typename A::common_traits >::res,
       A::table_name, "`res`", 0);

  template <typename A>
  const typename query_columns< ::DBResourcesInfo, id_mysql, A >::major_pagefaults_type_
  query_columns< ::DBResourcesInfo, id_mysql, A >::
  major_pagefaults (query_columns< ::DBResourcesInfo, id_common, typename A::common_traits >::major_pagefaults,
                    A::table_name, "`major_pagefaults`", 0);

  template <typename A>
  const typename query_columns< ::DBResourcesInfo, id_mysql, A >::minor_pagefaults_type_
  query_columns< ::DBResourcesInfo, id_mysql, A >::
  minor_pagefaults (query_columns< ::DBResourcesInfo, id_common, typename A::common_traits >::minor_pagefaults,
                    A::table_name, "`minor_pagefaults`", 0);

  template <typename A>
  const typename query_columns< ::DBResourcesInfo, id_mysql, A >::user_usecs_type_
  query_columns< ::DBResourcesInfo, id_mysql, A >::
  user_usecs (query_columns< ::DBResourcesInfo, id_common, typename A::common_traits >::user_usecs,
              A::table_name, "`user_usecs`", 0);

  template <typename A>
  const typename query_columns< ::DBResourcesInfo, id_mysql, A >::system_usecs_type_
  query_columns< ::DBResourcesInfo, id_mysql, A >::
  system_usecs (query_columns< ::DBResourcesInfo, id_common, typename A::common_traits >::system_usecs,
                A::table_name, "`system_usecs`", 0);

  template <typename A>
  const typename query_columns< ::DBResourcesInfo, id_mysql, A >::max_rss_size_type_
  query_columns< ::DBResourcesInfo, id_mysql, A >::
  max_rss_size (query_columns< ::DBResourcesInfo, id_common, typename A::common_traits >::max_rss_size,
                A::table_name, "`max_rss_size`", 0);

  template <typename A>
  const typename query_columns< ::DBResourcesInfo, id_mysql, A >::max_data_size_type_
  query_columns< ::DBResourcesInfo, id_mysql, A >::
  max_data_size (query_columns< ::DBResourcesInfo, id_common, typename A::common_traits >::max_data_size,
                 A::table_name, "`max_data_size`", 0);

  template <typename A>
  const typename query_columns< ::DBResourcesInfo, id_mysql, A >::malloc_max_size_type_
  query_columns< ::DBResourcesInfo, id_mysql, A >::
  malloc_max_size (query_columns< ::DBResourcesInfo, id_common, typename A::common_traits >::malloc_max_size,
                   A::table_name, "`malloc_max_size`", 0);

  template <typename A>
  const typename query_columns< ::DBResourcesInfo, id_mysql, A >::malloc_count_type_
  query_columns< ::DBResourcesInfo, id_mysql, A >::
  malloc_count (query_columns< ::DBResourcesInfo, id_common, typename A::common_traits >::malloc_count,
                A::table_name, "`malloc_count`", 0);

  template <typename A>
  const typename query_columns< ::DBResourcesInfo, id_mysql, A >::id_type_
  query_columns< ::DBResourcesInfo, id_mysql, A >::
  id (query_columns< ::DBResourcesInfo, id_common, typename A::common_traits >::id,
      A::table_name, "`id`", 0);

#endif // ODB_MYSQL_QUERY_COLUMNS_DEF

  // DBPapiMeasurement
  //
  template <>
  struct alias_traits<
    ::DBResult,
    id_mysql,
    access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::res_tag>
  {
    typedef alias_traits<
      ::DBResult,
      id_common,
      access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::res_tag>
    common_traits;

    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::DBPapiMeasurement, id_mysql >
  {
    // res
    //
    typedef
    odb::alias_traits<
      ::DBResult,
      id_mysql,
      access::object_traits_impl< ::DBPapiMeasurement, id_mysql >::res_tag>
    res_alias_;
  };

  template <typename A>
  struct query_columns< ::DBPapiMeasurement, id_mysql, A >:
    query_columns_base< ::DBPapiMeasurement, id_mysql >
  {
    // res
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    res_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::DBResult,
        id_mysql,
        res_alias_ > >
    res_pointer_type_;

    struct res_type_: res_pointer_type_, res_column_type_
    {
      res_type_ (odb::query_column< long unsigned int >& qc,
                 const char* t, const char* c, const char* conv)
        : res_column_type_ (qc, t, c, conv)
      {
      }
    };

    static const res_type_ res;

    // event_type
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    event_type_type_;

    static const event_type_type_ event_type;

    // event_count
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long long int,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    event_count_type_;

    static const event_count_type_ event_count;

    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;
  };

#ifdef ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  const typename query_columns< ::DBPapiMeasurement, id_mysql, A >::res_type_
  query_columns< ::DBPapiMeasurement, id_mysql, A >::
  res (query_columns< ::DBPapiMeasurement, id_common, typename A::common_traits >::res,
       A::table_name, "`res`", 0);

  template <typename A>
  const typename query_columns< ::DBPapiMeasurement, id_mysql, A >::event_type_type_
  query_columns< ::DBPapiMeasurement, id_mysql, A >::
  event_type (query_columns< ::DBPapiMeasurement, id_common, typename A::common_traits >::event_type,
              A::table_name, "`event_type`", 0);

  template <typename A>
  const typename query_columns< ::DBPapiMeasurement, id_mysql, A >::event_count_type_
  query_columns< ::DBPapiMeasurement, id_mysql, A >::
  event_count (query_columns< ::DBPapiMeasurement, id_common, typename A::common_traits >::event_count,
               A::table_name, "`event_count`", 0);

  template <typename A>
  const typename query_columns< ::DBPapiMeasurement, id_mysql, A >::id_type_
  query_columns< ::DBPapiMeasurement, id_mysql, A >::
  id (query_columns< ::DBPapiMeasurement, id_common, typename A::common_traits >::id,
      A::table_name, "`id`", 0);

#endif // ODB_MYSQL_QUERY_COLUMNS_DEF

  // DBSolution
  //
  template <>
  struct alias_traits<
    ::DBResult,
    id_mysql,
    access::object_traits_impl< ::DBSolution, id_mysql >::res_tag>
  {
    typedef alias_traits<
      ::DBResult,
      id_common,
      access::object_traits_impl< ::DBSolution, id_mysql >::res_tag>
    common_traits;

    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::DBSolution, id_mysql >
  {
    // res
    //
    typedef
    odb::alias_traits<
      ::DBResult,
      id_mysql,
      access::object_traits_impl< ::DBSolution, id_mysql >::res_tag>
    res_alias_;
  };

  template <typename A>
  struct query_columns< ::DBSolution, id_mysql, A >:
    query_columns_base< ::DBSolution, id_mysql >
  {
    // res
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    res_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::DBResult,
        id_mysql,
        res_alias_ > >
    res_pointer_type_;

    struct res_type_: res_pointer_type_, res_column_type_
    {
      res_type_ (odb::query_column< long unsigned int >& qc,
                 const char* t, const char* c, const char* conv)
        : res_column_type_ (qc, t, c, conv)
      {
      }
    };

    static const res_type_ res;

    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;
  };

#ifdef ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  const typename query_columns< ::DBSolution, id_mysql, A >::res_type_
  query_columns< ::DBSolution, id_mysql, A >::
  res (query_columns< ::DBSolution, id_common, typename A::common_traits >::res,
       A::table_name, "`res`", 0);

  template <typename A>
  const typename query_columns< ::DBSolution, id_mysql, A >::id_type_
  query_columns< ::DBSolution, id_mysql, A >::
  id (query_columns< ::DBSolution, id_common, typename A::common_traits >::id,
      A::table_name, "`id`", 0);

#endif // ODB_MYSQL_QUERY_COLUMNS_DEF

  // DBSolutionJob
  //
  template <>
  struct alias_traits<
    ::DBSolution,
    id_mysql,
    access::object_traits_impl< ::DBSolutionJob, id_mysql >::sol_tag>
  {
    typedef alias_traits<
      ::DBSolution,
      id_common,
      access::object_traits_impl< ::DBSolutionJob, id_mysql >::sol_tag>
    common_traits;

    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::DBSolutionJob, id_mysql >
  {
    // sol
    //
    typedef
    odb::alias_traits<
      ::DBSolution,
      id_mysql,
      access::object_traits_impl< ::DBSolutionJob, id_mysql >::sol_tag>
    sol_alias_;
  };

  template <typename A>
  struct query_columns< ::DBSolutionJob, id_mysql, A >:
    query_columns_base< ::DBSolutionJob, id_mysql >
  {
    // sol
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    sol_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::DBSolution,
        id_mysql,
        sol_alias_ > >
    sol_pointer_type_;

    struct sol_type_: sol_pointer_type_, sol_column_type_
    {
      sol_type_ (odb::query_column< long unsigned int >& qc,
                 const char* t, const char* c, const char* conv)
        : sol_column_type_ (qc, t, c, conv)
      {
      }
    };

    static const sol_type_ sol;

    // job_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    job_id_type_;

    static const job_id_type_ job_id;

    // start_time
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    start_time_type_;

    static const start_time_type_ start_time;

    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;
  };

#ifdef ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  const typename query_columns< ::DBSolutionJob, id_mysql, A >::sol_type_
  query_columns< ::DBSolutionJob, id_mysql, A >::
  sol (query_columns< ::DBSolutionJob, id_common, typename A::common_traits >::sol,
       A::table_name, "`sol`", 0);

  template <typename A>
  const typename query_columns< ::DBSolutionJob, id_mysql, A >::job_id_type_
  query_columns< ::DBSolutionJob, id_mysql, A >::
  job_id (query_columns< ::DBSolutionJob, id_common, typename A::common_traits >::job_id,
          A::table_name, "`job_id`", 0);

  template <typename A>
  const typename query_columns< ::DBSolutionJob, id_mysql, A >::start_time_type_
  query_columns< ::DBSolutionJob, id_mysql, A >::
  start_time (query_columns< ::DBSolutionJob, id_common, typename A::common_traits >::start_time,
              A::table_name, "`start_time`", 0);

  template <typename A>
  const typename query_columns< ::DBSolutionJob, id_mysql, A >::id_type_
  query_columns< ::DBSolutionJob, id_mysql, A >::
  id (query_columns< ::DBSolutionJob, id_common, typename A::common_traits >::id,
      A::table_name, "`id`", 0);

#endif // ODB_MYSQL_QUERY_COLUMNS_DEF

  // DBIntermediate
  //
  template <>
  struct alias_traits<
    ::DBResult,
    id_mysql,
    access::object_traits_impl< ::DBIntermediate, id_mysql >::res_tag>
  {
    typedef alias_traits<
      ::DBResult,
      id_common,
      access::object_traits_impl< ::DBIntermediate, id_mysql >::res_tag>
    common_traits;

    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::DBSolution,
    id_mysql,
    access::object_traits_impl< ::DBIntermediate, id_mysql >::solution_tag>
  {
    typedef alias_traits<
      ::DBSolution,
      id_common,
      access::object_traits_impl< ::DBIntermediate, id_mysql >::solution_tag>
    common_traits;

    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::DBIntermediate, id_mysql >
  {
    // res
    //
    typedef
    odb::alias_traits<
      ::DBResult,
      id_mysql,
      access::object_traits_impl< ::DBIntermediate, id_mysql >::res_tag>
    res_alias_;

    // solution
    //
    typedef
    odb::alias_traits<
      ::DBSolution,
      id_mysql,
      access::object_traits_impl< ::DBIntermediate, id_mysql >::solution_tag>
    solution_alias_;
  };

  template <typename A>
  struct query_columns< ::DBIntermediate, id_mysql, A >:
    query_columns_base< ::DBIntermediate, id_mysql >
  {
    // res
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    res_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::DBResult,
        id_mysql,
        res_alias_ > >
    res_pointer_type_;

    struct res_type_: res_pointer_type_, res_column_type_
    {
      res_type_ (odb::query_column< long unsigned int >& qc,
                 const char* t, const char* c, const char* conv)
        : res_column_type_ (qc, t, c, conv)
      {
      }
    };

    static const res_type_ res;

    // time
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    time_type_;

    static const time_type_ time;

    // iteration
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    iteration_type_;

    static const iteration_type_ iteration;

    // costs
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    costs_type_;

    static const costs_type_ costs;

    // bound
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    bound_type_;

    static const bound_type_ bound;

    // solution
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    solution_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::DBSolution,
        id_mysql,
        solution_alias_ > >
    solution_pointer_type_;

    struct solution_type_: solution_pointer_type_, solution_column_type_
    {
      solution_type_ (odb::query_column< long unsigned int >& qc,
                      const char* t, const char* c, const char* conv)
        : solution_column_type_ (qc, t, c, conv)
      {
      }
    };

    static const solution_type_ solution;

    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;
  };

#ifdef ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  const typename query_columns< ::DBIntermediate, id_mysql, A >::res_type_
  query_columns< ::DBIntermediate, id_mysql, A >::
  res (query_columns< ::DBIntermediate, id_common, typename A::common_traits >::res,
       A::table_name, "`res`", 0);

  template <typename A>
  const typename query_columns< ::DBIntermediate, id_mysql, A >::time_type_
  query_columns< ::DBIntermediate, id_mysql, A >::
  time (query_columns< ::DBIntermediate, id_common, typename A::common_traits >::time,
        A::table_name, "`time`", 0);

  template <typename A>
  const typename query_columns< ::DBIntermediate, id_mysql, A >::iteration_type_
  query_columns< ::DBIntermediate, id_mysql, A >::
  iteration (query_columns< ::DBIntermediate, id_common, typename A::common_traits >::iteration,
             A::table_name, "`iteration`", 0);

  template <typename A>
  const typename query_columns< ::DBIntermediate, id_mysql, A >::costs_type_
  query_columns< ::DBIntermediate, id_mysql, A >::
  costs (query_columns< ::DBIntermediate, id_common, typename A::common_traits >::costs,
         A::table_name, "`costs`", 0);

  template <typename A>
  const typename query_columns< ::DBIntermediate, id_mysql, A >::bound_type_
  query_columns< ::DBIntermediate, id_mysql, A >::
  bound (query_columns< ::DBIntermediate, id_common, typename A::common_traits >::bound,
         A::table_name, "`bound`", 0);

  template <typename A>
  const typename query_columns< ::DBIntermediate, id_mysql, A >::solution_type_
  query_columns< ::DBIntermediate, id_mysql, A >::
  solution (query_columns< ::DBIntermediate, id_common, typename A::common_traits >::solution,
            A::table_name, "`solution`", 0);

  template <typename A>
  const typename query_columns< ::DBIntermediate, id_mysql, A >::id_type_
  query_columns< ::DBIntermediate, id_mysql, A >::
  id (query_columns< ::DBIntermediate, id_common, typename A::common_traits >::id,
      A::table_name, "`id`", 0);

#endif // ODB_MYSQL_QUERY_COLUMNS_DEF

  // DBError
  //
  // DBExtendedMeasure
  //
  template <>
  struct alias_traits<
    ::DBResult,
    id_mysql,
    access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::res_tag>
  {
    typedef alias_traits<
      ::DBResult,
      id_common,
      access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::res_tag>
    common_traits;

    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::DBExtendedMeasure, id_mysql >
  {
    // res
    //
    typedef
    odb::alias_traits<
      ::DBResult,
      id_mysql,
      access::object_traits_impl< ::DBExtendedMeasure, id_mysql >::res_tag>
    res_alias_;
  };

  template <typename A>
  struct query_columns< ::DBExtendedMeasure, id_mysql, A >:
    query_columns_base< ::DBExtendedMeasure, id_mysql >
  {
    // res
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    res_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::DBResult,
        id_mysql,
        res_alias_ > >
    res_pointer_type_;

    struct res_type_: res_pointer_type_, res_column_type_
    {
      res_type_ (odb::query_column< long unsigned int >& qc,
                 const char* t, const char* c, const char* conv)
        : res_column_type_ (qc, t, c, conv)
      {
      }
    };

    static const res_type_ res;

    // key
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    key_type_;

    static const key_type_ key;

    // iteration
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    iteration_type_;

    static const iteration_type_ iteration;

    // time
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    time_type_;

    static const time_type_ time;

    // v_int
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        int,
        mysql::id_long >::query_type,
      mysql::id_long >
    v_int_type_;

    static const v_int_type_ v_int;

    // v_double
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    v_double_type_;

    static const v_double_type_ v_double;

    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;
  };

#ifdef ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  const typename query_columns< ::DBExtendedMeasure, id_mysql, A >::res_type_
  query_columns< ::DBExtendedMeasure, id_mysql, A >::
  res (query_columns< ::DBExtendedMeasure, id_common, typename A::common_traits >::res,
       A::table_name, "`res`", 0);

  template <typename A>
  const typename query_columns< ::DBExtendedMeasure, id_mysql, A >::key_type_
  query_columns< ::DBExtendedMeasure, id_mysql, A >::
  key (query_columns< ::DBExtendedMeasure, id_common, typename A::common_traits >::key,
       A::table_name, "`key`", 0);

  template <typename A>
  const typename query_columns< ::DBExtendedMeasure, id_mysql, A >::iteration_type_
  query_columns< ::DBExtendedMeasure, id_mysql, A >::
  iteration (query_columns< ::DBExtendedMeasure, id_common, typename A::common_traits >::iteration,
             A::table_name, "`iteration`", 0);

  template <typename A>
  const typename query_columns< ::DBExtendedMeasure, id_mysql, A >::time_type_
  query_columns< ::DBExtendedMeasure, id_mysql, A >::
  time (query_columns< ::DBExtendedMeasure, id_common, typename A::common_traits >::time,
        A::table_name, "`time`", 0);

  template <typename A>
  const typename query_columns< ::DBExtendedMeasure, id_mysql, A >::v_int_type_
  query_columns< ::DBExtendedMeasure, id_mysql, A >::
  v_int (query_columns< ::DBExtendedMeasure, id_common, typename A::common_traits >::v_int,
         A::table_name, "`v_int`", 0);

  template <typename A>
  const typename query_columns< ::DBExtendedMeasure, id_mysql, A >::v_double_type_
  query_columns< ::DBExtendedMeasure, id_mysql, A >::
  v_double (query_columns< ::DBExtendedMeasure, id_common, typename A::common_traits >::v_double,
            A::table_name, "`v_double`", 0);

  template <typename A>
  const typename query_columns< ::DBExtendedMeasure, id_mysql, A >::id_type_
  query_columns< ::DBExtendedMeasure, id_mysql, A >::
  id (query_columns< ::DBExtendedMeasure, id_common, typename A::common_traits >::id,
      A::table_name, "`id`", 0);

#endif // ODB_MYSQL_QUERY_COLUMNS_DEF
}

#include "db_objects-odb-mysql.ixx"

#include <odb/post.hxx>

#endif // DB_OBJECTS_ODB_MYSQL_HXX
